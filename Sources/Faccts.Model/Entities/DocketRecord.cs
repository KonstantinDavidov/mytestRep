//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Linq.Expressions;
using System.Runtime.Serialization;
using ReactiveUI;
using System.Reactive.Linq;
using System.Reflection;

namespace Faccts.Model.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Courtrooms))]
    [KnownType(typeof(CourtDepartment))]
    public partial class DocketRecord: IObjectWithChangeTracker, IReactiveNotifyPropertyChanged, INavigationPropertiesLoadable
    {
    		
    		private MakeObjectReactiveHelper _reactiveHelper;
    
    		public DocketRecord()
    		{
    			_reactiveHelper = new MakeObjectReactiveHelper(this);
    			Initialize();
    			Observable.FromEvent<EventHandler<ObjectStateChangingEventArgs>, ObjectStateChangingEventArgs>(
    			handler =>
    				{
    					EventHandler<ObjectStateChangingEventArgs> eh = (sender, e) => handler(e);
    					return eh;
    				},
    				handler =>  ChangeTracker.ObjectStateChanging += handler,
    				handler =>  ChangeTracker.ObjectStateChanging -= handler
    			)
    			.Subscribe(e =>
    				{
    					if(e.NewState == ObjectState.Unchanged)
    					{
    						IsDirty = false;
    					}
    				}
    			);
    			Observable.Merge<Object>(
    				this.ObservableForProperty(x => x.CourtCaseId)
    				,this.ObservableForProperty(x => x.CaseNumber)
    				,this.ObservableForProperty(x => x.HearingDate)
    				,this.ObservableForProperty(x => x.Party1Name)
    				,this.ObservableForProperty(x => x.Party2Name)
    				,this.ObservableForProperty(x => x.HasChildren)
    				,this.ObservableForProperty(x => x.Session)
    				,this.ObservableForProperty(x => x.CourtroomsId)
    				,this.ObservableForProperty(x => x.CourtDepartmentId)
    				,this.ObservableForProperty(x => x.CourtClerkId)
    				,this.ObservableForProperty(x => x.Action)
    				,this.ObservableForProperty(x => x.Courtroom.IsDirty)
    				,this.ObservableForProperty(x => x.Department.IsDirty)
    			).
    			Subscribe(_ =>
    			{
    				if (ChangeTracker.State != ObjectState.Unchanged)
    				{
    					IsDirty = true;
    				}
    			}
    			);
    		}
    
    		partial void Initialize();
    		
    
    
    		private bool _isDirty;
    		public bool IsDirty
    		{
    			get
    			{
    				return _isDirty;
    			}
    			set
    			{
    				if (_isDirty == value)
    					return;
    				OnPropertyChanging("IsDirty");
    				_isDirty = value;
    				OnPropertyChanged("IsDirty", false);
    			}
    		}
    				
    
    		public IObservable<IObservedChange<object, object>> Changed 
    		{
    			get { return _reactiveHelper.Changed; }
    		}
    		public IObservable<IObservedChange<object, object>> Changing 
    		{
    			get { return _reactiveHelper.Changing; }
    		}
    		public IDisposable SuppressChangeNotifications() 
    		{
    			return _reactiveHelper.SuppressChangeNotifications();
    		}
    
    		private PropertyChangingEventHandler _propertyChanging;
    		public event PropertyChangingEventHandler PropertyChanging
    		{
    			add
    			{
    				_propertyChanging += value;
    			}
    			remove
    			{
    				_propertyChanging -= value;
    			}
    		}
    
    		public event EventHandler<LoadingNavigationPropertiesEventArgs> OnNavigationPropertyLoading;
    		protected virtual void RaiseNavigationPropertyLoading(string propertyName)
            {
                if (OnNavigationPropertyLoading != null)
                    OnNavigationPropertyLoading(this, new LoadingNavigationPropertiesEventArgs(propertyName));
            }
    
            protected virtual void RaiseNavigationPropertyLoading<T>(Expression<Func<T>> propertyExpression)
            {
                var body = propertyExpression.Body as MemberExpression;
                if (body == null)
                    throw new ArgumentException("'propertyExpression' should be a member expression");
    
                var expression = body.Expression as ConstantExpression;
                if (expression == null)
                    throw new ArgumentException("'propertyExpression' body should be a constant expression");
    
                object target = Expression.Lambda(expression).Compile().DynamicInvoke();
    
                RaiseNavigationPropertyLoading(body.Member.Name);
            }
    	    #region Simple Properties
    
        [DataMember]
        public long CourtCaseId
        {
            get { return _courtCaseId; }
            set
            {
                if (_courtCaseId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'CourtCaseId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
    				OnPropertyChanging("CourtCaseId");
                    _courtCaseId = value;
                    OnPropertyChanged("CourtCaseId");
                }
            }
        }
        private long _courtCaseId;
    
        [DataMember]
        public string CaseNumber
        {
            get { return _caseNumber; }
            set
            {
                if (_caseNumber != value)
                {
    				OnPropertyChanging("CaseNumber");
                    _caseNumber = value;
                    OnPropertyChanged("CaseNumber");
                }
            }
        }
        private string _caseNumber;
    
        [DataMember]
        public System.DateTime HearingDate
        {
            get { return _hearingDate; }
            set
            {
                if (_hearingDate != value)
                {
    				OnPropertyChanging("HearingDate");
                    _hearingDate = value;
                    OnPropertyChanged("HearingDate");
                }
            }
        }
        private System.DateTime _hearingDate;
    
        [DataMember]
        public string Party1Name
        {
            get { return _party1Name; }
            set
            {
                if (_party1Name != value)
                {
    				OnPropertyChanging("Party1Name");
                    _party1Name = value;
                    OnPropertyChanged("Party1Name");
                }
            }
        }
        private string _party1Name;
    
        [DataMember]
        public string Party2Name
        {
            get { return _party2Name; }
            set
            {
                if (_party2Name != value)
                {
    				OnPropertyChanging("Party2Name");
                    _party2Name = value;
                    OnPropertyChanged("Party2Name");
                }
            }
        }
        private string _party2Name;
    
        [DataMember]
        public bool HasChildren
        {
            get { return _hasChildren; }
            set
            {
                if (_hasChildren != value)
                {
    				OnPropertyChanging("HasChildren");
                    _hasChildren = value;
                    OnPropertyChanged("HasChildren");
                }
            }
        }
        private bool _hasChildren;
    
        [DataMember]
        public FACCTS.Server.Model.Enums.DocketSession Session
        {
            get { return _session; }
            set
            {
                if (_session != value)
                {
    				OnPropertyChanging("Session");
                    _session = value;
                    OnPropertyChanged("Session");
                }
            }
        }
        private FACCTS.Server.Model.Enums.DocketSession _session;
    
        [DataMember]
        public long CourtroomsId
        {
            get { return _courtroomsId; }
            set
            {
                if (_courtroomsId != value)
                {
                    ChangeTracker.RecordOriginalValue("CourtroomsId", _courtroomsId);
                    if (!IsDeserializing)
                    {
                        if (Courtroom != null && Courtroom.Id != value)
                        {
                            Courtroom = null;
                        }
                    }
    				OnPropertyChanging("CourtroomsId");
                    _courtroomsId = value;
                    OnPropertyChanged("CourtroomsId");
                }
            }
        }
        private long _courtroomsId;
    
        [DataMember]
        public long CourtDepartmentId
        {
            get { return _courtDepartmentId; }
            set
            {
                if (_courtDepartmentId != value)
                {
                    ChangeTracker.RecordOriginalValue("CourtDepartmentId", _courtDepartmentId);
                    if (!IsDeserializing)
                    {
                        if (Department != null && Department.Id != value)
                        {
                            Department = null;
                        }
                    }
    				OnPropertyChanging("CourtDepartmentId");
                    _courtDepartmentId = value;
                    OnPropertyChanged("CourtDepartmentId");
                }
            }
        }
        private long _courtDepartmentId;
    
        [DataMember]
        public Nullable<long> CourtClerkId
        {
            get { return _courtClerkId; }
            set
            {
                if (_courtClerkId != value)
                {
    				OnPropertyChanging("CourtClerkId");
                    _courtClerkId = value;
                    OnPropertyChanged("CourtClerkId");
                }
            }
        }
        private Nullable<long> _courtClerkId;
    
        [DataMember]
        public Nullable<FACCTS.Server.Model.Enums.CourtAction> Action
        {
            get { return _action; }
            set
            {
                if (_action != value)
                {
    				OnPropertyChanging("Action");
                    _action = value;
                    OnPropertyChanged("Action");
                }
            }
        }
        private Nullable<FACCTS.Server.Model.Enums.CourtAction> _action;

        #endregion

        #region Complex Properties
    
        [DataMember]
        public HearingIssue HearingIssue
        {
            get
            {
                if (!_hearingIssueInitialized && _hearingIssue == null)
                {
                    _hearingIssue = new HearingIssue();
                    ((INotifyComplexPropertyChanging)_hearingIssue).ComplexPropertyChanging += HandleHearingIssueChanging;
                }
                _hearingIssueInitialized = true;
                return _hearingIssue;
            }
            set
            {
                _hearingIssueInitialized = true;
                if (!Equals(_hearingIssue, value))
                {
                    if (_hearingIssue != null)
                    {
                        ((INotifyComplexPropertyChanging)_hearingIssue).ComplexPropertyChanging -= HandleHearingIssueChanging;
                    }
    
                    HandleHearingIssueChanging(this, null);
    				OnPropertyChanging("HearingIssue");
                    _hearingIssue = value;
                    OnPropertyChanged("HearingIssue");
    
                    if (value != null)
                    {
                        ((INotifyComplexPropertyChanging)_hearingIssue).ComplexPropertyChanging += HandleHearingIssueChanging;
                    }
                }
            }
        }
        private HearingIssue _hearingIssue;
        private bool _hearingIssueInitialized;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public Courtrooms Courtroom
        {
            get { return _courtroom; }
            set
            {
                if (!ReferenceEquals(_courtroom, value))
                {
                    var previousValue = _courtroom;
    				OnNavigationPropertyChanging("Courtroom");
                    _courtroom = value;
                    FixupCourtroom(previousValue);
                    OnNavigationPropertyChanged("Courtroom");
                }
            }
        }
        private Courtrooms _courtroom;
    
        [DataMember]
        public CourtDepartment Department
        {
            get { return _department; }
            set
            {
                if (!ReferenceEquals(_department, value))
                {
                    var previousValue = _department;
    				OnNavigationPropertyChanging("Department");
                    _department = value;
                    FixupDepartment(previousValue);
                    OnNavigationPropertyChanged("Department");
                }
            }
        }
        private CourtDepartment _department;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName, bool changeState = true)
        {
            if (changeState && ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
    	protected virtual void OnPropertyChanging(String propertyName)
        {
            if (_propertyChanging != null)
            {
                _propertyChanging(this, new PropertyChangingEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
    	protected virtual void OnNavigationPropertyChanging(String propertyName)
        {
            if (_propertyChanging != null)
            {
                _propertyChanging(this, new PropertyChangingEventArgs(propertyName));
            }
        }
    
    	
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
        // Records the original values for the complex property HearingIssue
        private void HandleHearingIssueChanging(object sender, EventArgs args)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
        }
    
    
        protected virtual void ClearNavigationProperties()
        {
            Courtroom = null;
            Department = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupCourtroom(Courtrooms previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.DocketRecord.Contains(this))
            {
                previousValue.DocketRecord.Remove(this);
            }
    
            if (Courtroom != null)
            {
                Courtroom.DocketRecord.Add(this);
    
                CourtroomsId = Courtroom.Id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Courtroom")
                    && (ChangeTracker.OriginalValues["Courtroom"] == Courtroom))
                {
                    ChangeTracker.OriginalValues.Remove("Courtroom");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Courtroom", previousValue);
                }
                if (Courtroom != null && !Courtroom.ChangeTracker.ChangeTrackingEnabled)
                {
                    Courtroom.StartTracking();
                }
            }
        }
    
        private void FixupDepartment(CourtDepartment previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.DocketRecord.Contains(this))
            {
                previousValue.DocketRecord.Remove(this);
            }
    
            if (Department != null)
            {
                Department.DocketRecord.Add(this);
    
                CourtDepartmentId = Department.Id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Department")
                    && (ChangeTracker.OriginalValues["Department"] == Department))
                {
                    ChangeTracker.OriginalValues.Remove("Department");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Department", previousValue);
                }
                if (Department != null && !Department.ChangeTracker.ChangeTrackingEnabled)
                {
                    Department.StartTracking();
                }
            }
        }

        #endregion

    }
}
