//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Linq.Expressions;
using System.Runtime.Serialization;
using ReactiveUI;
using System.Reactive.Linq;

namespace Faccts.Model.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(CaseHistory))]
    [KnownType(typeof(CaseNotes))]
    [KnownType(typeof(CourtCase))]
    [KnownType(typeof(CourtMember))]
    [KnownType(typeof(ManualIntegrationTasks))]
    [KnownType(typeof(ScheduledIntegrationTasks))]
    [KnownType(typeof(Role))]
    public partial class User: IObjectWithChangeTracker, IReactiveNotifyPropertyChanged, INavigationPropertiesLoadable
    {
    		
    		private MakeObjectReactiveHelper _reactiveHelper;
    
    		public User()
    		{
    			_reactiveHelper = new MakeObjectReactiveHelper(this);
    			Initialize();
    			Observable.FromEvent<EventHandler<ObjectStateChangingEventArgs>, ObjectStateChangingEventArgs>(
    			handler =>
    				{
    					EventHandler<ObjectStateChangingEventArgs> eh = (sender, e) => handler(e);
    					return eh;
    				},
    				handler =>  ChangeTracker.ObjectStateChanging += handler,
    				handler =>  ChangeTracker.ObjectStateChanging -= handler
    			)
    			.Subscribe(e =>
    				{
    					IsDirty = e.NewState != ObjectState.Unchanged;
    				}
    			);
    		}
    
    		partial void Initialize();
    		
    		private bool _isDirty;
    		public bool IsDirty
    		{
    			get
    			{
    				return _isDirty;
    			}
    			set
    			{
    				if (_isDirty == value)
    					return;
    				OnPropertyChanging("IsDirty");
    				_isDirty = value;
    				OnPropertyChanged("IsDirty");
    			}
    		}
    				
    
    		public IObservable<IObservedChange<object, object>> Changed 
    		{
    			get { return _reactiveHelper.Changed; }
    		}
    		public IObservable<IObservedChange<object, object>> Changing 
    		{
    			get { return _reactiveHelper.Changing; }
    		}
    		public IDisposable SuppressChangeNotifications() 
    		{
    			return _reactiveHelper.SuppressChangeNotifications();
    		}
    
    		private PropertyChangingEventHandler _propertyChanging;
    		public event PropertyChangingEventHandler PropertyChanging
    		{
    			add
    			{
    				_propertyChanging += value;
    			}
    			remove
    			{
    				_propertyChanging -= value;
    			}
    		}
    
    		public event EventHandler<LoadingNavigationPropertiesEventArgs> OnNavigationPropertyLoading;
    		protected virtual void RaiseNavigationPropertyLoading(string propertyName)
            {
                if (OnNavigationPropertyLoading != null)
                    OnNavigationPropertyLoading(this, new LoadingNavigationPropertiesEventArgs(propertyName));
            }
    
            protected virtual void RaiseNavigationPropertyLoading<T>(Expression<Func<T>> propertyExpression)
            {
                var body = propertyExpression.Body as MemberExpression;
                if (body == null)
                    throw new ArgumentException("'propertyExpression' should be a member expression");
    
                var expression = body.Expression as ConstantExpression;
                if (expression == null)
                    throw new ArgumentException("'propertyExpression' body should be a constant expression");
    
                object target = Expression.Lambda(expression).Compile().DynamicInvoke();
    
                RaiseNavigationPropertyLoading(body.Member.Name);
            }
    	    #region Simple Properties
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
    				OnPropertyChanging("Id");
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public string Username
        {
            get { return _username; }
            set
            {
                if (_username != value)
                {
    				OnPropertyChanging("Username");
                    _username = value;
                    OnPropertyChanged("Username");
                }
            }
        }
        private string _username;
    
        [DataMember]
        public string Email
        {
            get { return _email; }
            set
            {
                if (_email != value)
                {
    				OnPropertyChanging("Email");
                    _email = value;
                    OnPropertyChanged("Email");
                }
            }
        }
        private string _email;
    
        [DataMember]
        public string Password
        {
            get { return _password; }
            set
            {
                if (_password != value)
                {
    				OnPropertyChanging("Password");
                    _password = value;
                    OnPropertyChanged("Password");
                }
            }
        }
        private string _password;
    
        [DataMember]
        public string FirstName
        {
            get { return _firstName; }
            set
            {
                if (_firstName != value)
                {
    				OnPropertyChanging("FirstName");
                    _firstName = value;
                    OnPropertyChanged("FirstName");
                }
            }
        }
        private string _firstName;
    
        [DataMember]
        public string LastName
        {
            get { return _lastName; }
            set
            {
                if (_lastName != value)
                {
    				OnPropertyChanging("LastName");
                    _lastName = value;
                    OnPropertyChanged("LastName");
                }
            }
        }
        private string _lastName;
    
        [DataMember]
        public string MiddleName
        {
            get { return _middleName; }
            set
            {
                if (_middleName != value)
                {
    				OnPropertyChanging("MiddleName");
                    _middleName = value;
                    OnPropertyChanged("MiddleName");
                }
            }
        }
        private string _middleName;
    
        [DataMember]
        public string Comment
        {
            get { return _comment; }
            set
            {
                if (_comment != value)
                {
    				OnPropertyChanging("Comment");
                    _comment = value;
                    OnPropertyChanged("Comment");
                }
            }
        }
        private string _comment;
    
        [DataMember]
        public bool IsApproved
        {
            get { return _isApproved; }
            set
            {
                if (_isApproved != value)
                {
    				OnPropertyChanging("IsApproved");
                    _isApproved = value;
                    OnPropertyChanged("IsApproved");
                }
            }
        }
        private bool _isApproved;
    
        [DataMember]
        public int PasswordFailuresSinceLastSuccess
        {
            get { return _passwordFailuresSinceLastSuccess; }
            set
            {
                if (_passwordFailuresSinceLastSuccess != value)
                {
    				OnPropertyChanging("PasswordFailuresSinceLastSuccess");
                    _passwordFailuresSinceLastSuccess = value;
                    OnPropertyChanged("PasswordFailuresSinceLastSuccess");
                }
            }
        }
        private int _passwordFailuresSinceLastSuccess;
    
        [DataMember]
        public Nullable<System.DateTime> LastPasswordFailureDate
        {
            get { return _lastPasswordFailureDate; }
            set
            {
                if (_lastPasswordFailureDate != value)
                {
    				OnPropertyChanging("LastPasswordFailureDate");
                    _lastPasswordFailureDate = value;
                    OnPropertyChanged("LastPasswordFailureDate");
                }
            }
        }
        private Nullable<System.DateTime> _lastPasswordFailureDate;
    
        [DataMember]
        public Nullable<System.DateTime> LastActivityDate
        {
            get { return _lastActivityDate; }
            set
            {
                if (_lastActivityDate != value)
                {
    				OnPropertyChanging("LastActivityDate");
                    _lastActivityDate = value;
                    OnPropertyChanged("LastActivityDate");
                }
            }
        }
        private Nullable<System.DateTime> _lastActivityDate;
    
        [DataMember]
        public Nullable<System.DateTime> LastLockoutDate
        {
            get { return _lastLockoutDate; }
            set
            {
                if (_lastLockoutDate != value)
                {
    				OnPropertyChanging("LastLockoutDate");
                    _lastLockoutDate = value;
                    OnPropertyChanged("LastLockoutDate");
                }
            }
        }
        private Nullable<System.DateTime> _lastLockoutDate;
    
        [DataMember]
        public Nullable<System.DateTime> LastLoginDate
        {
            get { return _lastLoginDate; }
            set
            {
                if (_lastLoginDate != value)
                {
    				OnPropertyChanging("LastLoginDate");
                    _lastLoginDate = value;
                    OnPropertyChanged("LastLoginDate");
                }
            }
        }
        private Nullable<System.DateTime> _lastLoginDate;
    
        [DataMember]
        public string ConfirmationToken
        {
            get { return _confirmationToken; }
            set
            {
                if (_confirmationToken != value)
                {
    				OnPropertyChanging("ConfirmationToken");
                    _confirmationToken = value;
                    OnPropertyChanged("ConfirmationToken");
                }
            }
        }
        private string _confirmationToken;
    
        [DataMember]
        public Nullable<System.DateTime> CreateDate
        {
            get { return _createDate; }
            set
            {
                if (_createDate != value)
                {
    				OnPropertyChanging("CreateDate");
                    _createDate = value;
                    OnPropertyChanged("CreateDate");
                }
            }
        }
        private Nullable<System.DateTime> _createDate;
    
        [DataMember]
        public bool IsLockedOut
        {
            get { return _isLockedOut; }
            set
            {
                if (_isLockedOut != value)
                {
    				OnPropertyChanging("IsLockedOut");
                    _isLockedOut = value;
                    OnPropertyChanged("IsLockedOut");
                }
            }
        }
        private bool _isLockedOut;
    
        [DataMember]
        public Nullable<System.DateTime> LastPasswordChangedDate
        {
            get { return _lastPasswordChangedDate; }
            set
            {
                if (_lastPasswordChangedDate != value)
                {
    				OnPropertyChanging("LastPasswordChangedDate");
                    _lastPasswordChangedDate = value;
                    OnPropertyChanged("LastPasswordChangedDate");
                }
            }
        }
        private Nullable<System.DateTime> _lastPasswordChangedDate;
    
        [DataMember]
        public string PasswordVerificationToken
        {
            get { return _passwordVerificationToken; }
            set
            {
                if (_passwordVerificationToken != value)
                {
    				OnPropertyChanging("PasswordVerificationToken");
                    _passwordVerificationToken = value;
                    OnPropertyChanged("PasswordVerificationToken");
                }
            }
        }
        private string _passwordVerificationToken;
    
        [DataMember]
        public Nullable<System.DateTime> PasswordVerificationTokenExpirationDate
        {
            get { return _passwordVerificationTokenExpirationDate; }
            set
            {
                if (_passwordVerificationTokenExpirationDate != value)
                {
    				OnPropertyChanging("PasswordVerificationTokenExpirationDate");
                    _passwordVerificationTokenExpirationDate = value;
                    OnPropertyChanged("PasswordVerificationTokenExpirationDate");
                }
            }
        }
        private Nullable<System.DateTime> _passwordVerificationTokenExpirationDate;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<CaseHistory> CaseHistory
        {
            get
            {
                if (_caseHistory == null)
                {
                    _caseHistory = new TrackableCollection<CaseHistory>();
                    _caseHistory.CollectionChanged += FixupCaseHistory;
                }
                return _caseHistory;
            }
            set
            {
                if (!ReferenceEquals(_caseHistory, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
    				OnNavigationPropertyChanging("CaseHistory");
                    if (_caseHistory != null)
                    {
                        _caseHistory.CollectionChanged -= FixupCaseHistory;
                    }
                    _caseHistory = value;
                    if (_caseHistory != null)
                    {
                        _caseHistory.CollectionChanged += FixupCaseHistory;
                    }
                    OnNavigationPropertyChanged("CaseHistory");
                }
            }
        }
        private TrackableCollection<CaseHistory> _caseHistory;
    
        [DataMember]
        public TrackableCollection<CaseNotes> CaseNotes
        {
            get
            {
                if (_caseNotes == null)
                {
                    _caseNotes = new TrackableCollection<CaseNotes>();
                    _caseNotes.CollectionChanged += FixupCaseNotes;
                }
                return _caseNotes;
            }
            set
            {
                if (!ReferenceEquals(_caseNotes, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
    				OnNavigationPropertyChanging("CaseNotes");
                    if (_caseNotes != null)
                    {
                        _caseNotes.CollectionChanged -= FixupCaseNotes;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (CaseNotes item in _caseNotes)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _caseNotes = value;
                    if (_caseNotes != null)
                    {
                        _caseNotes.CollectionChanged += FixupCaseNotes;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (CaseNotes item in _caseNotes)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("CaseNotes");
                }
            }
        }
        private TrackableCollection<CaseNotes> _caseNotes;
    
        [DataMember]
        public TrackableCollection<CourtCase> CourtCase
        {
            get
            {
                if (_courtCase == null)
                {
                    _courtCase = new TrackableCollection<CourtCase>();
                    _courtCase.CollectionChanged += FixupCourtCase;
                }
                return _courtCase;
            }
            set
            {
                if (!ReferenceEquals(_courtCase, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
    				OnNavigationPropertyChanging("CourtCase");
                    if (_courtCase != null)
                    {
                        _courtCase.CollectionChanged -= FixupCourtCase;
                    }
                    _courtCase = value;
                    if (_courtCase != null)
                    {
                        _courtCase.CollectionChanged += FixupCourtCase;
                    }
                    OnNavigationPropertyChanged("CourtCase");
                }
            }
        }
        private TrackableCollection<CourtCase> _courtCase;
    
        [DataMember]
        public CourtMember CourtMember
        {
            get { return _courtMember; }
            set
            {
                if (!ReferenceEquals(_courtMember, value))
                {
                    var previousValue = _courtMember;
    				OnNavigationPropertyChanging("CourtMember");
                    _courtMember = value;
                    FixupCourtMember(previousValue);
                    OnNavigationPropertyChanged("CourtMember");
                }
            }
        }
        private CourtMember _courtMember;
    
        [DataMember]
        public TrackableCollection<ManualIntegrationTasks> ManualIntegrationTasks
        {
            get
            {
                if (_manualIntegrationTasks == null)
                {
                    _manualIntegrationTasks = new TrackableCollection<ManualIntegrationTasks>();
                    _manualIntegrationTasks.CollectionChanged += FixupManualIntegrationTasks;
                }
                return _manualIntegrationTasks;
            }
            set
            {
                if (!ReferenceEquals(_manualIntegrationTasks, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
    				OnNavigationPropertyChanging("ManualIntegrationTasks");
                    if (_manualIntegrationTasks != null)
                    {
                        _manualIntegrationTasks.CollectionChanged -= FixupManualIntegrationTasks;
                    }
                    _manualIntegrationTasks = value;
                    if (_manualIntegrationTasks != null)
                    {
                        _manualIntegrationTasks.CollectionChanged += FixupManualIntegrationTasks;
                    }
                    OnNavigationPropertyChanged("ManualIntegrationTasks");
                }
            }
        }
        private TrackableCollection<ManualIntegrationTasks> _manualIntegrationTasks;
    
        [DataMember]
        public TrackableCollection<ScheduledIntegrationTasks> ScheduledIntegrationTasks
        {
            get
            {
                if (_scheduledIntegrationTasks == null)
                {
                    _scheduledIntegrationTasks = new TrackableCollection<ScheduledIntegrationTasks>();
                    _scheduledIntegrationTasks.CollectionChanged += FixupScheduledIntegrationTasks;
                }
                return _scheduledIntegrationTasks;
            }
            set
            {
                if (!ReferenceEquals(_scheduledIntegrationTasks, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
    				OnNavigationPropertyChanging("ScheduledIntegrationTasks");
                    if (_scheduledIntegrationTasks != null)
                    {
                        _scheduledIntegrationTasks.CollectionChanged -= FixupScheduledIntegrationTasks;
                    }
                    _scheduledIntegrationTasks = value;
                    if (_scheduledIntegrationTasks != null)
                    {
                        _scheduledIntegrationTasks.CollectionChanged += FixupScheduledIntegrationTasks;
                    }
                    OnNavigationPropertyChanged("ScheduledIntegrationTasks");
                }
            }
        }
        private TrackableCollection<ScheduledIntegrationTasks> _scheduledIntegrationTasks;
    
        [DataMember]
        public TrackableCollection<Role> Role
        {
            get
            {
                if (_role == null)
                {
                    _role = new TrackableCollection<Role>();
                    _role.CollectionChanged += FixupRole;
                }
                return _role;
            }
            set
            {
                if (!ReferenceEquals(_role, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
    				OnNavigationPropertyChanging("Role");
                    if (_role != null)
                    {
                        _role.CollectionChanged -= FixupRole;
                    }
                    _role = value;
                    if (_role != null)
                    {
                        _role.CollectionChanged += FixupRole;
                    }
                    OnNavigationPropertyChanged("Role");
                }
            }
        }
        private TrackableCollection<Role> _role;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
    	protected virtual void OnPropertyChanging(String propertyName)
        {
            if (_propertyChanging != null)
            {
                _propertyChanging(this, new PropertyChangingEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
    	protected virtual void OnNavigationPropertyChanging(String propertyName)
        {
            if (_propertyChanging != null)
            {
                _propertyChanging(this, new PropertyChangingEventArgs(propertyName));
            }
        }
    
    	
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            CaseHistory.Clear();
            CaseNotes.Clear();
            CourtCase.Clear();
            CourtMember = null;
            ManualIntegrationTasks.Clear();
            ScheduledIntegrationTasks.Clear();
            Role.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupCourtMember(CourtMember previousValue)
        {
            // This is the principal end in an association that performs cascade deletes.
            // Update the event listener to refer to the new dependent.
            if (previousValue != null)
            {
                ChangeTracker.ObjectStateChanging -= previousValue.HandleCascadeDelete;
            }
    
            if (CourtMember != null)
            {
                ChangeTracker.ObjectStateChanging += CourtMember.HandleCascadeDelete;
            }
    
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && ReferenceEquals(previousValue.User, this))
            {
                previousValue.User = null;
            }
    
            if (CourtMember != null)
            {
                CourtMember.User = this;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("CourtMember")
                    && (ChangeTracker.OriginalValues["CourtMember"] == CourtMember))
                {
                    ChangeTracker.OriginalValues.Remove("CourtMember");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("CourtMember", previousValue);
                    // This is the principal end of an identifying association, so the dependent must be deleted when the relationship is removed.
                    // If the current state of the dependent is Added, the relationship can be changed without causing the dependent to be deleted.
                    if (previousValue != null && previousValue.ChangeTracker.State != ObjectState.Added)
                    {
                        previousValue.MarkAsDeleted();
                    }
                }
                if (CourtMember != null && !CourtMember.ChangeTracker.ChangeTrackingEnabled)
                {
                    CourtMember.StartTracking();
                }
            }
        }
    
        private void FixupCaseHistory(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CaseHistory item in e.NewItems)
                {
                    item.User = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CaseHistory", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CaseHistory item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CaseHistory", item);
                    }
                }
            }
        }
    
        private void FixupCaseNotes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CaseNotes item in e.NewItems)
                {
                    item.User = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CaseNotes", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CaseNotes item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CaseNotes", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupCourtCase(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CourtCase item in e.NewItems)
                {
                    item.User = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CourtCase", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CourtCase item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CourtCase", item);
                    }
                }
            }
        }
    
        private void FixupManualIntegrationTasks(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ManualIntegrationTasks item in e.NewItems)
                {
                    item.User = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ManualIntegrationTasks", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ManualIntegrationTasks item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ManualIntegrationTasks", item);
                    }
                }
            }
        }
    
        private void FixupScheduledIntegrationTasks(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ScheduledIntegrationTasks item in e.NewItems)
                {
                    item.User = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ScheduledIntegrationTasks", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ScheduledIntegrationTasks item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ScheduledIntegrationTasks", item);
                    }
                }
            }
        }
    
        private void FixupRole(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Role item in e.NewItems)
                {
                    item.User1.Add(this);
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Role", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Role item in e.OldItems)
                {
                    if (item.User1.Contains(this))
                    {
                        item.User1.Remove(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Role", item);
                    }
                }
            }
        }

        #endregion

    }
}
