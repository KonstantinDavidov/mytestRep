//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Linq.Expressions;
using System.Runtime.Serialization;
using ReactiveUI;
using System.Reactive.Linq;

namespace Faccts.Model.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(CourtCase))]
    [KnownType(typeof(Hearings))]
    [KnownType(typeof(User))]
    public partial class CaseHistory: IObjectWithChangeTracker, IReactiveNotifyPropertyChanged, INavigationPropertiesLoadable
    {
    		
    		private MakeObjectReactiveHelper _reactiveHelper;
    
    		public CaseHistory()
    		{
    			_reactiveHelper = new MakeObjectReactiveHelper(this);
    			Initialize();
    			Observable.FromEvent<EventHandler<ObjectStateChangingEventArgs>, ObjectStateChangingEventArgs>(
    			handler =>
    				{
    					EventHandler<ObjectStateChangingEventArgs> eh = (sender, e) => handler(e);
    					return eh;
    				},
    				handler =>  ChangeTracker.ObjectStateChanging += handler,
    				handler =>  ChangeTracker.ObjectStateChanging -= handler
    			)
    			.Subscribe(e =>
    				{
    					if(e.NewState == ObjectState.Unchanged)
    					{
    						IsDirty = false;
    					}
    				}
    			);
    			Observable.Merge<Object>(
    				this.ObservableForProperty(x => x.Id)
    				,this.ObservableForProperty(x => x.Date)
    				,this.ObservableForProperty(x => x.CaseHistoryEvent)
    				,this.ObservableForProperty(x => x.CCPOR_ID)
    				,this.ObservableForProperty(x => x.MergeCaseId)
    				,this.ObservableForProperty(x => x.CourtCaseId)
    				,this.ObservableForProperty(x => x.CourtClerkId)
    				,this.ObservableForProperty(x => x.CCPORId)
    				,this.ObservableForProperty(x => x.HearingId)
    				,this.ObservableForProperty(x => x.MergeCase.IsDirty)
    				,this.ObservableForProperty(x => x.CourtCase.IsDirty)
    				,this.ObservableForProperty(x => x.Hearing.IsDirty)
    				,this.ObservableForProperty(x => x.CourtClerk.IsDirty)
    			).
    			Subscribe(_ =>
    			{
    				if (ChangeTracker.State != ObjectState.Unchanged)
    				{
    					IsDirty = true;
    				}
    			}
    			);
    		}
    
    		partial void Initialize();
    		
    
    
    		private bool _isDirty;
    		public bool IsDirty
    		{
    			get
    			{
    				return _isDirty;
    			}
    			set
    			{
    				if (_isDirty == value)
    					return;
    				OnPropertyChanging("IsDirty");
    				_isDirty = value;
    				OnPropertyChanged("IsDirty", false);
    			}
    		}
    				
    
    		public IObservable<IObservedChange<object, object>> Changed 
    		{
    			get { return _reactiveHelper.Changed; }
    		}
    		public IObservable<IObservedChange<object, object>> Changing 
    		{
    			get { return _reactiveHelper.Changing; }
    		}
    		public IDisposable SuppressChangeNotifications() 
    		{
    			return _reactiveHelper.SuppressChangeNotifications();
    		}
    
    		private PropertyChangingEventHandler _propertyChanging;
    		public event PropertyChangingEventHandler PropertyChanging
    		{
    			add
    			{
    				_propertyChanging += value;
    			}
    			remove
    			{
    				_propertyChanging -= value;
    			}
    		}
    
    		public event EventHandler<LoadingNavigationPropertiesEventArgs> OnNavigationPropertyLoading;
    		protected virtual void RaiseNavigationPropertyLoading(string propertyName)
            {
                if (OnNavigationPropertyLoading != null)
                    OnNavigationPropertyLoading(this, new LoadingNavigationPropertiesEventArgs(propertyName));
            }
    
            protected virtual void RaiseNavigationPropertyLoading<T>(Expression<Func<T>> propertyExpression)
            {
                var body = propertyExpression.Body as MemberExpression;
                if (body == null)
                    throw new ArgumentException("'propertyExpression' should be a member expression");
    
                var expression = body.Expression as ConstantExpression;
                if (expression == null)
                    throw new ArgumentException("'propertyExpression' body should be a constant expression");
    
                object target = Expression.Lambda(expression).Compile().DynamicInvoke();
    
                RaiseNavigationPropertyLoading(body.Member.Name);
            }
    	    #region Simple Properties
    
        [DataMember]
        public long Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
    				OnPropertyChanging("Id");
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private long _id;
    
        [DataMember]
        public Nullable<System.DateTime> Date
        {
            get { return _date; }
            set
            {
                if (_date != value)
                {
    				OnPropertyChanging("Date");
                    _date = value;
                    OnPropertyChanged("Date");
                }
            }
        }
        private Nullable<System.DateTime> _date;
    
        [DataMember]
        public FACCTS.Server.Model.Enums.CaseHistoryEvent CaseHistoryEvent
        {
            get { return _caseHistoryEvent; }
            set
            {
                if (_caseHistoryEvent != value)
                {
    				OnPropertyChanging("CaseHistoryEvent");
                    _caseHistoryEvent = value;
                    OnPropertyChanged("CaseHistoryEvent");
                }
            }
        }
        private FACCTS.Server.Model.Enums.CaseHistoryEvent _caseHistoryEvent;
    
        [DataMember]
        public string CCPOR_ID
        {
            get { return _cCPOR_ID; }
            set
            {
                if (_cCPOR_ID != value)
                {
    				OnPropertyChanging("CCPOR_ID");
                    _cCPOR_ID = value;
                    OnPropertyChanged("CCPOR_ID");
                }
            }
        }
        private string _cCPOR_ID;
    
        [DataMember]
        public Nullable<long> MergeCaseId
        {
            get { return _mergeCaseId; }
            set
            {
                if (_mergeCaseId != value)
                {
                    ChangeTracker.RecordOriginalValue("MergeCaseId", _mergeCaseId);
                    if (!IsDeserializing)
                    {
                        if (MergeCase != null && MergeCase.Id != value)
                        {
                            MergeCase = null;
                        }
                    }
    				OnPropertyChanging("MergeCaseId");
                    _mergeCaseId = value;
                    OnPropertyChanged("MergeCaseId");
                }
            }
        }
        private Nullable<long> _mergeCaseId;
    
        [DataMember]
        public long CourtCaseId
        {
            get { return _courtCaseId; }
            set
            {
                if (_courtCaseId != value)
                {
                    ChangeTracker.RecordOriginalValue("CourtCaseId", _courtCaseId);
                    if (!IsDeserializing)
                    {
                        if (CourtCase != null && CourtCase.Id != value)
                        {
                            CourtCase = null;
                        }
                    }
    				OnPropertyChanging("CourtCaseId");
                    _courtCaseId = value;
                    OnPropertyChanged("CourtCaseId");
                }
            }
        }
        private long _courtCaseId;
    
        [DataMember]
        public Nullable<long> CourtClerkId
        {
            get { return _courtClerkId; }
            set
            {
                if (_courtClerkId != value)
                {
                    ChangeTracker.RecordOriginalValue("CourtClerkId", _courtClerkId);
                    if (!IsDeserializing)
                    {
                        if (CourtClerk != null && CourtClerk.Id != value)
                        {
                            CourtClerk = null;
                        }
                    }
    				OnPropertyChanging("CourtClerkId");
                    _courtClerkId = value;
                    OnPropertyChanged("CourtClerkId");
                }
            }
        }
        private Nullable<long> _courtClerkId;
    
        [DataMember]
        public string CCPORId
        {
            get { return _cCPORId; }
            set
            {
                if (_cCPORId != value)
                {
    				OnPropertyChanging("CCPORId");
                    _cCPORId = value;
                    OnPropertyChanged("CCPORId");
                }
            }
        }
        private string _cCPORId;
    
        [DataMember]
        public Nullable<long> HearingId
        {
            get { return _hearingId; }
            set
            {
                if (_hearingId != value)
                {
                    ChangeTracker.RecordOriginalValue("HearingId", _hearingId);
                    if (!IsDeserializing)
                    {
                        if (Hearing != null && Hearing.Id != value)
                        {
                            Hearing = null;
                        }
                    }
    				OnPropertyChanging("HearingId");
                    _hearingId = value;
                    OnPropertyChanged("HearingId");
                }
            }
        }
        private Nullable<long> _hearingId;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public CourtCase MergeCase
        {
            get { return _mergeCase; }
            set
            {
                if (!ReferenceEquals(_mergeCase, value))
                {
                    var previousValue = _mergeCase;
    				OnNavigationPropertyChanging("MergeCase");
                    _mergeCase = value;
                    FixupMergeCase(previousValue);
                    OnNavigationPropertyChanged("MergeCase");
                }
            }
        }
        private CourtCase _mergeCase;
    
        [DataMember]
        public CourtCase CourtCase
        {
            get { return _courtCase; }
            set
            {
                if (!ReferenceEquals(_courtCase, value))
                {
                    var previousValue = _courtCase;
    				OnNavigationPropertyChanging("CourtCase");
                    _courtCase = value;
                    FixupCourtCase(previousValue);
                    OnNavigationPropertyChanged("CourtCase");
                }
            }
        }
        private CourtCase _courtCase;
    
        [DataMember]
        public Hearings Hearing
        {
            get { return _hearing; }
            set
            {
                if (!ReferenceEquals(_hearing, value))
                {
                    var previousValue = _hearing;
    				OnNavigationPropertyChanging("Hearing");
                    _hearing = value;
                    FixupHearing(previousValue);
                    OnNavigationPropertyChanged("Hearing");
                }
            }
        }
        private Hearings _hearing;
    
        [DataMember]
        public User CourtClerk
        {
            get { return _courtClerk; }
            set
            {
                if (!ReferenceEquals(_courtClerk, value))
                {
                    var previousValue = _courtClerk;
    				OnNavigationPropertyChanging("CourtClerk");
                    _courtClerk = value;
                    FixupCourtClerk(previousValue);
                    OnNavigationPropertyChanged("CourtClerk");
                }
            }
        }
        private User _courtClerk;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName, bool changeState = true)
        {
            if (changeState && ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
    	protected virtual void OnPropertyChanging(String propertyName)
        {
            if (_propertyChanging != null)
            {
                _propertyChanging(this, new PropertyChangingEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
    	protected virtual void OnNavigationPropertyChanging(String propertyName)
        {
            if (_propertyChanging != null)
            {
                _propertyChanging(this, new PropertyChangingEventArgs(propertyName));
            }
        }
    
    	
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            MergeCase = null;
            CourtCase = null;
            Hearing = null;
            CourtClerk = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupMergeCase(CourtCase previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (MergeCase != null)
            {
                MergeCaseId = MergeCase.Id;
            }
    
            else if (!skipKeys)
            {
                MergeCaseId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("MergeCase")
                    && (ChangeTracker.OriginalValues["MergeCase"] == MergeCase))
                {
                    ChangeTracker.OriginalValues.Remove("MergeCase");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("MergeCase", previousValue);
                }
                if (MergeCase != null && !MergeCase.ChangeTracker.ChangeTrackingEnabled)
                {
                    MergeCase.StartTracking();
                }
            }
        }
    
        private void FixupCourtCase(CourtCase previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CaseHistory.Contains(this))
            {
                previousValue.CaseHistory.Remove(this);
            }
    
            if (CourtCase != null)
            {
                CourtCase.CaseHistory.Add(this);
    
                CourtCaseId = CourtCase.Id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("CourtCase")
                    && (ChangeTracker.OriginalValues["CourtCase"] == CourtCase))
                {
                    ChangeTracker.OriginalValues.Remove("CourtCase");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("CourtCase", previousValue);
                }
                if (CourtCase != null && !CourtCase.ChangeTracker.ChangeTrackingEnabled)
                {
                    CourtCase.StartTracking();
                }
            }
        }
    
        private void FixupHearing(Hearings previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (Hearing != null)
            {
                HearingId = Hearing.Id;
            }
    
            else if (!skipKeys)
            {
                HearingId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Hearing")
                    && (ChangeTracker.OriginalValues["Hearing"] == Hearing))
                {
                    ChangeTracker.OriginalValues.Remove("Hearing");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Hearing", previousValue);
                }
                if (Hearing != null && !Hearing.ChangeTracker.ChangeTrackingEnabled)
                {
                    Hearing.StartTracking();
                }
            }
        }
    
        private void FixupCourtClerk(User previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (CourtClerk != null)
            {
                CourtClerkId = CourtClerk.Id;
            }
    
            else if (!skipKeys)
            {
                CourtClerkId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("CourtClerk")
                    && (ChangeTracker.OriginalValues["CourtClerk"] == CourtClerk))
                {
                    ChangeTracker.OriginalValues.Remove("CourtClerk");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("CourtClerk", previousValue);
                }
                if (CourtClerk != null && !CourtClerk.ChangeTracker.ChangeTrackingEnabled)
                {
                    CourtClerk.StartTracking();
                }
            }
        }

        #endregion

    }
}
