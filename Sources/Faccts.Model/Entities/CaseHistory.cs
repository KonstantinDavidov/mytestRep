//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Linq.Expressions;
using System.Runtime.Serialization;
using ReactiveUI;
using System.Reactive.Linq;

namespace Faccts.Model.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(CourtCaseOrders))]
    [KnownType(typeof(Hearings))]
    [KnownType(typeof(CourtCase))]
    [KnownType(typeof(User))]
    [KnownType(typeof(Attorneys))]
    [KnownType(typeof(CourtPartyAttorneyData))]
    [KnownType(typeof(ThirdPartyData))]
    [KnownType(typeof(MasterOrder))]
    public partial class CaseHistory: IObjectWithChangeTracker, IReactiveNotifyPropertyChanged, INavigationPropertiesLoadable
    {
    		
    		private MakeObjectReactiveHelper _reactiveHelper;
    
    		public CaseHistory()
    		{
    			_reactiveHelper = new MakeObjectReactiveHelper(this);
    			Initialize();
    			Observable.FromEvent<EventHandler<ObjectStateChangingEventArgs>, ObjectStateChangingEventArgs>(
    			handler =>
    				{
    					EventHandler<ObjectStateChangingEventArgs> eh = (sender, e) => handler(e);
    					return eh;
    				},
    				handler =>  ChangeTracker.ObjectStateChanging += handler,
    				handler =>  ChangeTracker.ObjectStateChanging -= handler
    			)
    			.Subscribe(e =>
    				{
    					if(e.NewState == ObjectState.Unchanged)
    					{
    						IsDirty = false;
    					}
    				}
    			);
    			Observable.Merge<Object>(
    				this.ObservableForProperty(x => x.Id)
    				,this.ObservableForProperty(x => x.Date)
    				,this.ObservableForProperty(x => x.CaseHistoryEvent)
    				,this.ObservableForProperty(x => x.CCPOR_ID)
    				,this.ObservableForProperty(x => x.CourtCaseOrderId)
    				,this.ObservableForProperty(x => x.MergeCase_Id)
    				,this.ObservableForProperty(x => x.CourtOrder_Id)
    				,this.ObservableForProperty(x => x.CourtClerk_Id)
    				,this.ObservableForProperty(x => x.CourtCase_Id)
    				,this.ObservableForProperty(x => x.AttorneyForChild_Id)
    				,this.ObservableForProperty(x => x.Party1Attorney_Id)
    				,this.ObservableForProperty(x => x.Party2Attorney_Id)
    				,this.ObservableForProperty(x => x.ThirdPartyData_Id)
    				,this.ObservableForProperty(x => x.CourtCaseOrders.IsDirty)
    				,this.ObservableForProperty(x => x.Hearing.IsDirty)
    				,this.ObservableForProperty(x => x.MergeCase.IsDirty)
    				,this.ObservableForProperty(x => x.CourtCaseOrders1.IsDirty)
    				,this.ObservableForProperty(x => x.User.IsDirty)
    				,this.ObservableForProperty(x => x.CourtCase.IsDirty)
    				,this.ObservableForProperty(x => x.AttorneyForChild.IsDirty)
    				,this.ObservableForProperty(x => x.Party1AttorneyData.IsDirty)
    				,this.ObservableForProperty(x => x.Party2AttorneyData.IsDirty)
    				,this.ObservableForProperty(x => x.ThirdPartyData.IsDirty)
    				,this.ObservableForProperty(x => x.MasterOrder.IsDirty)
    			).
    			Subscribe(_ =>
    			{
    				if (ChangeTracker.State != ObjectState.Unchanged)
    				{
    					IsDirty = true;
    				}
    			}
    			);
    		}
    
    		partial void Initialize();
    		
    
    
    		private bool _isDirty;
    		public bool IsDirty
    		{
    			get
    			{
    				return _isDirty;
    			}
    			set
    			{
    				if (_isDirty == value)
    					return;
    				OnPropertyChanging("IsDirty");
    				_isDirty = value;
    				OnPropertyChanged("IsDirty");
    			}
    		}
    				
    
    		public IObservable<IObservedChange<object, object>> Changed 
    		{
    			get { return _reactiveHelper.Changed; }
    		}
    		public IObservable<IObservedChange<object, object>> Changing 
    		{
    			get { return _reactiveHelper.Changing; }
    		}
    		public IDisposable SuppressChangeNotifications() 
    		{
    			return _reactiveHelper.SuppressChangeNotifications();
    		}
    
    		private PropertyChangingEventHandler _propertyChanging;
    		public event PropertyChangingEventHandler PropertyChanging
    		{
    			add
    			{
    				_propertyChanging += value;
    			}
    			remove
    			{
    				_propertyChanging -= value;
    			}
    		}
    
    		public event EventHandler<LoadingNavigationPropertiesEventArgs> OnNavigationPropertyLoading;
    		protected virtual void RaiseNavigationPropertyLoading(string propertyName)
            {
                if (OnNavigationPropertyLoading != null)
                    OnNavigationPropertyLoading(this, new LoadingNavigationPropertiesEventArgs(propertyName));
            }
    
            protected virtual void RaiseNavigationPropertyLoading<T>(Expression<Func<T>> propertyExpression)
            {
                var body = propertyExpression.Body as MemberExpression;
                if (body == null)
                    throw new ArgumentException("'propertyExpression' should be a member expression");
    
                var expression = body.Expression as ConstantExpression;
                if (expression == null)
                    throw new ArgumentException("'propertyExpression' body should be a constant expression");
    
                object target = Expression.Lambda(expression).Compile().DynamicInvoke();
    
                RaiseNavigationPropertyLoading(body.Member.Name);
            }
    	    #region Simple Properties
    
        [DataMember]
        public long Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (Hearing != null && Hearing.Id != value)
                        {
                            Hearing = null;
                        }
                    }
    				OnPropertyChanging("Id");
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private long _id;
    
        [DataMember]
        public Nullable<System.DateTime> Date
        {
            get { return _date; }
            set
            {
                if (_date != value)
                {
    				OnPropertyChanging("Date");
                    _date = value;
                    OnPropertyChanged("Date");
                }
            }
        }
        private Nullable<System.DateTime> _date;
    
        [DataMember]
        public FACCTS.Server.Model.Enums.CaseHistoryEvent CaseHistoryEvent
        {
            get { return _caseHistoryEvent; }
            set
            {
                if (_caseHistoryEvent != value)
                {
    				OnPropertyChanging("CaseHistoryEvent");
                    _caseHistoryEvent = value;
                    OnPropertyChanged("CaseHistoryEvent");
                }
            }
        }
        private FACCTS.Server.Model.Enums.CaseHistoryEvent _caseHistoryEvent;
    
        [DataMember]
        public string CCPOR_ID
        {
            get { return _cCPOR_ID; }
            set
            {
                if (_cCPOR_ID != value)
                {
    				OnPropertyChanging("CCPOR_ID");
                    _cCPOR_ID = value;
                    OnPropertyChanged("CCPOR_ID");
                }
            }
        }
        private string _cCPOR_ID;
    
        [DataMember]
        public Nullable<long> CourtCaseOrderId
        {
            get { return _courtCaseOrderId; }
            set
            {
                if (_courtCaseOrderId != value)
                {
                    ChangeTracker.RecordOriginalValue("CourtCaseOrderId", _courtCaseOrderId);
                    if (!IsDeserializing)
                    {
                        if (CourtCaseOrders != null && CourtCaseOrders.Id != value)
                        {
                            CourtCaseOrders = null;
                        }
                    }
    				OnPropertyChanging("CourtCaseOrderId");
                    _courtCaseOrderId = value;
                    OnPropertyChanged("CourtCaseOrderId");
                }
            }
        }
        private Nullable<long> _courtCaseOrderId;
    
        [DataMember]
        public Nullable<long> MergeCase_Id
        {
            get { return _mergeCase_Id; }
            set
            {
                if (_mergeCase_Id != value)
                {
                    ChangeTracker.RecordOriginalValue("MergeCase_Id", _mergeCase_Id);
                    if (!IsDeserializing)
                    {
                        if (MergeCase != null && MergeCase.Id != value)
                        {
                            MergeCase = null;
                        }
                    }
    				OnPropertyChanging("MergeCase_Id");
                    _mergeCase_Id = value;
                    OnPropertyChanged("MergeCase_Id");
                }
            }
        }
        private Nullable<long> _mergeCase_Id;
    
        [DataMember]
        public Nullable<long> CourtOrder_Id
        {
            get { return _courtOrder_Id; }
            set
            {
                if (_courtOrder_Id != value)
                {
                    ChangeTracker.RecordOriginalValue("CourtOrder_Id", _courtOrder_Id);
                    if (!IsDeserializing)
                    {
                        if (CourtCaseOrders1 != null && CourtCaseOrders1.Id != value)
                        {
                            CourtCaseOrders1 = null;
                        }
                    }
    				OnPropertyChanging("CourtOrder_Id");
                    _courtOrder_Id = value;
                    OnPropertyChanged("CourtOrder_Id");
                }
            }
        }
        private Nullable<long> _courtOrder_Id;
    
        [DataMember]
        public Nullable<long> CourtClerk_Id
        {
            get { return _courtClerk_Id; }
            set
            {
                if (_courtClerk_Id != value)
                {
                    ChangeTracker.RecordOriginalValue("CourtClerk_Id", _courtClerk_Id);
                    if (!IsDeserializing)
                    {
                        if (User != null && User.Id != value)
                        {
                            User = null;
                        }
                    }
    				OnPropertyChanging("CourtClerk_Id");
                    _courtClerk_Id = value;
                    OnPropertyChanged("CourtClerk_Id");
                }
            }
        }
        private Nullable<long> _courtClerk_Id;
    
        [DataMember]
        public Nullable<long> CourtCase_Id
        {
            get { return _courtCase_Id; }
            set
            {
                if (_courtCase_Id != value)
                {
                    ChangeTracker.RecordOriginalValue("CourtCase_Id", _courtCase_Id);
                    if (!IsDeserializing)
                    {
                        if (CourtCase != null && CourtCase.Id != value)
                        {
                            CourtCase = null;
                        }
                    }
    				OnPropertyChanging("CourtCase_Id");
                    _courtCase_Id = value;
                    OnPropertyChanged("CourtCase_Id");
                }
            }
        }
        private Nullable<long> _courtCase_Id;
    
        [DataMember]
        public Nullable<long> AttorneyForChild_Id
        {
            get { return _attorneyForChild_Id; }
            set
            {
                if (_attorneyForChild_Id != value)
                {
                    ChangeTracker.RecordOriginalValue("AttorneyForChild_Id", _attorneyForChild_Id);
                    if (!IsDeserializing)
                    {
                        if (AttorneyForChild != null && AttorneyForChild.Id != value)
                        {
                            AttorneyForChild = null;
                        }
                    }
    				OnPropertyChanging("AttorneyForChild_Id");
                    _attorneyForChild_Id = value;
                    OnPropertyChanged("AttorneyForChild_Id");
                }
            }
        }
        private Nullable<long> _attorneyForChild_Id;
    
        [DataMember]
        public Nullable<long> Party1Attorney_Id
        {
            get { return _party1Attorney_Id; }
            set
            {
                if (_party1Attorney_Id != value)
                {
                    ChangeTracker.RecordOriginalValue("Party1Attorney_Id", _party1Attorney_Id);
                    if (!IsDeserializing)
                    {
                        if (Party1AttorneyData != null && Party1AttorneyData.Id != value)
                        {
                            Party1AttorneyData = null;
                        }
                    }
    				OnPropertyChanging("Party1Attorney_Id");
                    _party1Attorney_Id = value;
                    OnPropertyChanged("Party1Attorney_Id");
                }
            }
        }
        private Nullable<long> _party1Attorney_Id;
    
        [DataMember]
        public Nullable<long> Party2Attorney_Id
        {
            get { return _party2Attorney_Id; }
            set
            {
                if (_party2Attorney_Id != value)
                {
                    ChangeTracker.RecordOriginalValue("Party2Attorney_Id", _party2Attorney_Id);
                    if (!IsDeserializing)
                    {
                        if (Party2AttorneyData != null && Party2AttorneyData.Id != value)
                        {
                            Party2AttorneyData = null;
                        }
                    }
    				OnPropertyChanging("Party2Attorney_Id");
                    _party2Attorney_Id = value;
                    OnPropertyChanged("Party2Attorney_Id");
                }
            }
        }
        private Nullable<long> _party2Attorney_Id;
    
        [DataMember]
        public Nullable<long> ThirdPartyData_Id
        {
            get { return _thirdPartyData_Id; }
            set
            {
                if (_thirdPartyData_Id != value)
                {
                    ChangeTracker.RecordOriginalValue("ThirdPartyData_Id", _thirdPartyData_Id);
                    if (!IsDeserializing)
                    {
                        if (ThirdPartyData != null && ThirdPartyData.Id != value)
                        {
                            ThirdPartyData = null;
                        }
                    }
    				OnPropertyChanging("ThirdPartyData_Id");
                    _thirdPartyData_Id = value;
                    OnPropertyChanged("ThirdPartyData_Id");
                }
            }
        }
        private Nullable<long> _thirdPartyData_Id;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public CourtCaseOrders CourtCaseOrders
        {
            get { return _courtCaseOrders; }
            set
            {
                if (!ReferenceEquals(_courtCaseOrders, value))
                {
                    var previousValue = _courtCaseOrders;
    				OnNavigationPropertyChanging("CourtCaseOrders");
                    _courtCaseOrders = value;
                    FixupCourtCaseOrders(previousValue);
                    OnNavigationPropertyChanged("CourtCaseOrders");
                }
            }
        }
        private CourtCaseOrders _courtCaseOrders;
    
        [DataMember]
        public Hearings Hearing
        {
            get { return _hearing; }
            set
            {
                if (!ReferenceEquals(_hearing, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                        // otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                        if (Id != value.Id)
                        {
                            throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                        }
                    }
                    var previousValue = _hearing;
    				OnNavigationPropertyChanging("Hearing");
                    _hearing = value;
                    FixupHearing(previousValue);
                    OnNavigationPropertyChanged("Hearing");
                }
            }
        }
        private Hearings _hearing;
    
        [DataMember]
        public CourtCase MergeCase
        {
            get { return _mergeCase; }
            set
            {
                if (!ReferenceEquals(_mergeCase, value))
                {
                    var previousValue = _mergeCase;
    				OnNavigationPropertyChanging("MergeCase");
                    _mergeCase = value;
                    FixupMergeCase(previousValue);
                    OnNavigationPropertyChanged("MergeCase");
                }
            }
        }
        private CourtCase _mergeCase;
    
        [DataMember]
        public CourtCaseOrders CourtCaseOrders1
        {
            get { return _courtCaseOrders1; }
            set
            {
                if (!ReferenceEquals(_courtCaseOrders1, value))
                {
                    var previousValue = _courtCaseOrders1;
    				OnNavigationPropertyChanging("CourtCaseOrders1");
                    _courtCaseOrders1 = value;
                    FixupCourtCaseOrders1(previousValue);
                    OnNavigationPropertyChanged("CourtCaseOrders1");
                }
            }
        }
        private CourtCaseOrders _courtCaseOrders1;
    
        [DataMember]
        public User User
        {
            get { return _user; }
            set
            {
                if (!ReferenceEquals(_user, value))
                {
                    var previousValue = _user;
    				OnNavigationPropertyChanging("User");
                    _user = value;
                    FixupUser(previousValue);
                    OnNavigationPropertyChanged("User");
                }
            }
        }
        private User _user;
    
        [DataMember]
        public CourtCase CourtCase
        {
            get { return _courtCase; }
            set
            {
                if (!ReferenceEquals(_courtCase, value))
                {
                    var previousValue = _courtCase;
    				OnNavigationPropertyChanging("CourtCase");
                    _courtCase = value;
                    FixupCourtCase(previousValue);
                    OnNavigationPropertyChanged("CourtCase");
                }
            }
        }
        private CourtCase _courtCase;
    
        [DataMember]
        public Attorneys AttorneyForChild
        {
            get { return _attorneyForChild; }
            set
            {
                if (!ReferenceEquals(_attorneyForChild, value))
                {
                    var previousValue = _attorneyForChild;
    				OnNavigationPropertyChanging("AttorneyForChild");
                    _attorneyForChild = value;
                    FixupAttorneyForChild(previousValue);
                    OnNavigationPropertyChanged("AttorneyForChild");
                }
            }
        }
        private Attorneys _attorneyForChild;
    
        [DataMember]
        public CourtPartyAttorneyData Party1AttorneyData
        {
            get { return _party1AttorneyData; }
            set
            {
                if (!ReferenceEquals(_party1AttorneyData, value))
                {
                    var previousValue = _party1AttorneyData;
    				OnNavigationPropertyChanging("Party1AttorneyData");
                    _party1AttorneyData = value;
                    FixupParty1AttorneyData(previousValue);
                    OnNavigationPropertyChanged("Party1AttorneyData");
                }
            }
        }
        private CourtPartyAttorneyData _party1AttorneyData;
    
        [DataMember]
        public CourtPartyAttorneyData Party2AttorneyData
        {
            get { return _party2AttorneyData; }
            set
            {
                if (!ReferenceEquals(_party2AttorneyData, value))
                {
                    var previousValue = _party2AttorneyData;
    				OnNavigationPropertyChanging("Party2AttorneyData");
                    _party2AttorneyData = value;
                    FixupParty2AttorneyData(previousValue);
                    OnNavigationPropertyChanged("Party2AttorneyData");
                }
            }
        }
        private CourtPartyAttorneyData _party2AttorneyData;
    
        [DataMember]
        public ThirdPartyData ThirdPartyData
        {
            get { return _thirdPartyData; }
            set
            {
                if (!ReferenceEquals(_thirdPartyData, value))
                {
                    var previousValue = _thirdPartyData;
    				OnNavigationPropertyChanging("ThirdPartyData");
                    _thirdPartyData = value;
                    FixupThirdPartyData(previousValue);
                    OnNavigationPropertyChanged("ThirdPartyData");
                }
            }
        }
        private ThirdPartyData _thirdPartyData;
    
        [DataMember]
        public MasterOrder MasterOrder
        {
            get { return _masterOrder; }
            set
            {
                if (!ReferenceEquals(_masterOrder, value))
                {
                    var previousValue = _masterOrder;
    				OnNavigationPropertyChanging("MasterOrder");
                    _masterOrder = value;
                    FixupMasterOrder(previousValue);
                    OnNavigationPropertyChanged("MasterOrder");
                }
            }
        }
        private MasterOrder _masterOrder;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
    	protected virtual void OnPropertyChanging(String propertyName)
        {
            if (_propertyChanging != null)
            {
                _propertyChanging(this, new PropertyChangingEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
    	protected virtual void OnNavigationPropertyChanging(String propertyName)
        {
            if (_propertyChanging != null)
            {
                _propertyChanging(this, new PropertyChangingEventArgs(propertyName));
            }
        }
    
    	
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected virtual void ClearNavigationProperties()
        {
            CourtCaseOrders = null;
            Hearing = null;
            MergeCase = null;
            CourtCaseOrders1 = null;
            User = null;
            CourtCase = null;
            AttorneyForChild = null;
            Party1AttorneyData = null;
            Party2AttorneyData = null;
            ThirdPartyData = null;
            MasterOrder = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupCourtCaseOrders(CourtCaseOrders previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CaseHistory.Contains(this))
            {
                previousValue.CaseHistory.Remove(this);
            }
    
            if (CourtCaseOrders != null)
            {
                CourtCaseOrders.CaseHistory.Add(this);
    
                CourtCaseOrderId = CourtCaseOrders.Id;
            }
            else if (!skipKeys)
            {
                CourtCaseOrderId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("CourtCaseOrders")
                    && (ChangeTracker.OriginalValues["CourtCaseOrders"] == CourtCaseOrders))
                {
                    ChangeTracker.OriginalValues.Remove("CourtCaseOrders");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("CourtCaseOrders", previousValue);
                }
                if (CourtCaseOrders != null && !CourtCaseOrders.ChangeTracker.ChangeTrackingEnabled)
                {
                    CourtCaseOrders.StartTracking();
                }
            }
        }
    
        private void FixupHearing(Hearings previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && ReferenceEquals(previousValue.CaseHistory, this))
            {
                previousValue.CaseHistory = null;
            }
    
            if (Hearing != null)
            {
                Hearing.CaseHistory = this;
                Id = Hearing.Id;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Hearing")
                    && (ChangeTracker.OriginalValues["Hearing"] == Hearing))
                {
                    ChangeTracker.OriginalValues.Remove("Hearing");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Hearing", previousValue);
                }
                if (Hearing != null && !Hearing.ChangeTracker.ChangeTrackingEnabled)
                {
                    Hearing.StartTracking();
                }
            }
        }
    
        private void FixupMergeCase(CourtCase previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (MergeCase != null)
            {
                MergeCase_Id = MergeCase.Id;
            }
    
            else if (!skipKeys)
            {
                MergeCase_Id = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("MergeCase")
                    && (ChangeTracker.OriginalValues["MergeCase"] == MergeCase))
                {
                    ChangeTracker.OriginalValues.Remove("MergeCase");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("MergeCase", previousValue);
                }
                if (MergeCase != null && !MergeCase.ChangeTracker.ChangeTrackingEnabled)
                {
                    MergeCase.StartTracking();
                }
            }
        }
    
        private void FixupCourtCaseOrders1(CourtCaseOrders previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CaseHistory1.Contains(this))
            {
                previousValue.CaseHistory1.Remove(this);
            }
    
            if (CourtCaseOrders1 != null)
            {
                CourtCaseOrders1.CaseHistory1.Add(this);
    
                CourtOrder_Id = CourtCaseOrders1.Id;
            }
            else if (!skipKeys)
            {
                CourtOrder_Id = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("CourtCaseOrders1")
                    && (ChangeTracker.OriginalValues["CourtCaseOrders1"] == CourtCaseOrders1))
                {
                    ChangeTracker.OriginalValues.Remove("CourtCaseOrders1");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("CourtCaseOrders1", previousValue);
                }
                if (CourtCaseOrders1 != null && !CourtCaseOrders1.ChangeTracker.ChangeTrackingEnabled)
                {
                    CourtCaseOrders1.StartTracking();
                }
            }
        }
    
        private void FixupUser(User previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CaseHistory1.Contains(this))
            {
                previousValue.CaseHistory1.Remove(this);
            }
    
            if (User != null)
            {
                User.CaseHistory1.Add(this);
    
                CourtClerk_Id = User.Id;
            }
            else if (!skipKeys)
            {
                CourtClerk_Id = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("User")
                    && (ChangeTracker.OriginalValues["User"] == User))
                {
                    ChangeTracker.OriginalValues.Remove("User");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("User", previousValue);
                }
                if (User != null && !User.ChangeTracker.ChangeTrackingEnabled)
                {
                    User.StartTracking();
                }
            }
        }
    
        private void FixupCourtCase(CourtCase previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CaseHistory.Contains(this))
            {
                previousValue.CaseHistory.Remove(this);
            }
    
            if (CourtCase != null)
            {
                CourtCase.CaseHistory.Add(this);
    
                CourtCase_Id = CourtCase.Id;
            }
            else if (!skipKeys)
            {
                CourtCase_Id = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("CourtCase")
                    && (ChangeTracker.OriginalValues["CourtCase"] == CourtCase))
                {
                    ChangeTracker.OriginalValues.Remove("CourtCase");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("CourtCase", previousValue);
                }
                if (CourtCase != null && !CourtCase.ChangeTracker.ChangeTrackingEnabled)
                {
                    CourtCase.StartTracking();
                }
            }
        }
    
        private void FixupAttorneyForChild(Attorneys previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CaseHistory.Contains(this))
            {
                previousValue.CaseHistory.Remove(this);
            }
    
            if (AttorneyForChild != null)
            {
                AttorneyForChild.CaseHistory.Add(this);
    
                AttorneyForChild_Id = AttorneyForChild.Id;
            }
            else if (!skipKeys)
            {
                AttorneyForChild_Id = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("AttorneyForChild")
                    && (ChangeTracker.OriginalValues["AttorneyForChild"] == AttorneyForChild))
                {
                    ChangeTracker.OriginalValues.Remove("AttorneyForChild");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("AttorneyForChild", previousValue);
                }
                if (AttorneyForChild != null && !AttorneyForChild.ChangeTracker.ChangeTrackingEnabled)
                {
                    AttorneyForChild.StartTracking();
                }
            }
        }
    
        private void FixupParty1AttorneyData(CourtPartyAttorneyData previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CaseHistory.Contains(this))
            {
                previousValue.CaseHistory.Remove(this);
            }
    
            if (Party1AttorneyData != null)
            {
                Party1AttorneyData.CaseHistory.Add(this);
    
                Party1Attorney_Id = Party1AttorneyData.Id;
            }
            else if (!skipKeys)
            {
                Party1Attorney_Id = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Party1AttorneyData")
                    && (ChangeTracker.OriginalValues["Party1AttorneyData"] == Party1AttorneyData))
                {
                    ChangeTracker.OriginalValues.Remove("Party1AttorneyData");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Party1AttorneyData", previousValue);
                }
                if (Party1AttorneyData != null && !Party1AttorneyData.ChangeTracker.ChangeTrackingEnabled)
                {
                    Party1AttorneyData.StartTracking();
                }
            }
        }
    
        private void FixupParty2AttorneyData(CourtPartyAttorneyData previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CaseHistory1.Contains(this))
            {
                previousValue.CaseHistory1.Remove(this);
            }
    
            if (Party2AttorneyData != null)
            {
                Party2AttorneyData.CaseHistory1.Add(this);
    
                Party2Attorney_Id = Party2AttorneyData.Id;
            }
            else if (!skipKeys)
            {
                Party2Attorney_Id = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Party2AttorneyData")
                    && (ChangeTracker.OriginalValues["Party2AttorneyData"] == Party2AttorneyData))
                {
                    ChangeTracker.OriginalValues.Remove("Party2AttorneyData");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Party2AttorneyData", previousValue);
                }
                if (Party2AttorneyData != null && !Party2AttorneyData.ChangeTracker.ChangeTrackingEnabled)
                {
                    Party2AttorneyData.StartTracking();
                }
            }
        }
    
        private void FixupThirdPartyData(ThirdPartyData previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CaseHistory.Contains(this))
            {
                previousValue.CaseHistory.Remove(this);
            }
    
            if (ThirdPartyData != null)
            {
                ThirdPartyData.CaseHistory.Add(this);
    
                ThirdPartyData_Id = ThirdPartyData.Id;
            }
            else if (!skipKeys)
            {
                ThirdPartyData_Id = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ThirdPartyData")
                    && (ChangeTracker.OriginalValues["ThirdPartyData"] == ThirdPartyData))
                {
                    ChangeTracker.OriginalValues.Remove("ThirdPartyData");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ThirdPartyData", previousValue);
                }
                if (ThirdPartyData != null && !ThirdPartyData.ChangeTracker.ChangeTrackingEnabled)
                {
                    ThirdPartyData.StartTracking();
                }
            }
        }
    
        private void FixupMasterOrder(MasterOrder previousValue)
        {
            // This is the principal end in an association that performs cascade deletes.
            // Update the event listener to refer to the new dependent.
            if (previousValue != null)
            {
                ChangeTracker.ObjectStateChanging -= previousValue.HandleCascadeDelete;
            }
    
            if (MasterOrder != null)
            {
                ChangeTracker.ObjectStateChanging += MasterOrder.HandleCascadeDelete;
            }
    
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && ReferenceEquals(previousValue.CaseHistory, this))
            {
                previousValue.CaseHistory = null;
            }
    
            if (MasterOrder != null)
            {
                MasterOrder.CaseHistory = this;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("MasterOrder")
                    && (ChangeTracker.OriginalValues["MasterOrder"] == MasterOrder))
                {
                    ChangeTracker.OriginalValues.Remove("MasterOrder");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("MasterOrder", previousValue);
                    // This is the principal end of an identifying association, so the dependent must be deleted when the relationship is removed.
                    // If the current state of the dependent is Added, the relationship can be changed without causing the dependent to be deleted.
                    if (previousValue != null && previousValue.ChangeTracker.State != ObjectState.Added)
                    {
                        previousValue.MarkAsDeleted();
                    }
                }
                if (MasterOrder != null && !MasterOrder.ChangeTracker.ChangeTrackingEnabled)
                {
                    MasterOrder.StartTracking();
                }
            }
        }

        #endregion

    }
}
