//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Linq.Expressions;
using System.Runtime.Serialization;
using ReactiveUI;
using System.Reactive.Linq;

namespace Faccts.Model.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(CaseRecord))]
    [KnownType(typeof(CourtDepartmenets))]
    [KnownType(typeof(CourtLocations))]
    [KnownType(typeof(FACCTSConfiguration))]
    public partial class CourtCounty: IObjectWithChangeTracker, IReactiveNotifyPropertyChanged, INavigationPropertiesLoadable
    {
    		
    		private MakeObjectReactiveHelper _reactiveHelper;
    
    		public CourtCounty()
    		{
    			_reactiveHelper = new MakeObjectReactiveHelper(this);
    			Initialize();
    			Observable.FromEvent<EventHandler<ObjectStateChangingEventArgs>, ObjectStateChangingEventArgs>(
    			handler =>
    				{
    					EventHandler<ObjectStateChangingEventArgs> eh = (sender, e) => handler(e);
    					return eh;
    				},
    				handler =>  ChangeTracker.ObjectStateChanging += handler,
    				handler =>  ChangeTracker.ObjectStateChanging -= handler
    			)
    			.Subscribe(e =>
    				{
    					if(e.NewState == ObjectState.Unchanged)
    					{
    						IsDirty = false;
    					}
    				}
    			);
    			Observable.Merge<Object>(
    				this.ObservableForProperty(x => x.Id)
    				,this.ObservableForProperty(x => x.court_code)
    				,this.ObservableForProperty(x => x.county)
    				,this.ObservableForProperty(x => x.court_name)
    				,this.ObservableForProperty(x => x.location)
    			).
    			Subscribe(_ =>
    			{
    				if (ChangeTracker.State != ObjectState.Unchanged)
    				{
    					IsDirty = true;
    				}
    			}
    			);
    		}
    
    		partial void Initialize();
    		
    		private bool _isDirty;
    		public bool IsDirty
    		{
    			get
    			{
    				return _isDirty;
    			}
    			set
    			{
    				if (_isDirty == value)
    					return;
    				OnPropertyChanging("IsDirty");
    				_isDirty = value;
    				OnPropertyChanged("IsDirty");
    			}
    		}
    				
    
    		public IObservable<IObservedChange<object, object>> Changed 
    		{
    			get { return _reactiveHelper.Changed; }
    		}
    		public IObservable<IObservedChange<object, object>> Changing 
    		{
    			get { return _reactiveHelper.Changing; }
    		}
    		public IDisposable SuppressChangeNotifications() 
    		{
    			return _reactiveHelper.SuppressChangeNotifications();
    		}
    
    		private PropertyChangingEventHandler _propertyChanging;
    		public event PropertyChangingEventHandler PropertyChanging
    		{
    			add
    			{
    				_propertyChanging += value;
    			}
    			remove
    			{
    				_propertyChanging -= value;
    			}
    		}
    
    		public event EventHandler<LoadingNavigationPropertiesEventArgs> OnNavigationPropertyLoading;
    		protected virtual void RaiseNavigationPropertyLoading(string propertyName)
            {
                if (OnNavigationPropertyLoading != null)
                    OnNavigationPropertyLoading(this, new LoadingNavigationPropertiesEventArgs(propertyName));
            }
    
            protected virtual void RaiseNavigationPropertyLoading<T>(Expression<Func<T>> propertyExpression)
            {
                var body = propertyExpression.Body as MemberExpression;
                if (body == null)
                    throw new ArgumentException("'propertyExpression' should be a member expression");
    
                var expression = body.Expression as ConstantExpression;
                if (expression == null)
                    throw new ArgumentException("'propertyExpression' body should be a constant expression");
    
                object target = Expression.Lambda(expression).Compile().DynamicInvoke();
    
                RaiseNavigationPropertyLoading(body.Member.Name);
            }
    	    #region Simple Properties
    
        [DataMember]
        public long Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
    				OnPropertyChanging("Id");
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private long _id;
    
        [DataMember]
        public string court_code
        {
            get { return _court_code; }
            set
            {
                if (_court_code != value)
                {
    				OnPropertyChanging("court_code");
                    _court_code = value;
                    OnPropertyChanged("court_code");
                }
            }
        }
        private string _court_code;
    
        [DataMember]
        public string county
        {
            get { return _county; }
            set
            {
                if (_county != value)
                {
    				OnPropertyChanging("county");
                    _county = value;
                    OnPropertyChanged("county");
                }
            }
        }
        private string _county;
    
        [DataMember]
        public string court_name
        {
            get { return _court_name; }
            set
            {
                if (_court_name != value)
                {
    				OnPropertyChanging("court_name");
                    _court_name = value;
                    OnPropertyChanged("court_name");
                }
            }
        }
        private string _court_name;
    
        [DataMember]
        public string location
        {
            get { return _location; }
            set
            {
                if (_location != value)
                {
    				OnPropertyChanging("location");
                    _location = value;
                    OnPropertyChanged("location");
                }
            }
        }
        private string _location;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<CaseRecord> CaseRecord
        {
            get
            {
                if (_caseRecord == null)
                {
                    _caseRecord = new TrackableCollection<CaseRecord>();
                    _caseRecord.CollectionChanged += FixupCaseRecord;
                }
                return _caseRecord;
            }
            set
            {
                if (!ReferenceEquals(_caseRecord, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
    				OnNavigationPropertyChanging("CaseRecord");
                    if (_caseRecord != null)
                    {
                        _caseRecord.CollectionChanged -= FixupCaseRecord;
                    }
                    _caseRecord = value;
                    if (_caseRecord != null)
                    {
                        _caseRecord.CollectionChanged += FixupCaseRecord;
                    }
                    OnNavigationPropertyChanged("CaseRecord");
                }
            }
        }
        private TrackableCollection<CaseRecord> _caseRecord;
    
        [DataMember]
        public TrackableCollection<CourtDepartmenets> CourtDepartmenets
        {
            get
            {
                if (_courtDepartmenets == null)
                {
                    _courtDepartmenets = new TrackableCollection<CourtDepartmenets>();
                    _courtDepartmenets.CollectionChanged += FixupCourtDepartmenets;
                }
                return _courtDepartmenets;
            }
            set
            {
                if (!ReferenceEquals(_courtDepartmenets, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
    				OnNavigationPropertyChanging("CourtDepartmenets");
                    if (_courtDepartmenets != null)
                    {
                        _courtDepartmenets.CollectionChanged -= FixupCourtDepartmenets;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (CourtDepartmenets item in _courtDepartmenets)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _courtDepartmenets = value;
                    if (_courtDepartmenets != null)
                    {
                        _courtDepartmenets.CollectionChanged += FixupCourtDepartmenets;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (CourtDepartmenets item in _courtDepartmenets)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("CourtDepartmenets");
                }
            }
        }
        private TrackableCollection<CourtDepartmenets> _courtDepartmenets;
    
        [DataMember]
        public TrackableCollection<CourtLocations> CourtLocations
        {
            get
            {
                if (_courtLocations == null)
                {
                    _courtLocations = new TrackableCollection<CourtLocations>();
                    _courtLocations.CollectionChanged += FixupCourtLocations;
                }
                return _courtLocations;
            }
            set
            {
                if (!ReferenceEquals(_courtLocations, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
    				OnNavigationPropertyChanging("CourtLocations");
                    if (_courtLocations != null)
                    {
                        _courtLocations.CollectionChanged -= FixupCourtLocations;
                    }
                    _courtLocations = value;
                    if (_courtLocations != null)
                    {
                        _courtLocations.CollectionChanged += FixupCourtLocations;
                    }
                    OnNavigationPropertyChanged("CourtLocations");
                }
            }
        }
        private TrackableCollection<CourtLocations> _courtLocations;
    
        [DataMember]
        public TrackableCollection<FACCTSConfiguration> FACCTSConfiguration
        {
            get
            {
                if (_fACCTSConfiguration == null)
                {
                    _fACCTSConfiguration = new TrackableCollection<FACCTSConfiguration>();
                    _fACCTSConfiguration.CollectionChanged += FixupFACCTSConfiguration;
                }
                return _fACCTSConfiguration;
            }
            set
            {
                if (!ReferenceEquals(_fACCTSConfiguration, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
    				OnNavigationPropertyChanging("FACCTSConfiguration");
                    if (_fACCTSConfiguration != null)
                    {
                        _fACCTSConfiguration.CollectionChanged -= FixupFACCTSConfiguration;
                    }
                    _fACCTSConfiguration = value;
                    if (_fACCTSConfiguration != null)
                    {
                        _fACCTSConfiguration.CollectionChanged += FixupFACCTSConfiguration;
                    }
                    OnNavigationPropertyChanged("FACCTSConfiguration");
                }
            }
        }
        private TrackableCollection<FACCTSConfiguration> _fACCTSConfiguration;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
    	protected virtual void OnPropertyChanging(String propertyName)
        {
            if (_propertyChanging != null)
            {
                _propertyChanging(this, new PropertyChangingEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
    	protected virtual void OnNavigationPropertyChanging(String propertyName)
        {
            if (_propertyChanging != null)
            {
                _propertyChanging(this, new PropertyChangingEventArgs(propertyName));
            }
        }
    
    	
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            CaseRecord.Clear();
            CourtDepartmenets.Clear();
            CourtLocations.Clear();
            FACCTSConfiguration.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupCaseRecord(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CaseRecord item in e.NewItems)
                {
                    item.CourtCounty = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CaseRecord", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CaseRecord item in e.OldItems)
                {
                    if (ReferenceEquals(item.CourtCounty, this))
                    {
                        item.CourtCounty = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CaseRecord", item);
                    }
                }
            }
        }
    
        private void FixupCourtDepartmenets(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CourtDepartmenets item in e.NewItems)
                {
                    item.CourtCounty = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CourtDepartmenets", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CourtDepartmenets item in e.OldItems)
                {
                    if (ReferenceEquals(item.CourtCounty, this))
                    {
                        item.CourtCounty = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CourtDepartmenets", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupCourtLocations(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CourtLocations item in e.NewItems)
                {
                    item.CourtCounty = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CourtLocations", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CourtLocations item in e.OldItems)
                {
                    if (ReferenceEquals(item.CourtCounty, this))
                    {
                        item.CourtCounty = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CourtLocations", item);
                    }
                }
            }
        }
    
        private void FixupFACCTSConfiguration(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (FACCTSConfiguration item in e.NewItems)
                {
                    item.CourtCounty = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("FACCTSConfiguration", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (FACCTSConfiguration item in e.OldItems)
                {
                    if (ReferenceEquals(item.CourtCounty, this))
                    {
                        item.CourtCounty = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("FACCTSConfiguration", item);
                    }
                }
            }
        }

        #endregion

    }
}
