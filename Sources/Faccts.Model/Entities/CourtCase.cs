//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Linq.Expressions;
using System.Runtime.Serialization;
using ReactiveUI;
using System.Reactive.Linq;
using System.Reflection;

namespace Faccts.Model.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(User))]
    [KnownType(typeof(CourtCase))]
    [KnownType(typeof(CaseHistory))]
    [KnownType(typeof(CaseNotes))]
    [KnownType(typeof(CourtCounty))]
    [KnownType(typeof(CourtParty))]
    [KnownType(typeof(PersonBase))]
    [KnownType(typeof(ThirdPartyData))]
    [KnownType(typeof(Attorneys))]
    [KnownType(typeof(Hearings))]
    public partial class CourtCase: IObjectWithChangeTracker, IReactiveNotifyPropertyChanged, INavigationPropertiesLoadable
    {
    		
    		private MakeObjectReactiveHelper _reactiveHelper;
    
    		public CourtCase()
    		{
    			_reactiveHelper = new MakeObjectReactiveHelper(this);
    			Initialize();
    			Observable.FromEvent<EventHandler<ObjectStateChangingEventArgs>, ObjectStateChangingEventArgs>(
    			handler =>
    				{
    					EventHandler<ObjectStateChangingEventArgs> eh = (sender, e) => handler(e);
    					return eh;
    				},
    				handler =>  ChangeTracker.ObjectStateChanging += handler,
    				handler =>  ChangeTracker.ObjectStateChanging -= handler
    			)
    			.Subscribe(e =>
    				{
    					if(e.NewState == ObjectState.Unchanged)
    					{
    						IsDirty = false;
    					}
    				}
    			);
    			Observable.Merge<Object>(
    				this.ObservableForProperty(x => x.Id)
    				,this.ObservableForProperty(x => x.CaseNumber)
    				,this.ObservableForProperty(x => x.CCPORStatus)
    				,this.ObservableForProperty(x => x.CCPORId)
    				,this.ObservableForProperty(x => x.ParentCase_Id)
    				,this.ObservableForProperty(x => x.CourtClerkId)
    				,this.ObservableForProperty(x => x.Party1_Id)
    				,this.ObservableForProperty(x => x.Party2_Id)
    				,this.ObservableForProperty(x => x.CourtCounty_Id)
    				,this.ObservableForProperty(x => x.ThirdPartyDataId)
    				,this.ObservableForProperty(x => x.RP_IDType)
    				,this.ObservableForProperty(x => x.RP_IDNumber)
    				,this.ObservableForProperty(x => x.RP_IssuedDate)
    				,this.ObservableForProperty(x => x.AttorneyForChild_Id)
    				,this.ObservableForProperty(x => x.CourtClerk.IsDirty)
    				,this.ObservableForProperty(x => x.ParentCase.IsDirty)
    				,this.ObservableForProperty(x => x.CourtCounty.IsDirty)
    				,this.ObservableForProperty(x => x.Party1.IsDirty)
    				,this.ObservableForProperty(x => x.Party2.IsDirty)
    				,this.ObservableForProperty(x => x.ThirdPartyAttorneyData.IsDirty)
    				,this.ObservableForProperty(x => x.AttorneyForChild.IsDirty)
    			).
    			Subscribe(_ =>
    			{
    				if (ChangeTracker.State != ObjectState.Unchanged)
    				{
    					IsDirty = true;
    				}
    			}
    			);
    		}
    
    		partial void Initialize();
    		
    
    
    		private bool _isDirty;
    		public bool IsDirty
    		{
    			get
    			{
    				return _isDirty;
    			}
    			set
    			{
    				if (_isDirty == value)
    					return;
    				OnPropertyChanging("IsDirty");
    				_isDirty = value;
    				OnPropertyChanged("IsDirty", false);
    			}
    		}
    				
    
    		public IObservable<IObservedChange<object, object>> Changed 
    		{
    			get { return _reactiveHelper.Changed; }
    		}
    		public IObservable<IObservedChange<object, object>> Changing 
    		{
    			get { return _reactiveHelper.Changing; }
    		}
    		public IDisposable SuppressChangeNotifications() 
    		{
    			return _reactiveHelper.SuppressChangeNotifications();
    		}
    
    		private PropertyChangingEventHandler _propertyChanging;
    		public event PropertyChangingEventHandler PropertyChanging
    		{
    			add
    			{
    				_propertyChanging += value;
    			}
    			remove
    			{
    				_propertyChanging -= value;
    			}
    		}
    
    		public event EventHandler<LoadingNavigationPropertiesEventArgs> OnNavigationPropertyLoading;
    		protected virtual void RaiseNavigationPropertyLoading(string propertyName)
            {
                if (OnNavigationPropertyLoading != null)
                    OnNavigationPropertyLoading(this, new LoadingNavigationPropertiesEventArgs(propertyName));
            }
    
            protected virtual void RaiseNavigationPropertyLoading<T>(Expression<Func<T>> propertyExpression)
            {
                var body = propertyExpression.Body as MemberExpression;
                if (body == null)
                    throw new ArgumentException("'propertyExpression' should be a member expression");
    
                var expression = body.Expression as ConstantExpression;
                if (expression == null)
                    throw new ArgumentException("'propertyExpression' body should be a constant expression");
    
                object target = Expression.Lambda(expression).Compile().DynamicInvoke();
    
                RaiseNavigationPropertyLoading(body.Member.Name);
            }
    	    #region Simple Properties
    
        [DataMember]
        public long Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
    				OnPropertyChanging("Id");
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private long _id;
    
        [DataMember]
        public string CaseNumber
        {
            get { return _caseNumber; }
            set
            {
                if (_caseNumber != value)
                {
    				OnPropertyChanging("CaseNumber");
                    _caseNumber = value;
                    OnPropertyChanged("CaseNumber");
                }
            }
        }
        private string _caseNumber;
    
        [DataMember]
        public Nullable<int> CCPORStatus
        {
            get { return _cCPORStatus; }
            set
            {
                if (_cCPORStatus != value)
                {
    				OnPropertyChanging("CCPORStatus");
                    _cCPORStatus = value;
                    OnPropertyChanged("CCPORStatus");
                }
            }
        }
        private Nullable<int> _cCPORStatus;
    
        [DataMember]
        public string CCPORId
        {
            get { return _cCPORId; }
            set
            {
                if (_cCPORId != value)
                {
    				OnPropertyChanging("CCPORId");
                    _cCPORId = value;
                    OnPropertyChanged("CCPORId");
                }
            }
        }
        private string _cCPORId;
    
        [DataMember]
        public Nullable<long> ParentCase_Id
        {
            get { return _parentCase_Id; }
            set
            {
                if (_parentCase_Id != value)
                {
                    ChangeTracker.RecordOriginalValue("ParentCase_Id", _parentCase_Id);
                    if (!IsDeserializing)
                    {
                        if (ParentCase != null && ParentCase.Id != value)
                        {
                            ParentCase = null;
                        }
                    }
    				OnPropertyChanging("ParentCase_Id");
                    _parentCase_Id = value;
                    OnPropertyChanged("ParentCase_Id");
                }
            }
        }
        private Nullable<long> _parentCase_Id;
    
        [DataMember]
        public Nullable<long> CourtClerkId
        {
            get { return _courtClerkId; }
            set
            {
                if (_courtClerkId != value)
                {
                    ChangeTracker.RecordOriginalValue("CourtClerkId", _courtClerkId);
                    if (!IsDeserializing)
                    {
                        if (CourtClerk != null && CourtClerk.Id != value)
                        {
                            CourtClerk = null;
                        }
                    }
    				OnPropertyChanging("CourtClerkId");
                    _courtClerkId = value;
                    OnPropertyChanged("CourtClerkId");
                }
            }
        }
        private Nullable<long> _courtClerkId;
    
        [DataMember]
        public Nullable<long> Party1_Id
        {
            get { return _party1_Id; }
            set
            {
                if (_party1_Id != value)
                {
                    ChangeTracker.RecordOriginalValue("Party1_Id", _party1_Id);
                    if (!IsDeserializing)
                    {
                        if (Party1 != null && Party1.Id != value)
                        {
                            Party1 = null;
                        }
                    }
    				OnPropertyChanging("Party1_Id");
                    _party1_Id = value;
                    OnPropertyChanged("Party1_Id");
                }
            }
        }
        private Nullable<long> _party1_Id;
    
        [DataMember]
        public Nullable<long> Party2_Id
        {
            get { return _party2_Id; }
            set
            {
                if (_party2_Id != value)
                {
                    ChangeTracker.RecordOriginalValue("Party2_Id", _party2_Id);
                    if (!IsDeserializing)
                    {
                        if (Party2 != null && Party2.Id != value)
                        {
                            Party2 = null;
                        }
                    }
    				OnPropertyChanging("Party2_Id");
                    _party2_Id = value;
                    OnPropertyChanged("Party2_Id");
                }
            }
        }
        private Nullable<long> _party2_Id;
    
        [DataMember]
        public Nullable<long> CourtCounty_Id
        {
            get { return _courtCounty_Id; }
            set
            {
                if (_courtCounty_Id != value)
                {
                    ChangeTracker.RecordOriginalValue("CourtCounty_Id", _courtCounty_Id);
                    if (!IsDeserializing)
                    {
                        if (CourtCounty != null && CourtCounty.Id != value)
                        {
                            CourtCounty = null;
                        }
                    }
    				OnPropertyChanging("CourtCounty_Id");
                    _courtCounty_Id = value;
                    OnPropertyChanged("CourtCounty_Id");
                }
            }
        }
        private Nullable<long> _courtCounty_Id;
    
        [DataMember]
        public Nullable<long> ThirdPartyDataId
        {
            get { return _thirdPartyDataId; }
            set
            {
                if (_thirdPartyDataId != value)
                {
                    ChangeTracker.RecordOriginalValue("ThirdPartyDataId", _thirdPartyDataId);
                    if (!IsDeserializing)
                    {
                        if (ThirdPartyAttorneyData != null && ThirdPartyAttorneyData.Id != value)
                        {
                            ThirdPartyAttorneyData = null;
                        }
                    }
    				OnPropertyChanging("ThirdPartyDataId");
                    _thirdPartyDataId = value;
                    OnPropertyChanged("ThirdPartyDataId");
                }
            }
        }
        private Nullable<long> _thirdPartyDataId;
    
        [DataMember]
        public int RP_IDType
        {
            get { return _rP_IDType; }
            set
            {
                if (_rP_IDType != value)
                {
    				OnPropertyChanging("RP_IDType");
                    _rP_IDType = value;
                    OnPropertyChanged("RP_IDType");
                }
            }
        }
        private int _rP_IDType;
    
        [DataMember]
        public string RP_IDNumber
        {
            get { return _rP_IDNumber; }
            set
            {
                if (_rP_IDNumber != value)
                {
    				OnPropertyChanging("RP_IDNumber");
                    _rP_IDNumber = value;
                    OnPropertyChanged("RP_IDNumber");
                }
            }
        }
        private string _rP_IDNumber;
    
        [DataMember]
        public Nullable<System.DateTime> RP_IssuedDate
        {
            get { return _rP_IssuedDate; }
            set
            {
                if (_rP_IssuedDate != value)
                {
    				OnPropertyChanging("RP_IssuedDate");
                    _rP_IssuedDate = value;
                    OnPropertyChanged("RP_IssuedDate");
                }
            }
        }
        private Nullable<System.DateTime> _rP_IssuedDate;
    
        [DataMember]
        public Nullable<long> AttorneyForChild_Id
        {
            get { return _attorneyForChild_Id; }
            set
            {
                if (_attorneyForChild_Id != value)
                {
                    ChangeTracker.RecordOriginalValue("AttorneyForChild_Id", _attorneyForChild_Id);
                    if (!IsDeserializing)
                    {
                        if (AttorneyForChild != null && AttorneyForChild.Id != value)
                        {
                            AttorneyForChild = null;
                        }
                    }
    				OnPropertyChanging("AttorneyForChild_Id");
                    _attorneyForChild_Id = value;
                    OnPropertyChanged("AttorneyForChild_Id");
                }
            }
        }
        private Nullable<long> _attorneyForChild_Id;

        #endregion

        #region Complex Properties
    
        [DataMember]
        public RestrainingPartyIDInfo RestrainingPartyIdentificationInformation
        {
            get
            {
                if (!_restrainingPartyIdentificationInformationInitialized && _restrainingPartyIdentificationInformation == null)
                {
                    _restrainingPartyIdentificationInformation = new RestrainingPartyIDInfo();
                    ((INotifyComplexPropertyChanging)_restrainingPartyIdentificationInformation).ComplexPropertyChanging += HandleRestrainingPartyIdentificationInformationChanging;
                }
                _restrainingPartyIdentificationInformationInitialized = true;
                return _restrainingPartyIdentificationInformation;
            }
            set
            {
                _restrainingPartyIdentificationInformationInitialized = true;
                if (!Equals(_restrainingPartyIdentificationInformation, value))
                {
                    if (_restrainingPartyIdentificationInformation != null)
                    {
                        ((INotifyComplexPropertyChanging)_restrainingPartyIdentificationInformation).ComplexPropertyChanging -= HandleRestrainingPartyIdentificationInformationChanging;
                    }
    
                    HandleRestrainingPartyIdentificationInformationChanging(this, null);
    				OnPropertyChanging("RestrainingPartyIdentificationInformation");
                    _restrainingPartyIdentificationInformation = value;
                    OnPropertyChanged("RestrainingPartyIdentificationInformation");
    
                    if (value != null)
                    {
                        ((INotifyComplexPropertyChanging)_restrainingPartyIdentificationInformation).ComplexPropertyChanging += HandleRestrainingPartyIdentificationInformationChanging;
                    }
                }
            }
        }
        private RestrainingPartyIDInfo _restrainingPartyIdentificationInformation;
        private bool _restrainingPartyIdentificationInformationInitialized;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public User CourtClerk
        {
            get { return _courtClerk; }
            set
            {
                if (!ReferenceEquals(_courtClerk, value))
                {
                    var previousValue = _courtClerk;
    				OnNavigationPropertyChanging("CourtClerk");
                    _courtClerk = value;
                    FixupCourtClerk(previousValue);
                    OnNavigationPropertyChanged("CourtClerk");
                }
            }
        }
        private User _courtClerk;
    
        [DataMember]
        public TrackableCollection<CourtCase> ChildCases
        {
            get
            {
                if (_childCases == null)
                {
                    _childCases = new TrackableCollection<CourtCase>();
                    _childCases.CollectionChanged += FixupChildCases;
                }
                return _childCases;
            }
            set
            {
                if (!ReferenceEquals(_childCases, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
    				OnNavigationPropertyChanging("ChildCases");
                    if (_childCases != null)
                    {
                        _childCases.CollectionChanged -= FixupChildCases;
                    }
                    _childCases = value;
                    if (_childCases != null)
                    {
                        _childCases.CollectionChanged += FixupChildCases;
                    }
                    OnNavigationPropertyChanged("ChildCases");
                }
            }
        }
        private TrackableCollection<CourtCase> _childCases;
    
        [DataMember]
        public CourtCase ParentCase
        {
            get { return _parentCase; }
            set
            {
                if (!ReferenceEquals(_parentCase, value))
                {
                    var previousValue = _parentCase;
    				OnNavigationPropertyChanging("ParentCase");
                    _parentCase = value;
                    FixupParentCase(previousValue);
                    OnNavigationPropertyChanged("ParentCase");
                }
            }
        }
        private CourtCase _parentCase;
    
        [DataMember]
        public TrackableCollection<CaseHistory> CaseHistory
        {
            get
            {
                if (_caseHistory == null)
                {
                    _caseHistory = new TrackableCollection<CaseHistory>();
                    _caseHistory.CollectionChanged += FixupCaseHistory;
                }
                return _caseHistory;
            }
            set
            {
                if (!ReferenceEquals(_caseHistory, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
    				OnNavigationPropertyChanging("CaseHistory");
                    if (_caseHistory != null)
                    {
                        _caseHistory.CollectionChanged -= FixupCaseHistory;
                    }
                    _caseHistory = value;
                    if (_caseHistory != null)
                    {
                        _caseHistory.CollectionChanged += FixupCaseHistory;
                    }
                    OnNavigationPropertyChanged("CaseHistory");
                }
            }
        }
        private TrackableCollection<CaseHistory> _caseHistory;
    
        [DataMember]
        public TrackableCollection<CaseNotes> CaseNotes
        {
            get
            {
                if (_caseNotes == null)
                {
                    _caseNotes = new TrackableCollection<CaseNotes>();
                    _caseNotes.CollectionChanged += FixupCaseNotes;
                }
                return _caseNotes;
            }
            set
            {
                if (!ReferenceEquals(_caseNotes, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
    				OnNavigationPropertyChanging("CaseNotes");
                    if (_caseNotes != null)
                    {
                        _caseNotes.CollectionChanged -= FixupCaseNotes;
                    }
                    _caseNotes = value;
                    if (_caseNotes != null)
                    {
                        _caseNotes.CollectionChanged += FixupCaseNotes;
                    }
                    OnNavigationPropertyChanged("CaseNotes");
                }
            }
        }
        private TrackableCollection<CaseNotes> _caseNotes;
    
        [DataMember]
        public CourtCounty CourtCounty
        {
            get { return _courtCounty; }
            set
            {
                if (!ReferenceEquals(_courtCounty, value))
                {
                    var previousValue = _courtCounty;
    				OnNavigationPropertyChanging("CourtCounty");
                    _courtCounty = value;
                    FixupCourtCounty(previousValue);
                    OnNavigationPropertyChanged("CourtCounty");
                }
            }
        }
        private CourtCounty _courtCounty;
    
        [DataMember]
        public CourtParty Party1
        {
            get { return _party1; }
            set
            {
                if (!ReferenceEquals(_party1, value))
                {
                    var previousValue = _party1;
    				OnNavigationPropertyChanging("Party1");
                    _party1 = value;
                    FixupParty1(previousValue);
                    OnNavigationPropertyChanged("Party1");
                }
            }
        }
        private CourtParty _party1;
    
        [DataMember]
        public CourtParty Party2
        {
            get { return _party2; }
            set
            {
                if (!ReferenceEquals(_party2, value))
                {
                    var previousValue = _party2;
    				OnNavigationPropertyChanging("Party2");
                    _party2 = value;
                    FixupParty2(previousValue);
                    OnNavigationPropertyChanged("Party2");
                }
            }
        }
        private CourtParty _party2;
    
        [DataMember]
        public TrackableCollection<PersonBase> Persons
        {
            get
            {
                if (_persons == null)
                {
                    _persons = new TrackableCollection<PersonBase>();
                    _persons.CollectionChanged += FixupPersons;
                }
                return _persons;
            }
            set
            {
                if (!ReferenceEquals(_persons, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
    				OnNavigationPropertyChanging("Persons");
                    if (_persons != null)
                    {
                        _persons.CollectionChanged -= FixupPersons;
                    }
                    _persons = value;
                    if (_persons != null)
                    {
                        _persons.CollectionChanged += FixupPersons;
                    }
                    OnNavigationPropertyChanged("Persons");
                }
            }
        }
        private TrackableCollection<PersonBase> _persons;
    
        [DataMember]
        public ThirdPartyData ThirdPartyAttorneyData
        {
            get { return _thirdPartyAttorneyData; }
            set
            {
                if (!ReferenceEquals(_thirdPartyAttorneyData, value))
                {
                    var previousValue = _thirdPartyAttorneyData;
    				OnNavigationPropertyChanging("ThirdPartyAttorneyData");
                    _thirdPartyAttorneyData = value;
                    FixupThirdPartyAttorneyData(previousValue);
                    OnNavigationPropertyChanged("ThirdPartyAttorneyData");
                }
            }
        }
        private ThirdPartyData _thirdPartyAttorneyData;
    
        [DataMember]
        public Attorneys AttorneyForChild
        {
            get { return _attorneyForChild; }
            set
            {
                if (!ReferenceEquals(_attorneyForChild, value))
                {
                    var previousValue = _attorneyForChild;
    				OnNavigationPropertyChanging("AttorneyForChild");
                    _attorneyForChild = value;
                    FixupAttorneyForChild(previousValue);
                    OnNavigationPropertyChanged("AttorneyForChild");
                }
            }
        }
        private Attorneys _attorneyForChild;
    
        [DataMember]
        public TrackableCollection<Hearings> Hearings
        {
            get
            {
                if (_hearings == null)
                {
                    _hearings = new TrackableCollection<Hearings>();
                    _hearings.CollectionChanged += FixupHearings;
                }
                return _hearings;
            }
            set
            {
                if (!ReferenceEquals(_hearings, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
    				OnNavigationPropertyChanging("Hearings");
                    if (_hearings != null)
                    {
                        _hearings.CollectionChanged -= FixupHearings;
                    }
                    _hearings = value;
                    if (_hearings != null)
                    {
                        _hearings.CollectionChanged += FixupHearings;
                    }
                    OnNavigationPropertyChanged("Hearings");
                }
            }
        }
        private TrackableCollection<Hearings> _hearings;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName, bool changeState = true)
        {
            if (changeState && ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
    	protected virtual void OnPropertyChanging(String propertyName)
        {
            if (_propertyChanging != null)
            {
                _propertyChanging(this, new PropertyChangingEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
    	protected virtual void OnNavigationPropertyChanging(String propertyName)
        {
            if (_propertyChanging != null)
            {
                _propertyChanging(this, new PropertyChangingEventArgs(propertyName));
            }
        }
    
    	
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
        // Records the original values for the complex property RestrainingPartyIdentificationInformation
        private void HandleRestrainingPartyIdentificationInformationChanging(object sender, EventArgs args)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
        }
    
    
        protected virtual void ClearNavigationProperties()
        {
            CourtClerk = null;
            ChildCases.Clear();
            ParentCase = null;
            CaseHistory.Clear();
            CaseNotes.Clear();
            CourtCounty = null;
            Party1 = null;
            Party2 = null;
            Persons.Clear();
            ThirdPartyAttorneyData = null;
            AttorneyForChild = null;
            Hearings.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupCourtClerk(User previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CourtCase.Contains(this))
            {
                previousValue.CourtCase.Remove(this);
            }
    
            if (CourtClerk != null)
            {
                CourtClerk.CourtCase.Add(this);
    
                CourtClerkId = CourtClerk.Id;
            }
            else if (!skipKeys)
            {
                CourtClerkId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("CourtClerk")
                    && (ChangeTracker.OriginalValues["CourtClerk"] == CourtClerk))
                {
                    ChangeTracker.OriginalValues.Remove("CourtClerk");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("CourtClerk", previousValue);
                }
                if (CourtClerk != null && !CourtClerk.ChangeTracker.ChangeTrackingEnabled)
                {
                    CourtClerk.StartTracking();
                }
            }
        }
    
        private void FixupParentCase(CourtCase previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ChildCases.Contains(this))
            {
                previousValue.ChildCases.Remove(this);
            }
    
            if (ParentCase != null)
            {
                ParentCase.ChildCases.Add(this);
    
                ParentCase_Id = ParentCase.Id;
            }
            else if (!skipKeys)
            {
                ParentCase_Id = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ParentCase")
                    && (ChangeTracker.OriginalValues["ParentCase"] == ParentCase))
                {
                    ChangeTracker.OriginalValues.Remove("ParentCase");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ParentCase", previousValue);
                }
                if (ParentCase != null && !ParentCase.ChangeTracker.ChangeTrackingEnabled)
                {
                    ParentCase.StartTracking();
                }
            }
        }
    
        private void FixupCourtCounty(CourtCounty previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CourtCase.Contains(this))
            {
                previousValue.CourtCase.Remove(this);
            }
    
            if (CourtCounty != null)
            {
                CourtCounty.CourtCase.Add(this);
    
                CourtCounty_Id = CourtCounty.Id;
            }
            else if (!skipKeys)
            {
                CourtCounty_Id = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("CourtCounty")
                    && (ChangeTracker.OriginalValues["CourtCounty"] == CourtCounty))
                {
                    ChangeTracker.OriginalValues.Remove("CourtCounty");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("CourtCounty", previousValue);
                }
                if (CourtCounty != null && !CourtCounty.ChangeTracker.ChangeTrackingEnabled)
                {
                    CourtCounty.StartTracking();
                }
            }
        }
    
        private void FixupParty1(CourtParty previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (Party1 != null)
            {
                Party1_Id = Party1.Id;
            }
    
            else if (!skipKeys)
            {
                Party1_Id = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Party1")
                    && (ChangeTracker.OriginalValues["Party1"] == Party1))
                {
                    ChangeTracker.OriginalValues.Remove("Party1");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Party1", previousValue);
                }
                if (Party1 != null && !Party1.ChangeTracker.ChangeTrackingEnabled)
                {
                    Party1.StartTracking();
                }
            }
        }
    
        private void FixupParty2(CourtParty previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (Party2 != null)
            {
                Party2_Id = Party2.Id;
            }
    
            else if (!skipKeys)
            {
                Party2_Id = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Party2")
                    && (ChangeTracker.OriginalValues["Party2"] == Party2))
                {
                    ChangeTracker.OriginalValues.Remove("Party2");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Party2", previousValue);
                }
                if (Party2 != null && !Party2.ChangeTracker.ChangeTrackingEnabled)
                {
                    Party2.StartTracking();
                }
            }
        }
    
        private void FixupThirdPartyAttorneyData(ThirdPartyData previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CourtCases.Contains(this))
            {
                previousValue.CourtCases.Remove(this);
            }
    
            if (ThirdPartyAttorneyData != null)
            {
                ThirdPartyAttorneyData.CourtCases.Add(this);
    
                ThirdPartyDataId = ThirdPartyAttorneyData.Id;
            }
            else if (!skipKeys)
            {
                ThirdPartyDataId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ThirdPartyAttorneyData")
                    && (ChangeTracker.OriginalValues["ThirdPartyAttorneyData"] == ThirdPartyAttorneyData))
                {
                    ChangeTracker.OriginalValues.Remove("ThirdPartyAttorneyData");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ThirdPartyAttorneyData", previousValue);
                }
                if (ThirdPartyAttorneyData != null && !ThirdPartyAttorneyData.ChangeTracker.ChangeTrackingEnabled)
                {
                    ThirdPartyAttorneyData.StartTracking();
                }
            }
        }
    
        private void FixupAttorneyForChild(Attorneys previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CourtCases.Contains(this))
            {
                previousValue.CourtCases.Remove(this);
            }
    
            if (AttorneyForChild != null)
            {
                AttorneyForChild.CourtCases.Add(this);
    
                AttorneyForChild_Id = AttorneyForChild.Id;
            }
            else if (!skipKeys)
            {
                AttorneyForChild_Id = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("AttorneyForChild")
                    && (ChangeTracker.OriginalValues["AttorneyForChild"] == AttorneyForChild))
                {
                    ChangeTracker.OriginalValues.Remove("AttorneyForChild");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("AttorneyForChild", previousValue);
                }
                if (AttorneyForChild != null && !AttorneyForChild.ChangeTracker.ChangeTrackingEnabled)
                {
                    AttorneyForChild.StartTracking();
                }
            }
        }
    
        private void FixupChildCases(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CourtCase item in e.NewItems)
                {
                    item.ParentCase = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ChildCases", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CourtCase item in e.OldItems)
                {
                    if (ReferenceEquals(item.ParentCase, this))
                    {
                        item.ParentCase = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ChildCases", item);
                    }
                }
            }
        }
    
        private void FixupCaseHistory(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CaseHistory item in e.NewItems)
                {
                    item.CourtCase = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CaseHistory", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CaseHistory item in e.OldItems)
                {
                    if (ReferenceEquals(item.CourtCase, this))
                    {
                        item.CourtCase = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CaseHistory", item);
                    }
                }
            }
        }
    
        private void FixupCaseNotes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CaseNotes item in e.NewItems)
                {
                    item.CourtCase = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CaseNotes", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CaseNotes item in e.OldItems)
                {
                    if (ReferenceEquals(item.CourtCase, this))
                    {
                        item.CourtCase = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CaseNotes", item);
                    }
                }
            }
        }
    
        private void FixupPersons(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (PersonBase item in e.NewItems)
                {
                    item.CourtCase = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Persons", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PersonBase item in e.OldItems)
                {
                    if (ReferenceEquals(item.CourtCase, this))
                    {
                        item.CourtCase = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Persons", item);
                    }
                }
            }
        }
    
        private void FixupHearings(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Hearings item in e.NewItems)
                {
                    item.CourtCase = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Hearings", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Hearings item in e.OldItems)
                {
                    if (ReferenceEquals(item.CourtCase, this))
                    {
                        item.CourtCase = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Hearings", item);
                    }
                }
            }
        }

        #endregion

    }
}
