//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Faccts.Model.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(CaseRecord))]
    [KnownType(typeof(CourtCaseStatus))]
    [KnownType(typeof(User))]
    public partial class CourtCase: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Simple Properties
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public string CaseNumber
        {
            get { return _caseNumber; }
            set
            {
                if (_caseNumber != value)
                {
                    _caseNumber = value;
                    OnPropertyChanged("CaseNumber");
                }
            }
        }
        private string _caseNumber;
    
        [DataMember]
        public Nullable<System.DateTime> FirstActivity
        {
            get { return _firstActivity; }
            set
            {
                if (_firstActivity != value)
                {
                    _firstActivity = value;
                    OnPropertyChanged("FirstActivity");
                }
            }
        }
        private Nullable<System.DateTime> _firstActivity;
    
        [DataMember]
        public Nullable<System.DateTime> LastActivity
        {
            get { return _lastActivity; }
            set
            {
                if (_lastActivity != value)
                {
                    _lastActivity = value;
                    OnPropertyChanged("LastActivity");
                }
            }
        }
        private Nullable<System.DateTime> _lastActivity;
    
        [DataMember]
        public Nullable<int> CCPORStatus
        {
            get { return _cCPORStatus; }
            set
            {
                if (_cCPORStatus != value)
                {
                    _cCPORStatus = value;
                    OnPropertyChanged("CCPORStatus");
                }
            }
        }
        private Nullable<int> _cCPORStatus;
    
        [DataMember]
        public string CCPORId
        {
            get { return _cCPORId; }
            set
            {
                if (_cCPORId != value)
                {
                    _cCPORId = value;
                    OnPropertyChanged("CCPORId");
                }
            }
        }
        private string _cCPORId;
    
        [DataMember]
        public int CaseStatus_Id
        {
            get { return _caseStatus_Id; }
            set
            {
                if (_caseStatus_Id != value)
                {
                    ChangeTracker.RecordOriginalValue("CaseStatus_Id", _caseStatus_Id);
                    if (!IsDeserializing)
                    {
                        if (CourtCaseStatus != null && CourtCaseStatus.Id != value)
                        {
                            CourtCaseStatus = null;
                        }
                    }
                    _caseStatus_Id = value;
                    OnPropertyChanged("CaseStatus_Id");
                }
            }
        }
        private int _caseStatus_Id;
    
        [DataMember]
        public Nullable<int> CourtClerk_UserId
        {
            get { return _courtClerk_UserId; }
            set
            {
                if (_courtClerk_UserId != value)
                {
                    ChangeTracker.RecordOriginalValue("CourtClerk_UserId", _courtClerk_UserId);
                    if (!IsDeserializing)
                    {
                        if (User != null && User.Id != value)
                        {
                            User = null;
                        }
                    }
                    _courtClerk_UserId = value;
                    OnPropertyChanged("CourtClerk_UserId");
                }
            }
        }
        private Nullable<int> _courtClerk_UserId;
    
        [DataMember]
        public int CaseRecord_Id
        {
            get { return _caseRecord_Id; }
            set
            {
                if (_caseRecord_Id != value)
                {
                    ChangeTracker.RecordOriginalValue("CaseRecord_Id", _caseRecord_Id);
                    if (!IsDeserializing)
                    {
                        if (CaseRecord1 != null && CaseRecord1.Id != value)
                        {
                            CaseRecord1 = null;
                        }
                    }
                    _caseRecord_Id = value;
                    OnPropertyChanged("CaseRecord_Id");
                }
            }
        }
        private int _caseRecord_Id;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<CaseRecord> CaseRecord
        {
            get
            {
                if (_caseRecord == null)
                {
                    _caseRecord = new TrackableCollection<CaseRecord>();
                    _caseRecord.CollectionChanged += FixupCaseRecord;
                }
                return _caseRecord;
            }
            set
            {
                if (!ReferenceEquals(_caseRecord, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_caseRecord != null)
                    {
                        _caseRecord.CollectionChanged -= FixupCaseRecord;
                    }
                    _caseRecord = value;
                    if (_caseRecord != null)
                    {
                        _caseRecord.CollectionChanged += FixupCaseRecord;
                    }
                    OnNavigationPropertyChanged("CaseRecord");
                }
            }
        }
        private TrackableCollection<CaseRecord> _caseRecord;
    
        [DataMember]
        public CaseRecord CaseRecord1
        {
            get { return _caseRecord1; }
            set
            {
                if (!ReferenceEquals(_caseRecord1, value))
                {
                    var previousValue = _caseRecord1;
                    _caseRecord1 = value;
                    FixupCaseRecord1(previousValue);
                    OnNavigationPropertyChanged("CaseRecord1");
                }
            }
        }
        private CaseRecord _caseRecord1;
    
        [DataMember]
        public CourtCaseStatus CourtCaseStatus
        {
            get { return _courtCaseStatus; }
            set
            {
                if (!ReferenceEquals(_courtCaseStatus, value))
                {
                    var previousValue = _courtCaseStatus;
                    _courtCaseStatus = value;
                    FixupCourtCaseStatus(previousValue);
                    OnNavigationPropertyChanged("CourtCaseStatus");
                }
            }
        }
        private CourtCaseStatus _courtCaseStatus;
    
        [DataMember]
        public User User
        {
            get { return _user; }
            set
            {
                if (!ReferenceEquals(_user, value))
                {
                    var previousValue = _user;
                    _user = value;
                    FixupUser(previousValue);
                    OnNavigationPropertyChanged("User");
                }
            }
        }
        private User _user;
    
        [DataMember]
        public TrackableCollection<CaseRecord> CaseRecord2
        {
            get
            {
                if (_caseRecord2 == null)
                {
                    _caseRecord2 = new TrackableCollection<CaseRecord>();
                    _caseRecord2.CollectionChanged += FixupCaseRecord2;
                }
                return _caseRecord2;
            }
            set
            {
                if (!ReferenceEquals(_caseRecord2, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_caseRecord2 != null)
                    {
                        _caseRecord2.CollectionChanged -= FixupCaseRecord2;
                    }
                    _caseRecord2 = value;
                    if (_caseRecord2 != null)
                    {
                        _caseRecord2.CollectionChanged += FixupCaseRecord2;
                    }
                    OnNavigationPropertyChanged("CaseRecord2");
                }
            }
        }
        private TrackableCollection<CaseRecord> _caseRecord2;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected virtual void ClearNavigationProperties()
        {
            CaseRecord.Clear();
            CaseRecord1 = null;
            CourtCaseStatus = null;
            User = null;
            CaseRecord2.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupCaseRecord1(CaseRecord previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CourtCase1.Contains(this))
            {
                previousValue.CourtCase1.Remove(this);
            }
    
            if (CaseRecord1 != null)
            {
                CaseRecord1.CourtCase1.Add(this);
    
                CaseRecord_Id = CaseRecord1.Id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("CaseRecord1")
                    && (ChangeTracker.OriginalValues["CaseRecord1"] == CaseRecord1))
                {
                    ChangeTracker.OriginalValues.Remove("CaseRecord1");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("CaseRecord1", previousValue);
                }
                if (CaseRecord1 != null && !CaseRecord1.ChangeTracker.ChangeTrackingEnabled)
                {
                    CaseRecord1.StartTracking();
                }
            }
        }
    
        private void FixupCourtCaseStatus(CourtCaseStatus previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CourtCase.Contains(this))
            {
                previousValue.CourtCase.Remove(this);
            }
    
            if (CourtCaseStatus != null)
            {
                CourtCaseStatus.CourtCase.Add(this);
    
                CaseStatus_Id = CourtCaseStatus.Id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("CourtCaseStatus")
                    && (ChangeTracker.OriginalValues["CourtCaseStatus"] == CourtCaseStatus))
                {
                    ChangeTracker.OriginalValues.Remove("CourtCaseStatus");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("CourtCaseStatus", previousValue);
                }
                if (CourtCaseStatus != null && !CourtCaseStatus.ChangeTracker.ChangeTrackingEnabled)
                {
                    CourtCaseStatus.StartTracking();
                }
            }
        }
    
        private void FixupUser(User previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CourtCase.Contains(this))
            {
                previousValue.CourtCase.Remove(this);
            }
    
            if (User != null)
            {
                User.CourtCase.Add(this);
    
                CourtClerk_UserId = User.Id;
            }
            else if (!skipKeys)
            {
                CourtClerk_UserId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("User")
                    && (ChangeTracker.OriginalValues["User"] == User))
                {
                    ChangeTracker.OriginalValues.Remove("User");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("User", previousValue);
                }
                if (User != null && !User.ChangeTracker.ChangeTrackingEnabled)
                {
                    User.StartTracking();
                }
            }
        }
    
        private void FixupCaseRecord(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CaseRecord item in e.NewItems)
                {
                    item.CourtCase = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CaseRecord", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CaseRecord item in e.OldItems)
                {
                    if (ReferenceEquals(item.CourtCase, this))
                    {
                        item.CourtCase = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CaseRecord", item);
                    }
                }
            }
        }
    
        private void FixupCaseRecord2(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CaseRecord item in e.NewItems)
                {
                    item.CourtCase2.Add(this);
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CaseRecord2", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CaseRecord item in e.OldItems)
                {
                    if (item.CourtCase2.Contains(this))
                    {
                        item.CourtCase2.Remove(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CaseRecord2", item);
                    }
                }
            }
        }

        #endregion

    }
}
