//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Linq.Expressions;
using System.Runtime.Serialization;
using ReactiveUI;
using System.Reactive.Linq;
using System.Reflection;

namespace Faccts.Model.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(DocketRecord))]
    public partial class HearingReissue: IObjectWithChangeTracker, IReactiveNotifyPropertyChanged, INavigationPropertiesLoadable
    {
    		
    		private MakeObjectReactiveHelper _reactiveHelper;
    
    		public HearingReissue()
    		{
    			_reactiveHelper = new MakeObjectReactiveHelper(this);
    			Initialize();
    			Observable.FromEvent<EventHandler<ObjectStateChangingEventArgs>, ObjectStateChangingEventArgs>(
    			handler =>
    				{
    					EventHandler<ObjectStateChangingEventArgs> eh = (sender, e) => handler(e);
    					return eh;
    				},
    				handler =>  ChangeTracker.ObjectStateChanging += handler,
    				handler =>  ChangeTracker.ObjectStateChanging -= handler
    			)
    			.Subscribe(e =>
    				{
    					if(e.NewState == ObjectState.Unchanged)
    					{
    						IsDirty = false;
    					}
    				}
    			);
    			Observable.Merge<Object>(
    				this.ObservableForProperty(x => x.Id)
    				,this.ObservableForProperty(x => x.ReissueServiceSpecification)
    				,this.ObservableForProperty(x => x.DaysCount)
    				,this.ObservableForProperty(x => x.DocketRecord.IsDirty)
    			).
    			Subscribe(_ =>
    			{
    				if (ChangeTracker.State != ObjectState.Unchanged)
    				{
    					IsDirty = true;
    				}
    			}
    			);
    		}
    
    		partial void Initialize();
    		
    
    
    		private bool _isDirty;
    		public bool IsDirty
    		{
    			get
    			{
    				return _isDirty;
    			}
    			set
    			{
    				if (_isDirty == value)
    					return;
    				OnPropertyChanging("IsDirty");
    				_isDirty = value;
    				OnPropertyChanged("IsDirty", false);
    			}
    		}
    				
    
    		public IObservable<IObservedChange<object, object>> Changed 
    		{
    			get { return _reactiveHelper.Changed; }
    		}
    		public IObservable<IObservedChange<object, object>> Changing 
    		{
    			get { return _reactiveHelper.Changing; }
    		}
    		public IDisposable SuppressChangeNotifications() 
    		{
    			return _reactiveHelper.SuppressChangeNotifications();
    		}
    
    		private PropertyChangingEventHandler _propertyChanging;
    		public event PropertyChangingEventHandler PropertyChanging
    		{
    			add
    			{
    				_propertyChanging += value;
    			}
    			remove
    			{
    				_propertyChanging -= value;
    			}
    		}
    
    		public event EventHandler<LoadingNavigationPropertiesEventArgs> OnNavigationPropertyLoading;
    		protected virtual void RaiseNavigationPropertyLoading(string propertyName)
            {
                if (OnNavigationPropertyLoading != null)
                    OnNavigationPropertyLoading(this, new LoadingNavigationPropertiesEventArgs(propertyName));
            }
    
            protected virtual void RaiseNavigationPropertyLoading<T>(Expression<Func<T>> propertyExpression)
            {
                var body = propertyExpression.Body as MemberExpression;
                if (body == null)
                    throw new ArgumentException("'propertyExpression' should be a member expression");
    
                var expression = body.Expression as ConstantExpression;
                if (expression == null)
                    throw new ArgumentException("'propertyExpression' body should be a constant expression");
    
                object target = Expression.Lambda(expression).Compile().DynamicInvoke();
    
                RaiseNavigationPropertyLoading(body.Member.Name);
            }
    	    #region Simple Properties
    
        [DataMember]
        public long Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
    				OnPropertyChanging("Id");
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private long _id;
    
        [DataMember]
        public FACCTS.Server.Model.Enums.ReissueServiceSpecification ReissueServiceSpecification
        {
            get { return _reissueServiceSpecification; }
            set
            {
                if (_reissueServiceSpecification != value)
                {
    				OnPropertyChanging("ReissueServiceSpecification");
                    _reissueServiceSpecification = value;
                    OnPropertyChanged("ReissueServiceSpecification");
                }
            }
        }
        private FACCTS.Server.Model.Enums.ReissueServiceSpecification _reissueServiceSpecification;
    
        [DataMember]
        public int DaysCount
        {
            get { return _daysCount; }
            set
            {
                if (_daysCount != value)
                {
    				OnPropertyChanging("DaysCount");
                    _daysCount = value;
                    OnPropertyChanged("DaysCount");
                }
            }
        }
        private int _daysCount;

        #endregion

        #region Complex Properties
    
        [DataMember]
        public ReissueReason ReissueReason
        {
            get
            {
                if (!_reissueReasonInitialized && _reissueReason == null)
                {
                    _reissueReason = new ReissueReason();
                    ((INotifyComplexPropertyChanging)_reissueReason).ComplexPropertyChanging += HandleReissueReasonChanging;
                }
                _reissueReasonInitialized = true;
                return _reissueReason;
            }
            set
            {
                _reissueReasonInitialized = true;
                if (!Equals(_reissueReason, value))
                {
                    if (_reissueReason != null)
                    {
                        ((INotifyComplexPropertyChanging)_reissueReason).ComplexPropertyChanging -= HandleReissueReasonChanging;
                    }
    
                    HandleReissueReasonChanging(this, null);
    				OnPropertyChanging("ReissueReason");
                    _reissueReason = value;
                    OnPropertyChanged("ReissueReason");
    
                    if (value != null)
                    {
                        ((INotifyComplexPropertyChanging)_reissueReason).ComplexPropertyChanging += HandleReissueReasonChanging;
                    }
                }
            }
        }
        private ReissueReason _reissueReason;
        private bool _reissueReasonInitialized;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public DocketRecord DocketRecord
        {
            get { return _docketRecord; }
            set
            {
                if (!ReferenceEquals(_docketRecord, value))
                {
                    var previousValue = _docketRecord;
    				OnNavigationPropertyChanging("DocketRecord");
                    _docketRecord = value;
                    FixupDocketRecord(previousValue);
                    OnNavigationPropertyChanged("DocketRecord");
                }
            }
        }
        private DocketRecord _docketRecord;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName, bool changeState = true)
        {
            if (changeState && ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
    	protected virtual void OnPropertyChanging(String propertyName)
        {
            if (_propertyChanging != null)
            {
                _propertyChanging(this, new PropertyChangingEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
    	protected virtual void OnNavigationPropertyChanging(String propertyName)
        {
            if (_propertyChanging != null)
            {
                _propertyChanging(this, new PropertyChangingEventArgs(propertyName));
            }
        }
    
    	
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
        // Records the original values for the complex property ReissueReason
        private void HandleReissueReasonChanging(object sender, EventArgs args)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
        }
    
    
        protected virtual void ClearNavigationProperties()
        {
            DocketRecord = null;
            FixupDocketRecordKeys();
        }

        #endregion

        #region Association Fixup
    
        private void FixupDocketRecord(DocketRecord previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && ReferenceEquals(previousValue.HearingReissue, this))
            {
                previousValue.HearingReissue = null;
            }
    
            if (DocketRecord != null)
            {
                DocketRecord.HearingReissue = this;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("DocketRecord")
                    && (ChangeTracker.OriginalValues["DocketRecord"] == DocketRecord))
                {
                    ChangeTracker.OriginalValues.Remove("DocketRecord");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("DocketRecord", previousValue);
                }
                if (DocketRecord != null && !DocketRecord.ChangeTracker.ChangeTrackingEnabled)
                {
                    DocketRecord.StartTracking();
                }
                FixupDocketRecordKeys();
            }
        }
    
        private void FixupDocketRecordKeys()
        {
            const string CourtCaseIdKeyName = "DocketRecord.CourtCaseId";
    
            if(ChangeTracker.ExtendedProperties.ContainsKey(CourtCaseIdKeyName))
            {
                ChangeTracker.RecordOriginalValue(CourtCaseIdKeyName, ChangeTracker.ExtendedProperties[CourtCaseIdKeyName]);
                ChangeTracker.ExtendedProperties.Remove(CourtCaseIdKeyName);
            }
        }

        #endregion

    }
}
