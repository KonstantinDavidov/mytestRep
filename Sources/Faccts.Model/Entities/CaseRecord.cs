//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Linq.Expressions;
using System.Runtime.Serialization;
using ReactiveUI;
using System.Reactive.Linq;

namespace Faccts.Model.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Attorneys))]
    [KnownType(typeof(CaseHistory))]
    [KnownType(typeof(CaseNotes))]
    [KnownType(typeof(CaseRecord))]
    [KnownType(typeof(CourtCounty))]
    [KnownType(typeof(CourtParty))]
    [KnownType(typeof(Children))]
    [KnownType(typeof(CourtCase))]
    [KnownType(typeof(OtherProtected))]
    [KnownType(typeof(ThirdPartyData))]
    public partial class CaseRecord: IObjectWithChangeTracker, IReactiveNotifyPropertyChanged, INavigationPropertiesLoadable
    {
    		
    		private MakeObjectReactiveHelper _reactiveHelper;
    
    		public CaseRecord()
    		{
    			_reactiveHelper = new MakeObjectReactiveHelper(this);
    			Initialize();
    			Observable.FromEvent<EventHandler<ObjectStateChangingEventArgs>, ObjectStateChangingEventArgs>(
    			handler =>
    				{
    					EventHandler<ObjectStateChangingEventArgs> eh = (sender, e) => handler(e);
    					return eh;
    				},
    				handler =>  ChangeTracker.ObjectStateChanging += handler,
    				handler =>  ChangeTracker.ObjectStateChanging -= handler
    			)
    			.Subscribe(e =>
    				{
    					if(e.NewState == ObjectState.Unchanged)
    					{
    						IsDirty = false;
    					}
    				}
    			);
    			Observable.Merge<Object>(
    				this.ObservableForProperty(x => x.Id)
    				,this.ObservableForProperty(x => x.Party1_Id)
    				,this.ObservableForProperty(x => x.Party2_Id)
    				,this.ObservableForProperty(x => x.AttorneyForChild_Id)
    				,this.ObservableForProperty(x => x.CourtCounty_Id)
    				,this.ObservableForProperty(x => x.CaseRecord_Id)
    				,this.ObservableForProperty(x => x.ThirdPartyData_Id)
    				,this.ObservableForProperty(x => x.Attorneys.IsDirty)
    				,this.ObservableForProperty(x => x.ParentCaseRecord.IsDirty)
    				,this.ObservableForProperty(x => x.CourtCounty.IsDirty)
    				,this.ObservableForProperty(x => x.CourtParty.IsDirty)
    				,this.ObservableForProperty(x => x.CourtParty1.IsDirty)
    				,this.ObservableForProperty(x => x.CourtCase1.IsDirty)
    				,this.ObservableForProperty(x => x.ThirdPartyData.IsDirty)
    			).
    			Subscribe(_ =>
    			{
    				if (ChangeTracker.State != ObjectState.Unchanged)
    				{
    					IsDirty = true;
    				}
    			}
    			);
    		}
    
    		partial void Initialize();
    		
    		private bool _isDirty;
    		public bool IsDirty
    		{
    			get
    			{
    				return _isDirty;
    			}
    			set
    			{
    				if (_isDirty == value)
    					return;
    				OnPropertyChanging("IsDirty");
    				_isDirty = value;
    				OnPropertyChanged("IsDirty");
    			}
    		}
    				
    
    		public IObservable<IObservedChange<object, object>> Changed 
    		{
    			get { return _reactiveHelper.Changed; }
    		}
    		public IObservable<IObservedChange<object, object>> Changing 
    		{
    			get { return _reactiveHelper.Changing; }
    		}
    		public IDisposable SuppressChangeNotifications() 
    		{
    			return _reactiveHelper.SuppressChangeNotifications();
    		}
    
    		private PropertyChangingEventHandler _propertyChanging;
    		public event PropertyChangingEventHandler PropertyChanging
    		{
    			add
    			{
    				_propertyChanging += value;
    			}
    			remove
    			{
    				_propertyChanging -= value;
    			}
    		}
    
    		public event EventHandler<LoadingNavigationPropertiesEventArgs> OnNavigationPropertyLoading;
    		protected virtual void RaiseNavigationPropertyLoading(string propertyName)
            {
                if (OnNavigationPropertyLoading != null)
                    OnNavigationPropertyLoading(this, new LoadingNavigationPropertiesEventArgs(propertyName));
            }
    
            protected virtual void RaiseNavigationPropertyLoading<T>(Expression<Func<T>> propertyExpression)
            {
                var body = propertyExpression.Body as MemberExpression;
                if (body == null)
                    throw new ArgumentException("'propertyExpression' should be a member expression");
    
                var expression = body.Expression as ConstantExpression;
                if (expression == null)
                    throw new ArgumentException("'propertyExpression' body should be a constant expression");
    
                object target = Expression.Lambda(expression).Compile().DynamicInvoke();
    
                RaiseNavigationPropertyLoading(body.Member.Name);
            }
    	    #region Simple Properties
    
        [DataMember]
        public long Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (CourtCase1 != null && CourtCase1.Id != value)
                        {
                            CourtCase1 = null;
                        }
                    }
    				OnPropertyChanging("Id");
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private long _id;
    
        [DataMember]
        public Nullable<long> Party1_Id
        {
            get { return _party1_Id; }
            set
            {
                if (_party1_Id != value)
                {
                    ChangeTracker.RecordOriginalValue("Party1_Id", _party1_Id);
                    if (!IsDeserializing)
                    {
                        if (CourtParty != null && CourtParty.Id != value)
                        {
                            CourtParty = null;
                        }
                    }
    				OnPropertyChanging("Party1_Id");
                    _party1_Id = value;
                    OnPropertyChanged("Party1_Id");
                }
            }
        }
        private Nullable<long> _party1_Id;
    
        [DataMember]
        public Nullable<long> Party2_Id
        {
            get { return _party2_Id; }
            set
            {
                if (_party2_Id != value)
                {
                    ChangeTracker.RecordOriginalValue("Party2_Id", _party2_Id);
                    if (!IsDeserializing)
                    {
                        if (CourtParty1 != null && CourtParty1.Id != value)
                        {
                            CourtParty1 = null;
                        }
                    }
    				OnPropertyChanging("Party2_Id");
                    _party2_Id = value;
                    OnPropertyChanged("Party2_Id");
                }
            }
        }
        private Nullable<long> _party2_Id;
    
        [DataMember]
        public Nullable<long> AttorneyForChild_Id
        {
            get { return _attorneyForChild_Id; }
            set
            {
                if (_attorneyForChild_Id != value)
                {
                    ChangeTracker.RecordOriginalValue("AttorneyForChild_Id", _attorneyForChild_Id);
                    if (!IsDeserializing)
                    {
                        if (Attorneys != null && Attorneys.Id != value)
                        {
                            Attorneys = null;
                        }
                    }
    				OnPropertyChanging("AttorneyForChild_Id");
                    _attorneyForChild_Id = value;
                    OnPropertyChanged("AttorneyForChild_Id");
                }
            }
        }
        private Nullable<long> _attorneyForChild_Id;
    
        [DataMember]
        public Nullable<long> CourtCounty_Id
        {
            get { return _courtCounty_Id; }
            set
            {
                if (_courtCounty_Id != value)
                {
                    ChangeTracker.RecordOriginalValue("CourtCounty_Id", _courtCounty_Id);
                    if (!IsDeserializing)
                    {
                        if (CourtCounty != null && CourtCounty.Id != value)
                        {
                            CourtCounty = null;
                        }
                    }
    				OnPropertyChanging("CourtCounty_Id");
                    _courtCounty_Id = value;
                    OnPropertyChanged("CourtCounty_Id");
                }
            }
        }
        private Nullable<long> _courtCounty_Id;
    
        [DataMember]
        public Nullable<long> CaseRecord_Id
        {
            get { return _caseRecord_Id; }
            set
            {
                if (_caseRecord_Id != value)
                {
                    ChangeTracker.RecordOriginalValue("CaseRecord_Id", _caseRecord_Id);
                    if (!IsDeserializing)
                    {
                        if (ParentCaseRecord != null && ParentCaseRecord.Id != value)
                        {
                            ParentCaseRecord = null;
                        }
                    }
    				OnPropertyChanging("CaseRecord_Id");
                    _caseRecord_Id = value;
                    OnPropertyChanged("CaseRecord_Id");
                }
            }
        }
        private Nullable<long> _caseRecord_Id;
    
        [DataMember]
        public Nullable<long> ThirdPartyData_Id
        {
            get { return _thirdPartyData_Id; }
            set
            {
                if (_thirdPartyData_Id != value)
                {
                    ChangeTracker.RecordOriginalValue("ThirdPartyData_Id", _thirdPartyData_Id);
                    if (!IsDeserializing)
                    {
                        if (ThirdPartyData != null && ThirdPartyData.Id != value)
                        {
                            ThirdPartyData = null;
                        }
                    }
    				OnPropertyChanging("ThirdPartyData_Id");
                    _thirdPartyData_Id = value;
                    OnPropertyChanged("ThirdPartyData_Id");
                }
            }
        }
        private Nullable<long> _thirdPartyData_Id;

        #endregion

        #region Complex Properties
    
        [DataMember]
        public RestrainingPartyIDInfo RestrainingpartyIdentificationInformation
        {
            get
            {
                if (!_restrainingpartyIdentificationInformationInitialized && _restrainingpartyIdentificationInformation == null)
                {
                    _restrainingpartyIdentificationInformation = new RestrainingPartyIDInfo();
                    ((INotifyComplexPropertyChanging)_restrainingpartyIdentificationInformation).ComplexPropertyChanging += HandleRestrainingpartyIdentificationInformationChanging;
                }
                _restrainingpartyIdentificationInformationInitialized = true;
                return _restrainingpartyIdentificationInformation;
            }
            set
            {
                _restrainingpartyIdentificationInformationInitialized = true;
                if (!Equals(_restrainingpartyIdentificationInformation, value))
                {
                    if (_restrainingpartyIdentificationInformation != null)
                    {
                        ((INotifyComplexPropertyChanging)_restrainingpartyIdentificationInformation).ComplexPropertyChanging -= HandleRestrainingpartyIdentificationInformationChanging;
                    }
    
                    HandleRestrainingpartyIdentificationInformationChanging(this, null);
    				OnPropertyChanging("RestrainingpartyIdentificationInformation");
                    _restrainingpartyIdentificationInformation = value;
                    OnPropertyChanged("RestrainingpartyIdentificationInformation");
    
                    if (value != null)
                    {
                        ((INotifyComplexPropertyChanging)_restrainingpartyIdentificationInformation).ComplexPropertyChanging += HandleRestrainingpartyIdentificationInformationChanging;
                    }
                }
            }
        }
        private RestrainingPartyIDInfo _restrainingpartyIdentificationInformation;
        private bool _restrainingpartyIdentificationInformationInitialized;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public Attorneys Attorneys
        {
            get { return _attorneys; }
            set
            {
                if (!ReferenceEquals(_attorneys, value))
                {
                    var previousValue = _attorneys;
    				OnNavigationPropertyChanging("Attorneys");
                    _attorneys = value;
                    FixupAttorneys(previousValue);
                    OnNavigationPropertyChanged("Attorneys");
                }
            }
        }
        private Attorneys _attorneys;
    
        [DataMember]
        public TrackableCollection<CaseHistory> CaseHistory
        {
            get
            {
                if (_caseHistory == null)
                {
                    _caseHistory = new TrackableCollection<CaseHistory>();
                    _caseHistory.CollectionChanged += FixupCaseHistory;
                }
                return _caseHistory;
            }
            set
            {
                if (!ReferenceEquals(_caseHistory, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
    				OnNavigationPropertyChanging("CaseHistory");
                    if (_caseHistory != null)
                    {
                        _caseHistory.CollectionChanged -= FixupCaseHistory;
                    }
                    _caseHistory = value;
                    if (_caseHistory != null)
                    {
                        _caseHistory.CollectionChanged += FixupCaseHistory;
                    }
                    OnNavigationPropertyChanged("CaseHistory");
                }
            }
        }
        private TrackableCollection<CaseHistory> _caseHistory;
    
        [DataMember]
        public TrackableCollection<CaseNotes> CaseNotes
        {
            get
            {
                if (_caseNotes == null)
                {
                    _caseNotes = new TrackableCollection<CaseNotes>();
                    _caseNotes.CollectionChanged += FixupCaseNotes;
                }
                return _caseNotes;
            }
            set
            {
                if (!ReferenceEquals(_caseNotes, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
    				OnNavigationPropertyChanging("CaseNotes");
                    if (_caseNotes != null)
                    {
                        _caseNotes.CollectionChanged -= FixupCaseNotes;
                    }
                    _caseNotes = value;
                    if (_caseNotes != null)
                    {
                        _caseNotes.CollectionChanged += FixupCaseNotes;
                    }
                    OnNavigationPropertyChanged("CaseNotes");
                }
            }
        }
        private TrackableCollection<CaseNotes> _caseNotes;
    
        [DataMember]
        public TrackableCollection<CaseRecord> RelatedCaseRecords
        {
            get
            {
                if (_relatedCaseRecords == null)
                {
                    _relatedCaseRecords = new TrackableCollection<CaseRecord>();
                    _relatedCaseRecords.CollectionChanged += FixupRelatedCaseRecords;
                }
                return _relatedCaseRecords;
            }
            set
            {
                if (!ReferenceEquals(_relatedCaseRecords, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
    				OnNavigationPropertyChanging("RelatedCaseRecords");
                    if (_relatedCaseRecords != null)
                    {
                        _relatedCaseRecords.CollectionChanged -= FixupRelatedCaseRecords;
                    }
                    _relatedCaseRecords = value;
                    if (_relatedCaseRecords != null)
                    {
                        _relatedCaseRecords.CollectionChanged += FixupRelatedCaseRecords;
                    }
                    OnNavigationPropertyChanged("RelatedCaseRecords");
                }
            }
        }
        private TrackableCollection<CaseRecord> _relatedCaseRecords;
    
        [DataMember]
        public CaseRecord ParentCaseRecord
        {
            get { return _parentCaseRecord; }
            set
            {
                if (!ReferenceEquals(_parentCaseRecord, value))
                {
                    var previousValue = _parentCaseRecord;
    				OnNavigationPropertyChanging("ParentCaseRecord");
                    _parentCaseRecord = value;
                    FixupParentCaseRecord(previousValue);
                    OnNavigationPropertyChanged("ParentCaseRecord");
                }
            }
        }
        private CaseRecord _parentCaseRecord;
    
        [DataMember]
        public CourtCounty CourtCounty
        {
            get { return _courtCounty; }
            set
            {
                if (!ReferenceEquals(_courtCounty, value))
                {
                    var previousValue = _courtCounty;
    				OnNavigationPropertyChanging("CourtCounty");
                    _courtCounty = value;
                    FixupCourtCounty(previousValue);
                    OnNavigationPropertyChanged("CourtCounty");
                }
            }
        }
        private CourtCounty _courtCounty;
    
        [DataMember]
        public CourtParty CourtParty
        {
            get { return _courtParty; }
            set
            {
                if (!ReferenceEquals(_courtParty, value))
                {
                    var previousValue = _courtParty;
    				OnNavigationPropertyChanging("CourtParty");
                    _courtParty = value;
                    FixupCourtParty(previousValue);
                    OnNavigationPropertyChanged("CourtParty");
                }
            }
        }
        private CourtParty _courtParty;
    
        [DataMember]
        public CourtParty CourtParty1
        {
            get { return _courtParty1; }
            set
            {
                if (!ReferenceEquals(_courtParty1, value))
                {
                    var previousValue = _courtParty1;
    				OnNavigationPropertyChanging("CourtParty1");
                    _courtParty1 = value;
                    FixupCourtParty1(previousValue);
                    OnNavigationPropertyChanged("CourtParty1");
                }
            }
        }
        private CourtParty _courtParty1;
    
        [DataMember]
        public TrackableCollection<Children> Children
        {
            get
            {
                if (_children == null)
                {
                    _children = new TrackableCollection<Children>();
                    _children.CollectionChanged += FixupChildren;
                }
                return _children;
            }
            set
            {
                if (!ReferenceEquals(_children, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
    				OnNavigationPropertyChanging("Children");
                    if (_children != null)
                    {
                        _children.CollectionChanged -= FixupChildren;
                    }
                    _children = value;
                    if (_children != null)
                    {
                        _children.CollectionChanged += FixupChildren;
                    }
                    OnNavigationPropertyChanged("Children");
                }
            }
        }
        private TrackableCollection<Children> _children;
    
        [DataMember]
        public TrackableCollection<CourtCase> CourtCase
        {
            get
            {
                if (_courtCase == null)
                {
                    _courtCase = new TrackableCollection<CourtCase>();
                    _courtCase.CollectionChanged += FixupCourtCase;
                }
                return _courtCase;
            }
            set
            {
                if (!ReferenceEquals(_courtCase, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
    				OnNavigationPropertyChanging("CourtCase");
                    if (_courtCase != null)
                    {
                        _courtCase.CollectionChanged -= FixupCourtCase;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (CourtCase item in _courtCase)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _courtCase = value;
                    if (_courtCase != null)
                    {
                        _courtCase.CollectionChanged += FixupCourtCase;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (CourtCase item in _courtCase)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("CourtCase");
                }
            }
        }
        private TrackableCollection<CourtCase> _courtCase;
    
        [DataMember]
        public TrackableCollection<OtherProtected> OtherProtected
        {
            get
            {
                if (_otherProtected == null)
                {
                    _otherProtected = new TrackableCollection<OtherProtected>();
                    _otherProtected.CollectionChanged += FixupOtherProtected;
                }
                return _otherProtected;
            }
            set
            {
                if (!ReferenceEquals(_otherProtected, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
    				OnNavigationPropertyChanging("OtherProtected");
                    if (_otherProtected != null)
                    {
                        _otherProtected.CollectionChanged -= FixupOtherProtected;
                    }
                    _otherProtected = value;
                    if (_otherProtected != null)
                    {
                        _otherProtected.CollectionChanged += FixupOtherProtected;
                    }
                    OnNavigationPropertyChanged("OtherProtected");
                }
            }
        }
        private TrackableCollection<OtherProtected> _otherProtected;
    
        [DataMember]
        public CourtCase CourtCase1
        {
            get { return _courtCase1; }
            set
            {
                if (!ReferenceEquals(_courtCase1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                        // otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                        if (Id != value.Id)
                        {
                            throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                        }
                    }
                    var previousValue = _courtCase1;
    				OnNavigationPropertyChanging("CourtCase1");
                    _courtCase1 = value;
                    FixupCourtCase1(previousValue);
                    OnNavigationPropertyChanged("CourtCase1");
                }
            }
        }
        private CourtCase _courtCase1;
    
        [DataMember]
        public ThirdPartyData ThirdPartyData
        {
            get { return _thirdPartyData; }
            set
            {
                if (!ReferenceEquals(_thirdPartyData, value))
                {
                    var previousValue = _thirdPartyData;
    				OnNavigationPropertyChanging("ThirdPartyData");
                    _thirdPartyData = value;
                    FixupThirdPartyData(previousValue);
                    OnNavigationPropertyChanged("ThirdPartyData");
                }
            }
        }
        private ThirdPartyData _thirdPartyData;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
    	protected virtual void OnPropertyChanging(String propertyName)
        {
            if (_propertyChanging != null)
            {
                _propertyChanging(this, new PropertyChangingEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
    	protected virtual void OnNavigationPropertyChanging(String propertyName)
        {
            if (_propertyChanging != null)
            {
                _propertyChanging(this, new PropertyChangingEventArgs(propertyName));
            }
        }
    
    	
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
        // Records the original values for the complex property RestrainingpartyIdentificationInformation
        private void HandleRestrainingpartyIdentificationInformationChanging(object sender, EventArgs args)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
        }
    
    
        protected virtual void ClearNavigationProperties()
        {
            Attorneys = null;
            CaseHistory.Clear();
            CaseNotes.Clear();
            RelatedCaseRecords.Clear();
            ParentCaseRecord = null;
            CourtCounty = null;
            CourtParty = null;
            CourtParty1 = null;
            Children.Clear();
            CourtCase.Clear();
            OtherProtected.Clear();
            CourtCase1 = null;
            ThirdPartyData = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupAttorneys(Attorneys previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CaseRecord.Contains(this))
            {
                previousValue.CaseRecord.Remove(this);
            }
    
            if (Attorneys != null)
            {
                Attorneys.CaseRecord.Add(this);
    
                AttorneyForChild_Id = Attorneys.Id;
            }
            else if (!skipKeys)
            {
                AttorneyForChild_Id = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Attorneys")
                    && (ChangeTracker.OriginalValues["Attorneys"] == Attorneys))
                {
                    ChangeTracker.OriginalValues.Remove("Attorneys");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Attorneys", previousValue);
                }
                if (Attorneys != null && !Attorneys.ChangeTracker.ChangeTrackingEnabled)
                {
                    Attorneys.StartTracking();
                }
            }
        }
    
        private void FixupParentCaseRecord(CaseRecord previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.RelatedCaseRecords.Contains(this))
            {
                previousValue.RelatedCaseRecords.Remove(this);
            }
    
            if (ParentCaseRecord != null)
            {
                ParentCaseRecord.RelatedCaseRecords.Add(this);
    
                CaseRecord_Id = ParentCaseRecord.Id;
            }
            else if (!skipKeys)
            {
                CaseRecord_Id = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ParentCaseRecord")
                    && (ChangeTracker.OriginalValues["ParentCaseRecord"] == ParentCaseRecord))
                {
                    ChangeTracker.OriginalValues.Remove("ParentCaseRecord");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ParentCaseRecord", previousValue);
                }
                if (ParentCaseRecord != null && !ParentCaseRecord.ChangeTracker.ChangeTrackingEnabled)
                {
                    ParentCaseRecord.StartTracking();
                }
            }
        }
    
        private void FixupCourtCounty(CourtCounty previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CaseRecord.Contains(this))
            {
                previousValue.CaseRecord.Remove(this);
            }
    
            if (CourtCounty != null)
            {
                CourtCounty.CaseRecord.Add(this);
    
                CourtCounty_Id = CourtCounty.Id;
            }
            else if (!skipKeys)
            {
                CourtCounty_Id = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("CourtCounty")
                    && (ChangeTracker.OriginalValues["CourtCounty"] == CourtCounty))
                {
                    ChangeTracker.OriginalValues.Remove("CourtCounty");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("CourtCounty", previousValue);
                }
                if (CourtCounty != null && !CourtCounty.ChangeTracker.ChangeTrackingEnabled)
                {
                    CourtCounty.StartTracking();
                }
            }
        }
    
        private void FixupCourtParty(CourtParty previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CaseRecord.Contains(this))
            {
                previousValue.CaseRecord.Remove(this);
            }
    
            if (CourtParty != null)
            {
                CourtParty.CaseRecord.Add(this);
    
                Party1_Id = CourtParty.Id;
            }
            else if (!skipKeys)
            {
                Party1_Id = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("CourtParty")
                    && (ChangeTracker.OriginalValues["CourtParty"] == CourtParty))
                {
                    ChangeTracker.OriginalValues.Remove("CourtParty");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("CourtParty", previousValue);
                }
                if (CourtParty != null && !CourtParty.ChangeTracker.ChangeTrackingEnabled)
                {
                    CourtParty.StartTracking();
                }
            }
        }
    
        private void FixupCourtParty1(CourtParty previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CaseRecord1.Contains(this))
            {
                previousValue.CaseRecord1.Remove(this);
            }
    
            if (CourtParty1 != null)
            {
                CourtParty1.CaseRecord1.Add(this);
    
                Party2_Id = CourtParty1.Id;
            }
            else if (!skipKeys)
            {
                Party2_Id = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("CourtParty1")
                    && (ChangeTracker.OriginalValues["CourtParty1"] == CourtParty1))
                {
                    ChangeTracker.OriginalValues.Remove("CourtParty1");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("CourtParty1", previousValue);
                }
                if (CourtParty1 != null && !CourtParty1.ChangeTracker.ChangeTrackingEnabled)
                {
                    CourtParty1.StartTracking();
                }
            }
        }
    
        private void FixupCourtCase1(CourtCase previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && ReferenceEquals(previousValue.CaseRecord1, this))
            {
                previousValue.CaseRecord1 = null;
            }
    
            if (CourtCase1 != null)
            {
                CourtCase1.CaseRecord1 = this;
                Id = CourtCase1.Id;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("CourtCase1")
                    && (ChangeTracker.OriginalValues["CourtCase1"] == CourtCase1))
                {
                    ChangeTracker.OriginalValues.Remove("CourtCase1");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("CourtCase1", previousValue);
                }
                if (CourtCase1 != null && !CourtCase1.ChangeTracker.ChangeTrackingEnabled)
                {
                    CourtCase1.StartTracking();
                }
            }
        }
    
        private void FixupThirdPartyData(ThirdPartyData previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CaseRecord.Contains(this))
            {
                previousValue.CaseRecord.Remove(this);
            }
    
            if (ThirdPartyData != null)
            {
                ThirdPartyData.CaseRecord.Add(this);
    
                ThirdPartyData_Id = ThirdPartyData.Id;
            }
            else if (!skipKeys)
            {
                ThirdPartyData_Id = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ThirdPartyData")
                    && (ChangeTracker.OriginalValues["ThirdPartyData"] == ThirdPartyData))
                {
                    ChangeTracker.OriginalValues.Remove("ThirdPartyData");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ThirdPartyData", previousValue);
                }
                if (ThirdPartyData != null && !ThirdPartyData.ChangeTracker.ChangeTrackingEnabled)
                {
                    ThirdPartyData.StartTracking();
                }
            }
        }
    
        private void FixupCaseHistory(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CaseHistory item in e.NewItems)
                {
                    item.CaseRecord = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CaseHistory", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CaseHistory item in e.OldItems)
                {
                    if (ReferenceEquals(item.CaseRecord, this))
                    {
                        item.CaseRecord = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CaseHistory", item);
                    }
                }
            }
        }
    
        private void FixupCaseNotes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CaseNotes item in e.NewItems)
                {
                    item.CaseRecord = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CaseNotes", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CaseNotes item in e.OldItems)
                {
                    if (ReferenceEquals(item.CaseRecord, this))
                    {
                        item.CaseRecord = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CaseNotes", item);
                    }
                }
            }
        }
    
        private void FixupRelatedCaseRecords(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CaseRecord item in e.NewItems)
                {
                    item.ParentCaseRecord = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("RelatedCaseRecords", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CaseRecord item in e.OldItems)
                {
                    if (ReferenceEquals(item.ParentCaseRecord, this))
                    {
                        item.ParentCaseRecord = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("RelatedCaseRecords", item);
                    }
                }
            }
        }
    
        private void FixupChildren(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Children item in e.NewItems)
                {
                    item.CaseRecord = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Children", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Children item in e.OldItems)
                {
                    if (ReferenceEquals(item.CaseRecord, this))
                    {
                        item.CaseRecord = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Children", item);
                    }
                }
            }
        }
    
        private void FixupCourtCase(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CourtCase item in e.NewItems)
                {
                    item.CaseRecord = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CourtCase", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CourtCase item in e.OldItems)
                {
                    if (ReferenceEquals(item.CaseRecord, this))
                    {
                        item.CaseRecord = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CourtCase", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupOtherProtected(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (OtherProtected item in e.NewItems)
                {
                    item.CaseRecord = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("OtherProtected", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (OtherProtected item in e.OldItems)
                {
                    if (ReferenceEquals(item.CaseRecord, this))
                    {
                        item.CaseRecord = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("OtherProtected", item);
                    }
                }
            }
        }

        #endregion

    }
}
