//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Linq.Expressions;
using System.Runtime.Serialization;
using ReactiveUI;
using System.Reactive.Linq;
using System.Reflection;

namespace Faccts.Model.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(ConductTROSection))]
    [KnownType(typeof(SAOEATROSection))]
    [KnownType(typeof(MoveOutTROSection))]
    [KnownType(typeof(NoGunsEASection))]
    [KnownType(typeof(CarposEntrySection))]
    [KnownType(typeof(ServiceFeesSection))]
    [KnownType(typeof(OtherOrdersTROSection))]
    [KnownType(typeof(ExpirationSection))]
    public partial class EA110TROOrder : OrderBase, IObjectWithChangeTracker, IReactiveNotifyPropertyChanged, INavigationPropertiesLoadable
    {
        #region Simple Properties
    
        [DataMember]
        public bool ElderlyPartyPresent
        {
            get { return _elderlyPartyPresent; }
            set
            {
                if (_elderlyPartyPresent != value)
                {
    				OnPropertyChanging("ElderlyPartyPresent");
                    _elderlyPartyPresent = value;
                    OnPropertyChanged("ElderlyPartyPresent");
                }
            }
        }
        private bool _elderlyPartyPresent;
    
        [DataMember]
        public string ProtectedName
        {
            get { return _protectedName; }
            set
            {
                if (_protectedName != value)
                {
    				OnPropertyChanging("ProtectedName");
                    _protectedName = value;
                    OnPropertyChanged("ProtectedName");
                }
            }
        }
        private string _protectedName;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public ConductTROSection ConductTROSection
        {
            get { return _conductTROSection; }
            set
            {
                if (!ReferenceEquals(_conductTROSection, value))
                {
                    var previousValue = _conductTROSection;
    				OnNavigationPropertyChanging("ConductTROSection");
                    _conductTROSection = value;
                    FixupConductTROSection(previousValue);
                    OnNavigationPropertyChanged("ConductTROSection");
                }
            }
        }
        private ConductTROSection _conductTROSection;
    
        [DataMember]
        public SAOEATROSection SAOEATROSection
        {
            get { return _sAOEATROSection; }
            set
            {
                if (!ReferenceEquals(_sAOEATROSection, value))
                {
                    var previousValue = _sAOEATROSection;
    				OnNavigationPropertyChanging("SAOEATROSection");
                    _sAOEATROSection = value;
                    FixupSAOEATROSection(previousValue);
                    OnNavigationPropertyChanged("SAOEATROSection");
                }
            }
        }
        private SAOEATROSection _sAOEATROSection;
    
        [DataMember]
        public MoveOutTROSection MoveOutTROSection
        {
            get { return _moveOutTROSection; }
            set
            {
                if (!ReferenceEquals(_moveOutTROSection, value))
                {
                    var previousValue = _moveOutTROSection;
    				OnNavigationPropertyChanging("MoveOutTROSection");
                    _moveOutTROSection = value;
                    FixupMoveOutTROSection(previousValue);
                    OnNavigationPropertyChanged("MoveOutTROSection");
                }
            }
        }
        private MoveOutTROSection _moveOutTROSection;
    
        [DataMember]
        public NoGunsEASection NoGunsEASection
        {
            get { return _noGunsEASection; }
            set
            {
                if (!ReferenceEquals(_noGunsEASection, value))
                {
                    var previousValue = _noGunsEASection;
    				OnNavigationPropertyChanging("NoGunsEASection");
                    _noGunsEASection = value;
                    FixupNoGunsEASection(previousValue);
                    OnNavigationPropertyChanged("NoGunsEASection");
                }
            }
        }
        private NoGunsEASection _noGunsEASection;
    
        [DataMember]
        public CarposEntrySection CarposEntrySection
        {
            get { return _carposEntrySection; }
            set
            {
                if (!ReferenceEquals(_carposEntrySection, value))
                {
                    var previousValue = _carposEntrySection;
    				OnNavigationPropertyChanging("CarposEntrySection");
                    _carposEntrySection = value;
                    FixupCarposEntrySection(previousValue);
                    OnNavigationPropertyChanged("CarposEntrySection");
                }
            }
        }
        private CarposEntrySection _carposEntrySection;
    
        [DataMember]
        public ServiceFeesSection ServiceFeesSection
        {
            get { return _serviceFeesSection; }
            set
            {
                if (!ReferenceEquals(_serviceFeesSection, value))
                {
                    var previousValue = _serviceFeesSection;
    				OnNavigationPropertyChanging("ServiceFeesSection");
                    _serviceFeesSection = value;
                    FixupServiceFeesSection(previousValue);
                    OnNavigationPropertyChanged("ServiceFeesSection");
                }
            }
        }
        private ServiceFeesSection _serviceFeesSection;
    
        [DataMember]
        public OtherOrdersTROSection OtherOrdersTROSection
        {
            get { return _otherOrdersTROSection; }
            set
            {
                if (!ReferenceEquals(_otherOrdersTROSection, value))
                {
                    var previousValue = _otherOrdersTROSection;
    				OnNavigationPropertyChanging("OtherOrdersTROSection");
                    _otherOrdersTROSection = value;
                    FixupOtherOrdersTROSection(previousValue);
                    OnNavigationPropertyChanged("OtherOrdersTROSection");
                }
            }
        }
        private OtherOrdersTROSection _otherOrdersTROSection;
    
        [DataMember]
        public ExpirationSection ExpirationSection
        {
            get { return _expirationSection; }
            set
            {
                if (!ReferenceEquals(_expirationSection, value))
                {
                    var previousValue = _expirationSection;
    				OnNavigationPropertyChanging("ExpirationSection");
                    _expirationSection = value;
                    FixupExpirationSection(previousValue);
                    OnNavigationPropertyChanged("ExpirationSection");
                }
            }
        }
        private ExpirationSection _expirationSection;

        #endregion

        #region ChangeTracking
    
        protected override void ClearNavigationProperties()
        {
            base.ClearNavigationProperties();
            ConductTROSection = null;
            SAOEATROSection = null;
            MoveOutTROSection = null;
            NoGunsEASection = null;
            CarposEntrySection = null;
            ServiceFeesSection = null;
            OtherOrdersTROSection = null;
            ExpirationSection = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupConductTROSection(ConductTROSection previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ConductTROSection")
                    && (ChangeTracker.OriginalValues["ConductTROSection"] == ConductTROSection))
                {
                    ChangeTracker.OriginalValues.Remove("ConductTROSection");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ConductTROSection", previousValue);
                }
                if (ConductTROSection != null && !ConductTROSection.ChangeTracker.ChangeTrackingEnabled)
                {
                    ConductTROSection.StartTracking();
                }
            }
        }
    
        private void FixupSAOEATROSection(SAOEATROSection previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("SAOEATROSection")
                    && (ChangeTracker.OriginalValues["SAOEATROSection"] == SAOEATROSection))
                {
                    ChangeTracker.OriginalValues.Remove("SAOEATROSection");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("SAOEATROSection", previousValue);
                }
                if (SAOEATROSection != null && !SAOEATROSection.ChangeTracker.ChangeTrackingEnabled)
                {
                    SAOEATROSection.StartTracking();
                }
            }
        }
    
        private void FixupMoveOutTROSection(MoveOutTROSection previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("MoveOutTROSection")
                    && (ChangeTracker.OriginalValues["MoveOutTROSection"] == MoveOutTROSection))
                {
                    ChangeTracker.OriginalValues.Remove("MoveOutTROSection");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("MoveOutTROSection", previousValue);
                }
                if (MoveOutTROSection != null && !MoveOutTROSection.ChangeTracker.ChangeTrackingEnabled)
                {
                    MoveOutTROSection.StartTracking();
                }
            }
        }
    
        private void FixupNoGunsEASection(NoGunsEASection previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("NoGunsEASection")
                    && (ChangeTracker.OriginalValues["NoGunsEASection"] == NoGunsEASection))
                {
                    ChangeTracker.OriginalValues.Remove("NoGunsEASection");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("NoGunsEASection", previousValue);
                }
                if (NoGunsEASection != null && !NoGunsEASection.ChangeTracker.ChangeTrackingEnabled)
                {
                    NoGunsEASection.StartTracking();
                }
            }
        }
    
        private void FixupCarposEntrySection(CarposEntrySection previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("CarposEntrySection")
                    && (ChangeTracker.OriginalValues["CarposEntrySection"] == CarposEntrySection))
                {
                    ChangeTracker.OriginalValues.Remove("CarposEntrySection");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("CarposEntrySection", previousValue);
                }
                if (CarposEntrySection != null && !CarposEntrySection.ChangeTracker.ChangeTrackingEnabled)
                {
                    CarposEntrySection.StartTracking();
                }
            }
        }
    
        private void FixupServiceFeesSection(ServiceFeesSection previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ServiceFeesSection")
                    && (ChangeTracker.OriginalValues["ServiceFeesSection"] == ServiceFeesSection))
                {
                    ChangeTracker.OriginalValues.Remove("ServiceFeesSection");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ServiceFeesSection", previousValue);
                }
                if (ServiceFeesSection != null && !ServiceFeesSection.ChangeTracker.ChangeTrackingEnabled)
                {
                    ServiceFeesSection.StartTracking();
                }
            }
        }
    
        private void FixupOtherOrdersTROSection(OtherOrdersTROSection previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("OtherOrdersTROSection")
                    && (ChangeTracker.OriginalValues["OtherOrdersTROSection"] == OtherOrdersTROSection))
                {
                    ChangeTracker.OriginalValues.Remove("OtherOrdersTROSection");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("OtherOrdersTROSection", previousValue);
                }
                if (OtherOrdersTROSection != null && !OtherOrdersTROSection.ChangeTracker.ChangeTrackingEnabled)
                {
                    OtherOrdersTROSection.StartTracking();
                }
            }
        }
    
        private void FixupExpirationSection(ExpirationSection previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ExpirationSection")
                    && (ChangeTracker.OriginalValues["ExpirationSection"] == ExpirationSection))
                {
                    ChangeTracker.OriginalValues.Remove("ExpirationSection");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ExpirationSection", previousValue);
                }
                if (ExpirationSection != null && !ExpirationSection.ChangeTracker.ChangeTrackingEnabled)
                {
                    ExpirationSection.StartTracking();
                }
            }
        }

        #endregion

    }
}
