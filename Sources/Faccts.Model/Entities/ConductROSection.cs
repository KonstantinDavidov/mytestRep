//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Linq.Expressions;
using System.Runtime.Serialization;
using ReactiveUI;
using System.Reactive.Linq;

namespace Faccts.Model.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(ConductTROSection))]
    public partial class ConductROSection : ConductBase, IObjectWithChangeTracker, IReactiveNotifyPropertyChanged, INavigationPropertiesLoadable
    {
        #region Simple Properties
    
        [DataMember]
        public bool AppliedToOtherProtected
        {
            get { return _appliedToOtherProtected; }
            set
            {
                if (_appliedToOtherProtected != value)
                {
    				OnPropertyChanging("AppliedToOtherProtected");
                    _appliedToOtherProtected = value;
                    OnPropertyChanged("AppliedToOtherProtected");
                }
            }
        }
        private bool _appliedToOtherProtected;
    
        [DataMember]
        public bool OtherRequested
        {
            get { return _otherRequested; }
            set
            {
                if (_otherRequested != value)
                {
    				OnPropertyChanging("OtherRequested");
                    _otherRequested = value;
                    OnPropertyChanged("OtherRequested");
                }
            }
        }
        private bool _otherRequested;
    
        [DataMember]
        public string OtherText
        {
            get { return _otherText; }
            set
            {
                if (_otherText != value)
                {
    				OnPropertyChanging("OtherText");
                    _otherText = value;
                    OnPropertyChanged("OtherText");
                }
            }
        }
        private string _otherText;
    
        [DataMember]
        public bool OtherAttached
        {
            get { return _otherAttached; }
            set
            {
                if (_otherAttached != value)
                {
    				OnPropertyChanging("OtherAttached");
                    _otherAttached = value;
                    OnPropertyChanged("OtherAttached");
                }
            }
        }
        private bool _otherAttached;

        #endregion

        #region ChangeTracking
    
        protected override void ClearNavigationProperties()
        {
            base.ClearNavigationProperties();
        }

        #endregion

    }
}
