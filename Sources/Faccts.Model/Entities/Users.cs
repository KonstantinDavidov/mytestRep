//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Linq.Expressions;
using System.Runtime.Serialization;
using ReactiveUI;

namespace Faccts.Model.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Applications))]
    [KnownType(typeof(Memberships))]
    [KnownType(typeof(Profiles))]
    [KnownType(typeof(Roles))]
    public partial class Users: IObjectWithChangeTracker, IReactiveNotifyPropertyChanged, INavigationPropertiesLoadable
    {
    		
    		private MakeObjectReactiveHelper _reactiveHelper;
    
    		public Users()
    		{
    			_reactiveHelper = new MakeObjectReactiveHelper(this);
    			Initialize();
    		}
    
    		partial void Initialize();
    		
    
    		public IObservable<IObservedChange<object, object>> Changed 
    		{
    			get { return _reactiveHelper.Changed; }
    		}
    		public IObservable<IObservedChange<object, object>> Changing 
    		{
    			get { return _reactiveHelper.Changing; }
    		}
    		public IDisposable SuppressChangeNotifications() 
    		{
    			return _reactiveHelper.SuppressChangeNotifications();
    		}
    
    		private PropertyChangingEventHandler _propertyChanging;
    		public event PropertyChangingEventHandler PropertyChanging
    		{
    			add
    			{
    				_propertyChanging += value;
    			}
    			remove
    			{
    				_propertyChanging -= value;
    			}
    		}
    
    		public event EventHandler<LoadingNavigationPropertiesEventArgs> OnNavigationPropertyLoading;
    		protected virtual void RaiseNavigationPropertyLoading(string propertyName)
            {
                if (OnNavigationPropertyLoading != null)
                    OnNavigationPropertyLoading(this, new LoadingNavigationPropertiesEventArgs(propertyName));
            }
    
            protected virtual void RaiseNavigationPropertyLoading<T>(Expression<Func<T>> propertyExpression)
            {
                var body = propertyExpression.Body as MemberExpression;
                if (body == null)
                    throw new ArgumentException("'propertyExpression' should be a member expression");
    
                var expression = body.Expression as ConstantExpression;
                if (expression == null)
                    throw new ArgumentException("'propertyExpression' body should be a constant expression");
    
                object target = Expression.Lambda(expression).Compile().DynamicInvoke();
    
                RaiseNavigationPropertyLoading(body.Member.Name);
            }
    	    #region Simple Properties
    
        [DataMember]
        public System.Guid UserId
        {
            get { return _userId; }
            set
            {
                if (_userId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'UserId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
    				OnPropertyChanging("UserId");
                    _userId = value;
                    OnPropertyChanged("UserId");
                }
            }
        }
        private System.Guid _userId;
    
        [DataMember]
        public System.Guid ApplicationId
        {
            get { return _applicationId; }
            set
            {
                if (_applicationId != value)
                {
                    ChangeTracker.RecordOriginalValue("ApplicationId", _applicationId);
                    if (!IsDeserializing)
                    {
                        if (Applications != null && Applications.ApplicationId != value)
                        {
                            Applications = null;
                        }
                    }
    				OnPropertyChanging("ApplicationId");
                    _applicationId = value;
                    OnPropertyChanged("ApplicationId");
                }
            }
        }
        private System.Guid _applicationId;
    
        [DataMember]
        public string UserName
        {
            get { return _userName; }
            set
            {
                if (_userName != value)
                {
    				OnPropertyChanging("UserName");
                    _userName = value;
                    OnPropertyChanged("UserName");
                }
            }
        }
        private string _userName;
    
        [DataMember]
        public bool IsAnonymous
        {
            get { return _isAnonymous; }
            set
            {
                if (_isAnonymous != value)
                {
    				OnPropertyChanging("IsAnonymous");
                    _isAnonymous = value;
                    OnPropertyChanged("IsAnonymous");
                }
            }
        }
        private bool _isAnonymous;
    
        [DataMember]
        public System.DateTime LastActivityDate
        {
            get { return _lastActivityDate; }
            set
            {
                if (_lastActivityDate != value)
                {
    				OnPropertyChanging("LastActivityDate");
                    _lastActivityDate = value;
                    OnPropertyChanged("LastActivityDate");
                }
            }
        }
        private System.DateTime _lastActivityDate;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public Applications Applications
        {
            get { return _applications; }
            set
            {
                if (!ReferenceEquals(_applications, value))
                {
                    var previousValue = _applications;
    				OnNavigationPropertyChanging("Applications");
                    _applications = value;
                    FixupApplications(previousValue);
                    OnNavigationPropertyChanged("Applications");
                }
            }
        }
        private Applications _applications;
    
        [DataMember]
        public Memberships Memberships
        {
            get { return _memberships; }
            set
            {
                if (!ReferenceEquals(_memberships, value))
                {
                    var previousValue = _memberships;
    				OnNavigationPropertyChanging("Memberships");
                    _memberships = value;
                    FixupMemberships(previousValue);
                    OnNavigationPropertyChanged("Memberships");
                }
            }
        }
        private Memberships _memberships;
    
        [DataMember]
        public Profiles Profiles
        {
            get { return _profiles; }
            set
            {
                if (!ReferenceEquals(_profiles, value))
                {
                    var previousValue = _profiles;
    				OnNavigationPropertyChanging("Profiles");
                    _profiles = value;
                    FixupProfiles(previousValue);
                    OnNavigationPropertyChanged("Profiles");
                }
            }
        }
        private Profiles _profiles;
    
        [DataMember]
        public TrackableCollection<Roles> Roles
        {
            get
            {
                if (_roles == null)
                {
                    _roles = new TrackableCollection<Roles>();
                    _roles.CollectionChanged += FixupRoles;
                }
                return _roles;
            }
            set
            {
                if (!ReferenceEquals(_roles, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
    				OnNavigationPropertyChanging("Roles");
                    if (_roles != null)
                    {
                        _roles.CollectionChanged -= FixupRoles;
                    }
                    _roles = value;
                    if (_roles != null)
                    {
                        _roles.CollectionChanged += FixupRoles;
                    }
                    OnNavigationPropertyChanged("Roles");
                }
            }
        }
        private TrackableCollection<Roles> _roles;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
    	protected virtual void OnPropertyChanging(String propertyName)
        {
            if (_propertyChanging != null)
            {
                _propertyChanging(this, new PropertyChangingEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
    	protected virtual void OnNavigationPropertyChanging(String propertyName)
        {
            if (_propertyChanging != null)
            {
                _propertyChanging(this, new PropertyChangingEventArgs(propertyName));
            }
        }
    
    	public override bool Equals(System.Object obj)
    	{
    		// If parameter is null return false.
            if (obj == null)
            {
                return false;
            }
    
            // If parameter cannot be cast to Point return false.
            Users p = obj as Users;
            if ((System.Object)p == null)
            {
                return false;
            }
    
    			if (this.UserId != p.UserId)
    				return false;
    			if (this.ApplicationId != p.ApplicationId)
    				return false;
    			if (this.UserName != p.UserName)
    				return false;
    			if (this.IsAnonymous != p.IsAnonymous)
    				return false;
    			if (this.LastActivityDate != p.LastActivityDate)
    				return false;
    
    		return true;
    	}
    
    	public override int GetHashCode()
    	{
    		int hashCode = 1;
    			
    		hashCode ^= this.UserId.GetHashCode();
    			
    		hashCode ^= this.ApplicationId.GetHashCode();
    		if (this.UserName != null)
    		{
    			hashCode ^= this.UserName.GetHashCode();
    		}
    			
    		hashCode ^= this.IsAnonymous.GetHashCode();
    			
    		hashCode ^= this.LastActivityDate.GetHashCode();
    		return hashCode;
    	}
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Applications = null;
            Memberships = null;
            Profiles = null;
            Roles.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupApplications(Applications previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Users.Contains(this))
            {
                previousValue.Users.Remove(this);
            }
    
            if (Applications != null)
            {
                Applications.Users.Add(this);
    
                ApplicationId = Applications.ApplicationId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Applications")
                    && (ChangeTracker.OriginalValues["Applications"] == Applications))
                {
                    ChangeTracker.OriginalValues.Remove("Applications");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Applications", previousValue);
                }
                if (Applications != null && !Applications.ChangeTracker.ChangeTrackingEnabled)
                {
                    Applications.StartTracking();
                }
            }
        }
    
        private void FixupMemberships(Memberships previousValue)
        {
            // This is the principal end in an association that performs cascade deletes.
            // Update the event listener to refer to the new dependent.
            if (previousValue != null)
            {
                ChangeTracker.ObjectStateChanging -= previousValue.HandleCascadeDelete;
            }
    
            if (Memberships != null)
            {
                ChangeTracker.ObjectStateChanging += Memberships.HandleCascadeDelete;
            }
    
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && ReferenceEquals(previousValue.Users, this))
            {
                previousValue.Users = null;
            }
    
            if (Memberships != null)
            {
                Memberships.Users = this;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Memberships")
                    && (ChangeTracker.OriginalValues["Memberships"] == Memberships))
                {
                    ChangeTracker.OriginalValues.Remove("Memberships");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Memberships", previousValue);
                    // This is the principal end of an identifying association, so the dependent must be deleted when the relationship is removed.
                    // If the current state of the dependent is Added, the relationship can be changed without causing the dependent to be deleted.
                    if (previousValue != null && previousValue.ChangeTracker.State != ObjectState.Added)
                    {
                        previousValue.MarkAsDeleted();
                    }
                }
                if (Memberships != null && !Memberships.ChangeTracker.ChangeTrackingEnabled)
                {
                    Memberships.StartTracking();
                }
            }
        }
    
        private void FixupProfiles(Profiles previousValue)
        {
            // This is the principal end in an association that performs cascade deletes.
            // Update the event listener to refer to the new dependent.
            if (previousValue != null)
            {
                ChangeTracker.ObjectStateChanging -= previousValue.HandleCascadeDelete;
            }
    
            if (Profiles != null)
            {
                ChangeTracker.ObjectStateChanging += Profiles.HandleCascadeDelete;
            }
    
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && ReferenceEquals(previousValue.Users, this))
            {
                previousValue.Users = null;
            }
    
            if (Profiles != null)
            {
                Profiles.Users = this;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Profiles")
                    && (ChangeTracker.OriginalValues["Profiles"] == Profiles))
                {
                    ChangeTracker.OriginalValues.Remove("Profiles");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Profiles", previousValue);
                    // This is the principal end of an identifying association, so the dependent must be deleted when the relationship is removed.
                    // If the current state of the dependent is Added, the relationship can be changed without causing the dependent to be deleted.
                    if (previousValue != null && previousValue.ChangeTracker.State != ObjectState.Added)
                    {
                        previousValue.MarkAsDeleted();
                    }
                }
                if (Profiles != null && !Profiles.ChangeTracker.ChangeTrackingEnabled)
                {
                    Profiles.StartTracking();
                }
            }
        }
    
        private void FixupRoles(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Roles item in e.NewItems)
                {
                    item.Users.Add(this);
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Roles", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Roles item in e.OldItems)
                {
                    if (item.Users.Contains(this))
                    {
                        item.Users.Remove(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Roles", item);
                    }
                }
            }
        }

        #endregion

    }
}
