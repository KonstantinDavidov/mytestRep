//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Linq.Expressions;
using System.Runtime.Serialization;
using ReactiveUI;

namespace Faccts.Model.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Attorneys))]
    [KnownType(typeof(CaseRecord))]
    [KnownType(typeof(Designation))]
    [KnownType(typeof(EyesColor))]
    [KnownType(typeof(HairColor))]
    [KnownType(typeof(Race))]
    [KnownType(typeof(Sex))]
    [KnownType(typeof(Interpreters))]
    [KnownType(typeof(Witnesses))]
    [KnownType(typeof(CourtDocketRecord))]
    public partial class CourtParty: IObjectWithChangeTracker, IReactiveNotifyPropertyChanged, INavigationPropertiesLoadable
    {
    		
    		private MakeObjectReactiveHelper _reactiveHelper;
    
    		public CourtParty()
    		{
    			_reactiveHelper = new MakeObjectReactiveHelper(this);
    			Initialize();
    		}
    
    		partial void Initialize();
    		
    
    		public IObservable<IObservedChange<object, object>> Changed 
    		{
    			get { return _reactiveHelper.Changed; }
    		}
    		public IObservable<IObservedChange<object, object>> Changing 
    		{
    			get { return _reactiveHelper.Changing; }
    		}
    		public IDisposable SuppressChangeNotifications() 
    		{
    			return _reactiveHelper.SuppressChangeNotifications();
    		}
    
    		private PropertyChangingEventHandler _propertyChanging;
    		public event PropertyChangingEventHandler PropertyChanging
    		{
    			add
    			{
    				_propertyChanging += value;
    			}
    			remove
    			{
    				_propertyChanging -= value;
    			}
    		}
    
    		public event EventHandler<LoadingNavigationPropertiesEventArgs> OnNavigationPropertyLoading;
    		protected virtual void RaiseNavigationPropertyLoading(string propertyName)
            {
                if (OnNavigationPropertyLoading != null)
                    OnNavigationPropertyLoading(this, new LoadingNavigationPropertiesEventArgs(propertyName));
            }
    
            protected virtual void RaiseNavigationPropertyLoading<T>(Expression<Func<T>> propertyExpression)
            {
                var body = propertyExpression.Body as MemberExpression;
                if (body == null)
                    throw new ArgumentException("'propertyExpression' should be a member expression");
    
                var expression = body.Expression as ConstantExpression;
                if (expression == null)
                    throw new ArgumentException("'propertyExpression' body should be a constant expression");
    
                object target = Expression.Lambda(expression).Compile().DynamicInvoke();
    
                RaiseNavigationPropertyLoading(body.Member.Name);
            }
    	    #region Simple Properties
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
    				OnPropertyChanging("Id");
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public string FirstName
        {
            get { return _firstName; }
            set
            {
                if (_firstName != value)
                {
    				OnPropertyChanging("FirstName");
                    _firstName = value;
                    OnPropertyChanged("FirstName");
                }
            }
        }
        private string _firstName;
    
        [DataMember]
        public string MiddleName
        {
            get { return _middleName; }
            set
            {
                if (_middleName != value)
                {
    				OnPropertyChanging("MiddleName");
                    _middleName = value;
                    OnPropertyChanged("MiddleName");
                }
            }
        }
        private string _middleName;
    
        [DataMember]
        public string LastName
        {
            get { return _lastName; }
            set
            {
                if (_lastName != value)
                {
    				OnPropertyChanging("LastName");
                    _lastName = value;
                    OnPropertyChanged("LastName");
                }
            }
        }
        private string _lastName;
    
        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
    				OnPropertyChanging("Description");
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public string Address
        {
            get { return _address; }
            set
            {
                if (_address != value)
                {
    				OnPropertyChanging("Address");
                    _address = value;
                    OnPropertyChanged("Address");
                }
            }
        }
        private string _address;
    
        [DataMember]
        public string City
        {
            get { return _city; }
            set
            {
                if (_city != value)
                {
    				OnPropertyChanging("City");
                    _city = value;
                    OnPropertyChanged("City");
                }
            }
        }
        private string _city;
    
        [DataMember]
        public string State
        {
            get { return _state; }
            set
            {
                if (_state != value)
                {
    				OnPropertyChanging("State");
                    _state = value;
                    OnPropertyChanged("State");
                }
            }
        }
        private string _state;
    
        [DataMember]
        public string ZipCode
        {
            get { return _zipCode; }
            set
            {
                if (_zipCode != value)
                {
    				OnPropertyChanging("ZipCode");
                    _zipCode = value;
                    OnPropertyChanged("ZipCode");
                }
            }
        }
        private string _zipCode;
    
        [DataMember]
        public string Phone
        {
            get { return _phone; }
            set
            {
                if (_phone != value)
                {
    				OnPropertyChanging("Phone");
                    _phone = value;
                    OnPropertyChanged("Phone");
                }
            }
        }
        private string _phone;
    
        [DataMember]
        public string Fax
        {
            get { return _fax; }
            set
            {
                if (_fax != value)
                {
    				OnPropertyChanging("Fax");
                    _fax = value;
                    OnPropertyChanged("Fax");
                }
            }
        }
        private string _fax;
    
        [DataMember]
        public decimal Weight
        {
            get { return _weight; }
            set
            {
                if (_weight != value)
                {
    				OnPropertyChanging("Weight");
                    _weight = value;
                    OnPropertyChanged("Weight");
                }
            }
        }
        private decimal _weight;
    
        [DataMember]
        public decimal HeightFt
        {
            get { return _heightFt; }
            set
            {
                if (_heightFt != value)
                {
    				OnPropertyChanging("HeightFt");
                    _heightFt = value;
                    OnPropertyChanged("HeightFt");
                }
            }
        }
        private decimal _heightFt;
    
        [DataMember]
        public decimal HeightIns
        {
            get { return _heightIns; }
            set
            {
                if (_heightIns != value)
                {
    				OnPropertyChanging("HeightIns");
                    _heightIns = value;
                    OnPropertyChanged("HeightIns");
                }
            }
        }
        private decimal _heightIns;
    
        [DataMember]
        public System.DateTime DateOfBirth
        {
            get { return _dateOfBirth; }
            set
            {
                if (_dateOfBirth != value)
                {
    				OnPropertyChanging("DateOfBirth");
                    _dateOfBirth = value;
                    OnPropertyChanged("DateOfBirth");
                }
            }
        }
        private System.DateTime _dateOfBirth;
    
        [DataMember]
        public int Age
        {
            get { return _age; }
            set
            {
                if (_age != value)
                {
    				OnPropertyChanging("Age");
                    _age = value;
                    OnPropertyChanged("Age");
                }
            }
        }
        private int _age;
    
        [DataMember]
        public Nullable<bool> HasAttorney
        {
            get { return _hasAttorney; }
            set
            {
                if (_hasAttorney != value)
                {
    				OnPropertyChanging("HasAttorney");
                    _hasAttorney = value;
                    OnPropertyChanged("HasAttorney");
                }
            }
        }
        private Nullable<bool> _hasAttorney;
    
        [DataMember]
        public int Designation_Id
        {
            get { return _designation_Id; }
            set
            {
                if (_designation_Id != value)
                {
                    ChangeTracker.RecordOriginalValue("Designation_Id", _designation_Id);
                    if (!IsDeserializing)
                    {
                        if (Designation != null && Designation.Id != value)
                        {
                            Designation = null;
                        }
                    }
    				OnPropertyChanging("Designation_Id");
                    _designation_Id = value;
                    OnPropertyChanged("Designation_Id");
                }
            }
        }
        private int _designation_Id;
    
        [DataMember]
        public int Sex_Id
        {
            get { return _sex_Id; }
            set
            {
                if (_sex_Id != value)
                {
                    ChangeTracker.RecordOriginalValue("Sex_Id", _sex_Id);
                    if (!IsDeserializing)
                    {
                        if (Sex != null && Sex.Id != value)
                        {
                            Sex = null;
                        }
                    }
    				OnPropertyChanging("Sex_Id");
                    _sex_Id = value;
                    OnPropertyChanged("Sex_Id");
                }
            }
        }
        private int _sex_Id;
    
        [DataMember]
        public int HairColor_Id
        {
            get { return _hairColor_Id; }
            set
            {
                if (_hairColor_Id != value)
                {
                    ChangeTracker.RecordOriginalValue("HairColor_Id", _hairColor_Id);
                    if (!IsDeserializing)
                    {
                        if (HairColor != null && HairColor.Id != value)
                        {
                            HairColor = null;
                        }
                    }
    				OnPropertyChanging("HairColor_Id");
                    _hairColor_Id = value;
                    OnPropertyChanged("HairColor_Id");
                }
            }
        }
        private int _hairColor_Id;
    
        [DataMember]
        public int EyesColor_Id
        {
            get { return _eyesColor_Id; }
            set
            {
                if (_eyesColor_Id != value)
                {
                    ChangeTracker.RecordOriginalValue("EyesColor_Id", _eyesColor_Id);
                    if (!IsDeserializing)
                    {
                        if (EyesColor != null && EyesColor.Id != value)
                        {
                            EyesColor = null;
                        }
                    }
    				OnPropertyChanging("EyesColor_Id");
                    _eyesColor_Id = value;
                    OnPropertyChanged("EyesColor_Id");
                }
            }
        }
        private int _eyesColor_Id;
    
        [DataMember]
        public int Race_Id
        {
            get { return _race_Id; }
            set
            {
                if (_race_Id != value)
                {
                    ChangeTracker.RecordOriginalValue("Race_Id", _race_Id);
                    if (!IsDeserializing)
                    {
                        if (Race != null && Race.Id != value)
                        {
                            Race = null;
                        }
                    }
    				OnPropertyChanging("Race_Id");
                    _race_Id = value;
                    OnPropertyChanged("Race_Id");
                }
            }
        }
        private int _race_Id;
    
        [DataMember]
        public Nullable<int> Attorney_Id
        {
            get { return _attorney_Id; }
            set
            {
                if (_attorney_Id != value)
                {
                    ChangeTracker.RecordOriginalValue("Attorney_Id", _attorney_Id);
                    if (!IsDeserializing)
                    {
                        if (Attorneys != null && Attorneys.Id != value)
                        {
                            Attorneys = null;
                        }
                    }
    				OnPropertyChanging("Attorney_Id");
                    _attorney_Id = value;
                    OnPropertyChanged("Attorney_Id");
                }
            }
        }
        private Nullable<int> _attorney_Id;
    
        [DataMember]
        public Nullable<int> CaseRecordByCourtParty1_Id
        {
            get { return _caseRecordByCourtParty1_Id; }
            set
            {
                if (_caseRecordByCourtParty1_Id != value)
                {
                    ChangeTracker.RecordOriginalValue("CaseRecordByCourtParty1_Id", _caseRecordByCourtParty1_Id);
                    if (!IsDeserializing)
                    {
                        if (CaseRecord2 != null && CaseRecord2.Id != value)
                        {
                            CaseRecord2 = null;
                        }
                    }
    				OnPropertyChanging("CaseRecordByCourtParty1_Id");
                    _caseRecordByCourtParty1_Id = value;
                    OnPropertyChanged("CaseRecordByCourtParty1_Id");
                }
            }
        }
        private Nullable<int> _caseRecordByCourtParty1_Id;
    
        [DataMember]
        public Nullable<int> CaseRecordByCourtParty2_Id
        {
            get { return _caseRecordByCourtParty2_Id; }
            set
            {
                if (_caseRecordByCourtParty2_Id != value)
                {
                    ChangeTracker.RecordOriginalValue("CaseRecordByCourtParty2_Id", _caseRecordByCourtParty2_Id);
                    if (!IsDeserializing)
                    {
                        if (CaseRecord3 != null && CaseRecord3.Id != value)
                        {
                            CaseRecord3 = null;
                        }
                    }
    				OnPropertyChanging("CaseRecordByCourtParty2_Id");
                    _caseRecordByCourtParty2_Id = value;
                    OnPropertyChanged("CaseRecordByCourtParty2_Id");
                }
            }
        }
        private Nullable<int> _caseRecordByCourtParty2_Id;
    
        [DataMember]
        public int ParticipantRole1
        {
            get { return _participantRole1; }
            set
            {
                if (_participantRole1 != value)
                {
    				OnPropertyChanging("ParticipantRole1");
                    _participantRole1 = value;
                    OnPropertyChanged("ParticipantRole1");
                }
            }
        }
        private int _participantRole1;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public Attorneys Attorneys
        {
            get { return _attorneys; }
            set
            {
                if (!ReferenceEquals(_attorneys, value))
                {
                    var previousValue = _attorneys;
    				OnNavigationPropertyChanging("Attorneys");
                    _attorneys = value;
                    FixupAttorneys(previousValue);
                    OnNavigationPropertyChanged("Attorneys");
                }
            }
        }
        private Attorneys _attorneys;
    
        [DataMember]
        public TrackableCollection<CaseRecord> CaseRecord
        {
            get
            {
                if (_caseRecord == null)
                {
                    _caseRecord = new TrackableCollection<CaseRecord>();
                    _caseRecord.CollectionChanged += FixupCaseRecord;
                }
                return _caseRecord;
            }
            set
            {
                if (!ReferenceEquals(_caseRecord, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
    				OnNavigationPropertyChanging("CaseRecord");
                    if (_caseRecord != null)
                    {
                        _caseRecord.CollectionChanged -= FixupCaseRecord;
                    }
                    _caseRecord = value;
                    if (_caseRecord != null)
                    {
                        _caseRecord.CollectionChanged += FixupCaseRecord;
                    }
                    OnNavigationPropertyChanged("CaseRecord");
                }
            }
        }
        private TrackableCollection<CaseRecord> _caseRecord;
    
        [DataMember]
        public TrackableCollection<CaseRecord> CaseRecord1
        {
            get
            {
                if (_caseRecord1 == null)
                {
                    _caseRecord1 = new TrackableCollection<CaseRecord>();
                    _caseRecord1.CollectionChanged += FixupCaseRecord1;
                }
                return _caseRecord1;
            }
            set
            {
                if (!ReferenceEquals(_caseRecord1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
    				OnNavigationPropertyChanging("CaseRecord1");
                    if (_caseRecord1 != null)
                    {
                        _caseRecord1.CollectionChanged -= FixupCaseRecord1;
                    }
                    _caseRecord1 = value;
                    if (_caseRecord1 != null)
                    {
                        _caseRecord1.CollectionChanged += FixupCaseRecord1;
                    }
                    OnNavigationPropertyChanged("CaseRecord1");
                }
            }
        }
        private TrackableCollection<CaseRecord> _caseRecord1;
    
        [DataMember]
        public CaseRecord CaseRecord2
        {
            get { return _caseRecord2; }
            set
            {
                if (!ReferenceEquals(_caseRecord2, value))
                {
                    var previousValue = _caseRecord2;
    				OnNavigationPropertyChanging("CaseRecord2");
                    _caseRecord2 = value;
                    FixupCaseRecord2(previousValue);
                    OnNavigationPropertyChanged("CaseRecord2");
                }
            }
        }
        private CaseRecord _caseRecord2;
    
        [DataMember]
        public CaseRecord CaseRecord3
        {
            get { return _caseRecord3; }
            set
            {
                if (!ReferenceEquals(_caseRecord3, value))
                {
                    var previousValue = _caseRecord3;
    				OnNavigationPropertyChanging("CaseRecord3");
                    _caseRecord3 = value;
                    FixupCaseRecord3(previousValue);
                    OnNavigationPropertyChanged("CaseRecord3");
                }
            }
        }
        private CaseRecord _caseRecord3;
    
        [DataMember]
        public Designation Designation
        {
            get { return _designation; }
            set
            {
                if (!ReferenceEquals(_designation, value))
                {
                    var previousValue = _designation;
    				OnNavigationPropertyChanging("Designation");
                    _designation = value;
                    FixupDesignation(previousValue);
                    OnNavigationPropertyChanged("Designation");
                }
            }
        }
        private Designation _designation;
    
        [DataMember]
        public EyesColor EyesColor
        {
            get { return _eyesColor; }
            set
            {
                if (!ReferenceEquals(_eyesColor, value))
                {
                    var previousValue = _eyesColor;
    				OnNavigationPropertyChanging("EyesColor");
                    _eyesColor = value;
                    FixupEyesColor(previousValue);
                    OnNavigationPropertyChanged("EyesColor");
                }
            }
        }
        private EyesColor _eyesColor;
    
        [DataMember]
        public HairColor HairColor
        {
            get { return _hairColor; }
            set
            {
                if (!ReferenceEquals(_hairColor, value))
                {
                    var previousValue = _hairColor;
    				OnNavigationPropertyChanging("HairColor");
                    _hairColor = value;
                    FixupHairColor(previousValue);
                    OnNavigationPropertyChanged("HairColor");
                }
            }
        }
        private HairColor _hairColor;
    
        [DataMember]
        public Race Race
        {
            get { return _race; }
            set
            {
                if (!ReferenceEquals(_race, value))
                {
                    var previousValue = _race;
    				OnNavigationPropertyChanging("Race");
                    _race = value;
                    FixupRace(previousValue);
                    OnNavigationPropertyChanged("Race");
                }
            }
        }
        private Race _race;
    
        [DataMember]
        public Sex Sex
        {
            get { return _sex; }
            set
            {
                if (!ReferenceEquals(_sex, value))
                {
                    var previousValue = _sex;
    				OnNavigationPropertyChanging("Sex");
                    _sex = value;
                    FixupSex(previousValue);
                    OnNavigationPropertyChanged("Sex");
                }
            }
        }
        private Sex _sex;
    
        [DataMember]
        public TrackableCollection<Interpreters> Interpreters
        {
            get
            {
                if (_interpreters == null)
                {
                    _interpreters = new TrackableCollection<Interpreters>();
                    _interpreters.CollectionChanged += FixupInterpreters;
                }
                return _interpreters;
            }
            set
            {
                if (!ReferenceEquals(_interpreters, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
    				OnNavigationPropertyChanging("Interpreters");
                    if (_interpreters != null)
                    {
                        _interpreters.CollectionChanged -= FixupInterpreters;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (Interpreters item in _interpreters)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _interpreters = value;
                    if (_interpreters != null)
                    {
                        _interpreters.CollectionChanged += FixupInterpreters;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (Interpreters item in _interpreters)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("Interpreters");
                }
            }
        }
        private TrackableCollection<Interpreters> _interpreters;
    
        [DataMember]
        public TrackableCollection<Witnesses> Witnesses
        {
            get
            {
                if (_witnesses == null)
                {
                    _witnesses = new TrackableCollection<Witnesses>();
                    _witnesses.CollectionChanged += FixupWitnesses;
                }
                return _witnesses;
            }
            set
            {
                if (!ReferenceEquals(_witnesses, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
    				OnNavigationPropertyChanging("Witnesses");
                    if (_witnesses != null)
                    {
                        _witnesses.CollectionChanged -= FixupWitnesses;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (Witnesses item in _witnesses)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _witnesses = value;
                    if (_witnesses != null)
                    {
                        _witnesses.CollectionChanged += FixupWitnesses;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (Witnesses item in _witnesses)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("Witnesses");
                }
            }
        }
        private TrackableCollection<Witnesses> _witnesses;
    
        [DataMember]
        public TrackableCollection<CourtDocketRecord> CourtDocketRecordsByParty1
        {
            get
            {
                if (_courtDocketRecordsByParty1 == null)
                {
                    _courtDocketRecordsByParty1 = new TrackableCollection<CourtDocketRecord>();
                    _courtDocketRecordsByParty1.CollectionChanged += FixupCourtDocketRecordsByParty1;
                }
                return _courtDocketRecordsByParty1;
            }
            set
            {
                if (!ReferenceEquals(_courtDocketRecordsByParty1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
    				OnNavigationPropertyChanging("CourtDocketRecordsByParty1");
                    if (_courtDocketRecordsByParty1 != null)
                    {
                        _courtDocketRecordsByParty1.CollectionChanged -= FixupCourtDocketRecordsByParty1;
                    }
                    _courtDocketRecordsByParty1 = value;
                    if (_courtDocketRecordsByParty1 != null)
                    {
                        _courtDocketRecordsByParty1.CollectionChanged += FixupCourtDocketRecordsByParty1;
                    }
                    OnNavigationPropertyChanged("CourtDocketRecordsByParty1");
                }
            }
        }
        private TrackableCollection<CourtDocketRecord> _courtDocketRecordsByParty1;
    
        [DataMember]
        public TrackableCollection<CourtDocketRecord> CourtDocketRecordsByParty2
        {
            get
            {
                if (_courtDocketRecordsByParty2 == null)
                {
                    _courtDocketRecordsByParty2 = new TrackableCollection<CourtDocketRecord>();
                    _courtDocketRecordsByParty2.CollectionChanged += FixupCourtDocketRecordsByParty2;
                }
                return _courtDocketRecordsByParty2;
            }
            set
            {
                if (!ReferenceEquals(_courtDocketRecordsByParty2, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
    				OnNavigationPropertyChanging("CourtDocketRecordsByParty2");
                    if (_courtDocketRecordsByParty2 != null)
                    {
                        _courtDocketRecordsByParty2.CollectionChanged -= FixupCourtDocketRecordsByParty2;
                    }
                    _courtDocketRecordsByParty2 = value;
                    if (_courtDocketRecordsByParty2 != null)
                    {
                        _courtDocketRecordsByParty2.CollectionChanged += FixupCourtDocketRecordsByParty2;
                    }
                    OnNavigationPropertyChanged("CourtDocketRecordsByParty2");
                }
            }
        }
        private TrackableCollection<CourtDocketRecord> _courtDocketRecordsByParty2;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
    	protected virtual void OnPropertyChanging(String propertyName)
        {
            if (_propertyChanging != null)
            {
                _propertyChanging(this, new PropertyChangingEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
    	protected virtual void OnNavigationPropertyChanging(String propertyName)
        {
            if (_propertyChanging != null)
            {
                _propertyChanging(this, new PropertyChangingEventArgs(propertyName));
            }
        }
    
    	
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Attorneys = null;
            CaseRecord.Clear();
            CaseRecord1.Clear();
            CaseRecord2 = null;
            CaseRecord3 = null;
            Designation = null;
            EyesColor = null;
            HairColor = null;
            Race = null;
            Sex = null;
            Interpreters.Clear();
            Witnesses.Clear();
            CourtDocketRecordsByParty1.Clear();
            CourtDocketRecordsByParty2.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupAttorneys(Attorneys previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CourtParty.Contains(this))
            {
                previousValue.CourtParty.Remove(this);
            }
    
            if (Attorneys != null)
            {
                Attorneys.CourtParty.Add(this);
    
                Attorney_Id = Attorneys.Id;
            }
            else if (!skipKeys)
            {
                Attorney_Id = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Attorneys")
                    && (ChangeTracker.OriginalValues["Attorneys"] == Attorneys))
                {
                    ChangeTracker.OriginalValues.Remove("Attorneys");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Attorneys", previousValue);
                }
                if (Attorneys != null && !Attorneys.ChangeTracker.ChangeTrackingEnabled)
                {
                    Attorneys.StartTracking();
                }
            }
        }
    
        private void FixupCaseRecord2(CaseRecord previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CourtParty2.Contains(this))
            {
                previousValue.CourtParty2.Remove(this);
            }
    
            if (CaseRecord2 != null)
            {
                CaseRecord2.CourtParty2.Add(this);
    
                CaseRecordByCourtParty1_Id = CaseRecord2.Id;
            }
            else if (!skipKeys)
            {
                CaseRecordByCourtParty1_Id = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("CaseRecord2")
                    && (ChangeTracker.OriginalValues["CaseRecord2"] == CaseRecord2))
                {
                    ChangeTracker.OriginalValues.Remove("CaseRecord2");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("CaseRecord2", previousValue);
                }
                if (CaseRecord2 != null && !CaseRecord2.ChangeTracker.ChangeTrackingEnabled)
                {
                    CaseRecord2.StartTracking();
                }
            }
        }
    
        private void FixupCaseRecord3(CaseRecord previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CourtParty3.Contains(this))
            {
                previousValue.CourtParty3.Remove(this);
            }
    
            if (CaseRecord3 != null)
            {
                CaseRecord3.CourtParty3.Add(this);
    
                CaseRecordByCourtParty2_Id = CaseRecord3.Id;
            }
            else if (!skipKeys)
            {
                CaseRecordByCourtParty2_Id = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("CaseRecord3")
                    && (ChangeTracker.OriginalValues["CaseRecord3"] == CaseRecord3))
                {
                    ChangeTracker.OriginalValues.Remove("CaseRecord3");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("CaseRecord3", previousValue);
                }
                if (CaseRecord3 != null && !CaseRecord3.ChangeTracker.ChangeTrackingEnabled)
                {
                    CaseRecord3.StartTracking();
                }
            }
        }
    
        private void FixupDesignation(Designation previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CourtParty.Contains(this))
            {
                previousValue.CourtParty.Remove(this);
            }
    
            if (Designation != null)
            {
                Designation.CourtParty.Add(this);
    
                Designation_Id = Designation.Id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Designation")
                    && (ChangeTracker.OriginalValues["Designation"] == Designation))
                {
                    ChangeTracker.OriginalValues.Remove("Designation");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Designation", previousValue);
                }
                if (Designation != null && !Designation.ChangeTracker.ChangeTrackingEnabled)
                {
                    Designation.StartTracking();
                }
            }
        }
    
        private void FixupEyesColor(EyesColor previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CourtParty.Contains(this))
            {
                previousValue.CourtParty.Remove(this);
            }
    
            if (EyesColor != null)
            {
                EyesColor.CourtParty.Add(this);
    
                EyesColor_Id = EyesColor.Id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("EyesColor")
                    && (ChangeTracker.OriginalValues["EyesColor"] == EyesColor))
                {
                    ChangeTracker.OriginalValues.Remove("EyesColor");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("EyesColor", previousValue);
                }
                if (EyesColor != null && !EyesColor.ChangeTracker.ChangeTrackingEnabled)
                {
                    EyesColor.StartTracking();
                }
            }
        }
    
        private void FixupHairColor(HairColor previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CourtParty.Contains(this))
            {
                previousValue.CourtParty.Remove(this);
            }
    
            if (HairColor != null)
            {
                HairColor.CourtParty.Add(this);
    
                HairColor_Id = HairColor.Id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("HairColor")
                    && (ChangeTracker.OriginalValues["HairColor"] == HairColor))
                {
                    ChangeTracker.OriginalValues.Remove("HairColor");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("HairColor", previousValue);
                }
                if (HairColor != null && !HairColor.ChangeTracker.ChangeTrackingEnabled)
                {
                    HairColor.StartTracking();
                }
            }
        }
    
        private void FixupRace(Race previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CourtParty.Contains(this))
            {
                previousValue.CourtParty.Remove(this);
            }
    
            if (Race != null)
            {
                Race.CourtParty.Add(this);
    
                Race_Id = Race.Id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Race")
                    && (ChangeTracker.OriginalValues["Race"] == Race))
                {
                    ChangeTracker.OriginalValues.Remove("Race");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Race", previousValue);
                }
                if (Race != null && !Race.ChangeTracker.ChangeTrackingEnabled)
                {
                    Race.StartTracking();
                }
            }
        }
    
        private void FixupSex(Sex previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CourtParty.Contains(this))
            {
                previousValue.CourtParty.Remove(this);
            }
    
            if (Sex != null)
            {
                Sex.CourtParty.Add(this);
    
                Sex_Id = Sex.Id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Sex")
                    && (ChangeTracker.OriginalValues["Sex"] == Sex))
                {
                    ChangeTracker.OriginalValues.Remove("Sex");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Sex", previousValue);
                }
                if (Sex != null && !Sex.ChangeTracker.ChangeTrackingEnabled)
                {
                    Sex.StartTracking();
                }
            }
        }
    
        private void FixupCaseRecord(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CaseRecord item in e.NewItems)
                {
                    item.CourtParty = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CaseRecord", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CaseRecord item in e.OldItems)
                {
                    if (ReferenceEquals(item.CourtParty, this))
                    {
                        item.CourtParty = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CaseRecord", item);
                    }
                }
            }
        }
    
        private void FixupCaseRecord1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CaseRecord item in e.NewItems)
                {
                    item.CourtParty1 = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CaseRecord1", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CaseRecord item in e.OldItems)
                {
                    if (ReferenceEquals(item.CourtParty1, this))
                    {
                        item.CourtParty1 = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CaseRecord1", item);
                    }
                }
            }
        }
    
        private void FixupInterpreters(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Interpreters item in e.NewItems)
                {
                    item.CourtParty = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Interpreters", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Interpreters item in e.OldItems)
                {
                    if (ReferenceEquals(item.CourtParty, this))
                    {
                        item.CourtParty = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Interpreters", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupWitnesses(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Witnesses item in e.NewItems)
                {
                    item.CourtParty = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Witnesses", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Witnesses item in e.OldItems)
                {
                    if (ReferenceEquals(item.CourtParty, this))
                    {
                        item.CourtParty = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Witnesses", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupCourtDocketRecordsByParty1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CourtDocketRecord item in e.NewItems)
                {
                    item.Party1 = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CourtDocketRecordsByParty1", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CourtDocketRecord item in e.OldItems)
                {
                    if (ReferenceEquals(item.Party1, this))
                    {
                        item.Party1 = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CourtDocketRecordsByParty1", item);
                    }
                }
            }
        }
    
        private void FixupCourtDocketRecordsByParty2(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CourtDocketRecord item in e.NewItems)
                {
                    item.Party2 = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CourtDocketRecordsByParty2", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CourtDocketRecord item in e.OldItems)
                {
                    if (ReferenceEquals(item.Party2, this))
                    {
                        item.Party2 = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CourtDocketRecordsByParty2", item);
                    }
                }
            }
        }

        #endregion

    }
}
