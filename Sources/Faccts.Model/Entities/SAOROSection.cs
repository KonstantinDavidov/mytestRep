//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Linq.Expressions;
using System.Runtime.Serialization;
using ReactiveUI;
using System.Reactive.Linq;

namespace Faccts.Model.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(SAOTROSection))]
    public partial class SAOROSection: IObjectWithChangeTracker, IReactiveNotifyPropertyChanged, INavigationPropertiesLoadable
    {
    		
    		private MakeObjectReactiveHelper _reactiveHelper;
    
    		public SAOROSection()
    		{
    			_reactiveHelper = new MakeObjectReactiveHelper(this);
    			Initialize();
    			Observable.FromEvent<EventHandler<ObjectStateChangingEventArgs>, ObjectStateChangingEventArgs>(
    			handler =>
    				{
    					EventHandler<ObjectStateChangingEventArgs> eh = (sender, e) => handler(e);
    					return eh;
    				},
    				handler =>  ChangeTracker.ObjectStateChanging += handler,
    				handler =>  ChangeTracker.ObjectStateChanging -= handler
    			)
    			.Subscribe(e =>
    				{
    					if(e.NewState == ObjectState.Unchanged)
    					{
    						IsDirty = false;
    					}
    				}
    			);
    			Observable.Merge<Object>(
    				this.ObservableForProperty(x => x.Id)
    				,this.ObservableForProperty(x => x.Requested)
    				,this.ObservableForProperty(x => x.Distance)
    				,this.ObservableForProperty(x => x.FromPerson)
    				,this.ObservableForProperty(x => x.FromWork)
    				,this.ObservableForProperty(x => x.FromChildSchool)
    				,this.ObservableForProperty(x => x.FromHome)
    				,this.ObservableForProperty(x => x.FromVehicle)
    				,this.ObservableForProperty(x => x.FromChildCare)
    				,this.ObservableForProperty(x => x.FromOtherProtected)
    				,this.ObservableForProperty(x => x.OtherRequested)
    				,this.ObservableForProperty(x => x.OtherText)
    			).
    			Subscribe(_ =>
    			{
    				if (ChangeTracker.State != ObjectState.Unchanged)
    				{
    					IsDirty = true;
    				}
    			}
    			);
    		}
    
    		partial void Initialize();
    		
    
    
    		private bool _isDirty;
    		public bool IsDirty
    		{
    			get
    			{
    				return _isDirty;
    			}
    			set
    			{
    				if (_isDirty == value)
    					return;
    				OnPropertyChanging("IsDirty");
    				_isDirty = value;
    				OnPropertyChanged("IsDirty");
    			}
    		}
    				
    
    		public IObservable<IObservedChange<object, object>> Changed 
    		{
    			get { return _reactiveHelper.Changed; }
    		}
    		public IObservable<IObservedChange<object, object>> Changing 
    		{
    			get { return _reactiveHelper.Changing; }
    		}
    		public IDisposable SuppressChangeNotifications() 
    		{
    			return _reactiveHelper.SuppressChangeNotifications();
    		}
    
    		private PropertyChangingEventHandler _propertyChanging;
    		public event PropertyChangingEventHandler PropertyChanging
    		{
    			add
    			{
    				_propertyChanging += value;
    			}
    			remove
    			{
    				_propertyChanging -= value;
    			}
    		}
    
    		public event EventHandler<LoadingNavigationPropertiesEventArgs> OnNavigationPropertyLoading;
    		protected virtual void RaiseNavigationPropertyLoading(string propertyName)
            {
                if (OnNavigationPropertyLoading != null)
                    OnNavigationPropertyLoading(this, new LoadingNavigationPropertiesEventArgs(propertyName));
            }
    
            protected virtual void RaiseNavigationPropertyLoading<T>(Expression<Func<T>> propertyExpression)
            {
                var body = propertyExpression.Body as MemberExpression;
                if (body == null)
                    throw new ArgumentException("'propertyExpression' should be a member expression");
    
                var expression = body.Expression as ConstantExpression;
                if (expression == null)
                    throw new ArgumentException("'propertyExpression' body should be a constant expression");
    
                object target = Expression.Lambda(expression).Compile().DynamicInvoke();
    
                RaiseNavigationPropertyLoading(body.Member.Name);
            }
    	    #region Simple Properties
    
        [DataMember]
        public long Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
    				OnPropertyChanging("Id");
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private long _id;
    
        [DataMember]
        public bool Requested
        {
            get { return _requested; }
            set
            {
                if (_requested != value)
                {
    				OnPropertyChanging("Requested");
                    _requested = value;
                    OnPropertyChanged("Requested");
                }
            }
        }
        private bool _requested;
    
        [DataMember]
        public decimal Distance
        {
            get { return _distance; }
            set
            {
                if (_distance != value)
                {
    				OnPropertyChanging("Distance");
                    _distance = value;
                    OnPropertyChanged("Distance");
                }
            }
        }
        private decimal _distance;
    
        [DataMember]
        public bool FromPerson
        {
            get { return _fromPerson; }
            set
            {
                if (_fromPerson != value)
                {
    				OnPropertyChanging("FromPerson");
                    _fromPerson = value;
                    OnPropertyChanged("FromPerson");
                }
            }
        }
        private bool _fromPerson;
    
        [DataMember]
        public bool FromWork
        {
            get { return _fromWork; }
            set
            {
                if (_fromWork != value)
                {
    				OnPropertyChanging("FromWork");
                    _fromWork = value;
                    OnPropertyChanged("FromWork");
                }
            }
        }
        private bool _fromWork;
    
        [DataMember]
        public bool FromChildSchool
        {
            get { return _fromChildSchool; }
            set
            {
                if (_fromChildSchool != value)
                {
    				OnPropertyChanging("FromChildSchool");
                    _fromChildSchool = value;
                    OnPropertyChanged("FromChildSchool");
                }
            }
        }
        private bool _fromChildSchool;
    
        [DataMember]
        public bool FromHome
        {
            get { return _fromHome; }
            set
            {
                if (_fromHome != value)
                {
    				OnPropertyChanging("FromHome");
                    _fromHome = value;
                    OnPropertyChanged("FromHome");
                }
            }
        }
        private bool _fromHome;
    
        [DataMember]
        public bool FromVehicle
        {
            get { return _fromVehicle; }
            set
            {
                if (_fromVehicle != value)
                {
    				OnPropertyChanging("FromVehicle");
                    _fromVehicle = value;
                    OnPropertyChanged("FromVehicle");
                }
            }
        }
        private bool _fromVehicle;
    
        [DataMember]
        public bool FromChildCare
        {
            get { return _fromChildCare; }
            set
            {
                if (_fromChildCare != value)
                {
    				OnPropertyChanging("FromChildCare");
                    _fromChildCare = value;
                    OnPropertyChanged("FromChildCare");
                }
            }
        }
        private bool _fromChildCare;
    
        [DataMember]
        public bool FromOtherProtected
        {
            get { return _fromOtherProtected; }
            set
            {
                if (_fromOtherProtected != value)
                {
    				OnPropertyChanging("FromOtherProtected");
                    _fromOtherProtected = value;
                    OnPropertyChanged("FromOtherProtected");
                }
            }
        }
        private bool _fromOtherProtected;
    
        [DataMember]
        public bool OtherRequested
        {
            get { return _otherRequested; }
            set
            {
                if (_otherRequested != value)
                {
    				OnPropertyChanging("OtherRequested");
                    _otherRequested = value;
                    OnPropertyChanged("OtherRequested");
                }
            }
        }
        private bool _otherRequested;
    
        [DataMember]
        public string OtherText
        {
            get { return _otherText; }
            set
            {
                if (_otherText != value)
                {
    				OnPropertyChanging("OtherText");
                    _otherText = value;
                    OnPropertyChanged("OtherText");
                }
            }
        }
        private string _otherText;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
    	protected virtual void OnPropertyChanging(String propertyName)
        {
            if (_propertyChanging != null)
            {
                _propertyChanging(this, new PropertyChangingEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
    	protected virtual void OnNavigationPropertyChanging(String propertyName)
        {
            if (_propertyChanging != null)
            {
                _propertyChanging(this, new PropertyChangingEventArgs(propertyName));
            }
        }
    
    	
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
