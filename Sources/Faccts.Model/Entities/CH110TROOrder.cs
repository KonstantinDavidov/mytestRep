//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Linq.Expressions;
using System.Runtime.Serialization;
using ReactiveUI;
using System.Reactive.Linq;
using System.Reflection;

namespace Faccts.Model.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(ConductTROSection))]
    [KnownType(typeof(SAOTROSection))]
    [KnownType(typeof(NoGunsSection))]
    [KnownType(typeof(OtherOrdersTROSection))]
    [KnownType(typeof(CarposEntrySection))]
    [KnownType(typeof(ServiceFeesSection))]
    [KnownType(typeof(ExpirationSection))]
    public partial class CH110TROOrder : OrderBase, IObjectWithChangeTracker, IReactiveNotifyPropertyChanged, INavigationPropertiesLoadable
    {
        #region Navigation Properties
    
        [DataMember]
        public ConductTROSection ConductTROSection
        {
            get { return _conductTROSection; }
            set
            {
                if (!ReferenceEquals(_conductTROSection, value))
                {
                    var previousValue = _conductTROSection;
    				OnNavigationPropertyChanging("ConductTROSection");
                    _conductTROSection = value;
                    FixupConductTROSection(previousValue);
                    OnNavigationPropertyChanged("ConductTROSection");
                }
            }
        }
        private ConductTROSection _conductTROSection;
    
        [DataMember]
        public SAOTROSection SAOTROSection
        {
            get { return _sAOTROSection; }
            set
            {
                if (!ReferenceEquals(_sAOTROSection, value))
                {
                    var previousValue = _sAOTROSection;
    				OnNavigationPropertyChanging("SAOTROSection");
                    _sAOTROSection = value;
                    FixupSAOTROSection(previousValue);
                    OnNavigationPropertyChanged("SAOTROSection");
                }
            }
        }
        private SAOTROSection _sAOTROSection;
    
        [DataMember]
        public NoGunsSection NoGunsSection
        {
            get { return _noGunsSection; }
            set
            {
                if (!ReferenceEquals(_noGunsSection, value))
                {
                    var previousValue = _noGunsSection;
    				OnNavigationPropertyChanging("NoGunsSection");
                    _noGunsSection = value;
                    FixupNoGunsSection(previousValue);
                    OnNavigationPropertyChanged("NoGunsSection");
                }
            }
        }
        private NoGunsSection _noGunsSection;
    
        [DataMember]
        public OtherOrdersTROSection OtherOrdersTROSection
        {
            get { return _otherOrdersTROSection; }
            set
            {
                if (!ReferenceEquals(_otherOrdersTROSection, value))
                {
                    var previousValue = _otherOrdersTROSection;
    				OnNavigationPropertyChanging("OtherOrdersTROSection");
                    _otherOrdersTROSection = value;
                    FixupOtherOrdersTROSection(previousValue);
                    OnNavigationPropertyChanged("OtherOrdersTROSection");
                }
            }
        }
        private OtherOrdersTROSection _otherOrdersTROSection;
    
        [DataMember]
        public CarposEntrySection CarposEntryROSection
        {
            get { return _carposEntryROSection; }
            set
            {
                if (!ReferenceEquals(_carposEntryROSection, value))
                {
                    var previousValue = _carposEntryROSection;
    				OnNavigationPropertyChanging("CarposEntryROSection");
                    _carposEntryROSection = value;
                    FixupCarposEntryROSection(previousValue);
                    OnNavigationPropertyChanged("CarposEntryROSection");
                }
            }
        }
        private CarposEntrySection _carposEntryROSection;
    
        [DataMember]
        public ServiceFeesSection ServiceFeesSection
        {
            get { return _serviceFeesSection; }
            set
            {
                if (!ReferenceEquals(_serviceFeesSection, value))
                {
                    var previousValue = _serviceFeesSection;
    				OnNavigationPropertyChanging("ServiceFeesSection");
                    _serviceFeesSection = value;
                    FixupServiceFeesSection(previousValue);
                    OnNavigationPropertyChanged("ServiceFeesSection");
                }
            }
        }
        private ServiceFeesSection _serviceFeesSection;
    
        [DataMember]
        public ExpirationSection ExpirationSection
        {
            get { return _expirationSection; }
            set
            {
                if (!ReferenceEquals(_expirationSection, value))
                {
                    var previousValue = _expirationSection;
    				OnNavigationPropertyChanging("ExpirationSection");
                    _expirationSection = value;
                    FixupExpirationSection(previousValue);
                    OnNavigationPropertyChanged("ExpirationSection");
                }
            }
        }
        private ExpirationSection _expirationSection;

        #endregion

        #region ChangeTracking
    
        protected override void ClearNavigationProperties()
        {
            base.ClearNavigationProperties();
            ConductTROSection = null;
            SAOTROSection = null;
            NoGunsSection = null;
            OtherOrdersTROSection = null;
            CarposEntryROSection = null;
            ServiceFeesSection = null;
            ExpirationSection = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupConductTROSection(ConductTROSection previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ConductTROSection")
                    && (ChangeTracker.OriginalValues["ConductTROSection"] == ConductTROSection))
                {
                    ChangeTracker.OriginalValues.Remove("ConductTROSection");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ConductTROSection", previousValue);
                }
                if (ConductTROSection != null && !ConductTROSection.ChangeTracker.ChangeTrackingEnabled)
                {
                    ConductTROSection.StartTracking();
                }
            }
        }
    
        private void FixupSAOTROSection(SAOTROSection previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("SAOTROSection")
                    && (ChangeTracker.OriginalValues["SAOTROSection"] == SAOTROSection))
                {
                    ChangeTracker.OriginalValues.Remove("SAOTROSection");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("SAOTROSection", previousValue);
                }
                if (SAOTROSection != null && !SAOTROSection.ChangeTracker.ChangeTrackingEnabled)
                {
                    SAOTROSection.StartTracking();
                }
            }
        }
    
        private void FixupNoGunsSection(NoGunsSection previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("NoGunsSection")
                    && (ChangeTracker.OriginalValues["NoGunsSection"] == NoGunsSection))
                {
                    ChangeTracker.OriginalValues.Remove("NoGunsSection");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("NoGunsSection", previousValue);
                }
                if (NoGunsSection != null && !NoGunsSection.ChangeTracker.ChangeTrackingEnabled)
                {
                    NoGunsSection.StartTracking();
                }
            }
        }
    
        private void FixupOtherOrdersTROSection(OtherOrdersTROSection previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("OtherOrdersTROSection")
                    && (ChangeTracker.OriginalValues["OtherOrdersTROSection"] == OtherOrdersTROSection))
                {
                    ChangeTracker.OriginalValues.Remove("OtherOrdersTROSection");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("OtherOrdersTROSection", previousValue);
                }
                if (OtherOrdersTROSection != null && !OtherOrdersTROSection.ChangeTracker.ChangeTrackingEnabled)
                {
                    OtherOrdersTROSection.StartTracking();
                }
            }
        }
    
        private void FixupCarposEntryROSection(CarposEntrySection previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("CarposEntryROSection")
                    && (ChangeTracker.OriginalValues["CarposEntryROSection"] == CarposEntryROSection))
                {
                    ChangeTracker.OriginalValues.Remove("CarposEntryROSection");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("CarposEntryROSection", previousValue);
                }
                if (CarposEntryROSection != null && !CarposEntryROSection.ChangeTracker.ChangeTrackingEnabled)
                {
                    CarposEntryROSection.StartTracking();
                }
            }
        }
    
        private void FixupServiceFeesSection(ServiceFeesSection previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ServiceFeesSection")
                    && (ChangeTracker.OriginalValues["ServiceFeesSection"] == ServiceFeesSection))
                {
                    ChangeTracker.OriginalValues.Remove("ServiceFeesSection");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ServiceFeesSection", previousValue);
                }
                if (ServiceFeesSection != null && !ServiceFeesSection.ChangeTracker.ChangeTrackingEnabled)
                {
                    ServiceFeesSection.StartTracking();
                }
            }
        }
    
        private void FixupExpirationSection(ExpirationSection previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ExpirationSection")
                    && (ChangeTracker.OriginalValues["ExpirationSection"] == ExpirationSection))
                {
                    ChangeTracker.OriginalValues.Remove("ExpirationSection");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ExpirationSection", previousValue);
                }
                if (ExpirationSection != null && !ExpirationSection.ChangeTracker.ChangeTrackingEnabled)
                {
                    ExpirationSection.StartTracking();
                }
            }
        }

        #endregion

    }
}
