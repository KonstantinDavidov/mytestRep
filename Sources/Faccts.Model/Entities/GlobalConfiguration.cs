//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Linq.Expressions;
using System.Runtime.Serialization;
using ReactiveUI;

namespace Faccts.Model.Entities
{
    [DataContract(IsReference = true)]
    public partial class GlobalConfiguration: IObjectWithChangeTracker, IReactiveNotifyPropertyChanged, INavigationPropertiesLoadable
    {
    		
    		private MakeObjectReactiveHelper _reactiveHelper;
    
    		public GlobalConfiguration()
    		{
    			_reactiveHelper = new MakeObjectReactiveHelper(this);
    			Initialize();
    		}
    
    		partial void Initialize();
    		
    
    		public IObservable<IObservedChange<object, object>> Changed 
    		{
    			get { return _reactiveHelper.Changed; }
    		}
    		public IObservable<IObservedChange<object, object>> Changing 
    		{
    			get { return _reactiveHelper.Changing; }
    		}
    		public IDisposable SuppressChangeNotifications() 
    		{
    			return _reactiveHelper.SuppressChangeNotifications();
    		}
    
    		private PropertyChangingEventHandler _propertyChanging;
    		public event PropertyChangingEventHandler PropertyChanging
    		{
    			add
    			{
    				_propertyChanging += value;
    			}
    			remove
    			{
    				_propertyChanging -= value;
    			}
    		}
    
    		public event EventHandler<LoadingNavigationPropertiesEventArgs> OnNavigationPropertyLoading;
    		protected virtual void RaiseNavigationPropertyLoading(string propertyName)
            {
                if (OnNavigationPropertyLoading != null)
                    OnNavigationPropertyLoading(this, new LoadingNavigationPropertiesEventArgs(propertyName));
            }
    
            protected virtual void RaiseNavigationPropertyLoading<T>(Expression<Func<T>> propertyExpression)
            {
                var body = propertyExpression.Body as MemberExpression;
                if (body == null)
                    throw new ArgumentException("'propertyExpression' should be a member expression");
    
                var expression = body.Expression as ConstantExpression;
                if (expression == null)
                    throw new ArgumentException("'propertyExpression' body should be a constant expression");
    
                object target = Expression.Lambda(expression).Compile().DynamicInvoke();
    
                RaiseNavigationPropertyLoading(body.Member.Name);
            }
    	    #region Simple Properties
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
    				OnPropertyChanging("Id");
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public string SiteName
        {
            get { return _siteName; }
            set
            {
                if (_siteName != value)
                {
    				OnPropertyChanging("SiteName");
                    _siteName = value;
                    OnPropertyChanged("SiteName");
                }
            }
        }
        private string _siteName;
    
        [DataMember]
        public string IssuerUri
        {
            get { return _issuerUri; }
            set
            {
                if (_issuerUri != value)
                {
    				OnPropertyChanging("IssuerUri");
                    _issuerUri = value;
                    OnPropertyChanged("IssuerUri");
                }
            }
        }
        private string _issuerUri;
    
        [DataMember]
        public string IssuerContactEmail
        {
            get { return _issuerContactEmail; }
            set
            {
                if (_issuerContactEmail != value)
                {
    				OnPropertyChanging("IssuerContactEmail");
                    _issuerContactEmail = value;
                    OnPropertyChanged("IssuerContactEmail");
                }
            }
        }
        private string _issuerContactEmail;
    
        [DataMember]
        public string DefaultWSTokenType
        {
            get { return _defaultWSTokenType; }
            set
            {
                if (_defaultWSTokenType != value)
                {
    				OnPropertyChanging("DefaultWSTokenType");
                    _defaultWSTokenType = value;
                    OnPropertyChanged("DefaultWSTokenType");
                }
            }
        }
        private string _defaultWSTokenType;
    
        [DataMember]
        public string DefaultHttpTokenType
        {
            get { return _defaultHttpTokenType; }
            set
            {
                if (_defaultHttpTokenType != value)
                {
    				OnPropertyChanging("DefaultHttpTokenType");
                    _defaultHttpTokenType = value;
                    OnPropertyChanged("DefaultHttpTokenType");
                }
            }
        }
        private string _defaultHttpTokenType;
    
        [DataMember]
        public int DefaultTokenLifetime
        {
            get { return _defaultTokenLifetime; }
            set
            {
                if (_defaultTokenLifetime != value)
                {
    				OnPropertyChanging("DefaultTokenLifetime");
                    _defaultTokenLifetime = value;
                    OnPropertyChanged("DefaultTokenLifetime");
                }
            }
        }
        private int _defaultTokenLifetime;
    
        [DataMember]
        public int MaximumTokenLifetime
        {
            get { return _maximumTokenLifetime; }
            set
            {
                if (_maximumTokenLifetime != value)
                {
    				OnPropertyChanging("MaximumTokenLifetime");
                    _maximumTokenLifetime = value;
                    OnPropertyChanged("MaximumTokenLifetime");
                }
            }
        }
        private int _maximumTokenLifetime;
    
        [DataMember]
        public int SsoCookieLifetime
        {
            get { return _ssoCookieLifetime; }
            set
            {
                if (_ssoCookieLifetime != value)
                {
    				OnPropertyChanging("SsoCookieLifetime");
                    _ssoCookieLifetime = value;
                    OnPropertyChanged("SsoCookieLifetime");
                }
            }
        }
        private int _ssoCookieLifetime;
    
        [DataMember]
        public bool RequireEncryption
        {
            get { return _requireEncryption; }
            set
            {
                if (_requireEncryption != value)
                {
    				OnPropertyChanging("RequireEncryption");
                    _requireEncryption = value;
                    OnPropertyChanged("RequireEncryption");
                }
            }
        }
        private bool _requireEncryption;
    
        [DataMember]
        public bool RequireRelyingPartyRegistration
        {
            get { return _requireRelyingPartyRegistration; }
            set
            {
                if (_requireRelyingPartyRegistration != value)
                {
    				OnPropertyChanging("RequireRelyingPartyRegistration");
                    _requireRelyingPartyRegistration = value;
                    OnPropertyChanged("RequireRelyingPartyRegistration");
                }
            }
        }
        private bool _requireRelyingPartyRegistration;
    
        [DataMember]
        public bool EnableClientCertificateAuthentication
        {
            get { return _enableClientCertificateAuthentication; }
            set
            {
                if (_enableClientCertificateAuthentication != value)
                {
    				OnPropertyChanging("EnableClientCertificateAuthentication");
                    _enableClientCertificateAuthentication = value;
                    OnPropertyChanged("EnableClientCertificateAuthentication");
                }
            }
        }
        private bool _enableClientCertificateAuthentication;
    
        [DataMember]
        public bool EnforceUsersGroupMembership
        {
            get { return _enforceUsersGroupMembership; }
            set
            {
                if (_enforceUsersGroupMembership != value)
                {
    				OnPropertyChanging("EnforceUsersGroupMembership");
                    _enforceUsersGroupMembership = value;
                    OnPropertyChanged("EnforceUsersGroupMembership");
                }
            }
        }
        private bool _enforceUsersGroupMembership;
    
        [DataMember]
        public int HttpPort
        {
            get { return _httpPort; }
            set
            {
                if (_httpPort != value)
                {
    				OnPropertyChanging("HttpPort");
                    _httpPort = value;
                    OnPropertyChanged("HttpPort");
                }
            }
        }
        private int _httpPort;
    
        [DataMember]
        public int HttpsPort
        {
            get { return _httpsPort; }
            set
            {
                if (_httpsPort != value)
                {
    				OnPropertyChanging("HttpsPort");
                    _httpsPort = value;
                    OnPropertyChanged("HttpsPort");
                }
            }
        }
        private int _httpsPort;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
    	protected virtual void OnPropertyChanging(String propertyName)
        {
            if (_propertyChanging != null)
            {
                _propertyChanging(this, new PropertyChangingEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
    	protected virtual void OnNavigationPropertyChanging(String propertyName)
        {
            if (_propertyChanging != null)
            {
                _propertyChanging(this, new PropertyChangingEventArgs(propertyName));
            }
        }
    
    	public override bool Equals(System.Object obj)
    	{
    		// If parameter is null return false.
            if (obj == null)
            {
                return false;
            }
    
            // If parameter cannot be cast to Point return false.
            GlobalConfiguration p = obj as GlobalConfiguration;
            if ((System.Object)p == null)
            {
                return false;
            }
    
    			if (this.Id != p.Id)
    				return false;
    			if (this.SiteName != p.SiteName)
    				return false;
    			if (this.IssuerUri != p.IssuerUri)
    				return false;
    			if (this.IssuerContactEmail != p.IssuerContactEmail)
    				return false;
    			if (this.DefaultWSTokenType != p.DefaultWSTokenType)
    				return false;
    			if (this.DefaultHttpTokenType != p.DefaultHttpTokenType)
    				return false;
    			if (this.DefaultTokenLifetime != p.DefaultTokenLifetime)
    				return false;
    			if (this.MaximumTokenLifetime != p.MaximumTokenLifetime)
    				return false;
    			if (this.SsoCookieLifetime != p.SsoCookieLifetime)
    				return false;
    			if (this.RequireEncryption != p.RequireEncryption)
    				return false;
    			if (this.RequireRelyingPartyRegistration != p.RequireRelyingPartyRegistration)
    				return false;
    			if (this.EnableClientCertificateAuthentication != p.EnableClientCertificateAuthentication)
    				return false;
    			if (this.EnforceUsersGroupMembership != p.EnforceUsersGroupMembership)
    				return false;
    			if (this.HttpPort != p.HttpPort)
    				return false;
    			if (this.HttpsPort != p.HttpsPort)
    				return false;
    
    		return true;
    	}
    
    	public override int GetHashCode()
    	{
    		int hashCode = 1;
    			
    		hashCode ^= this.Id.GetHashCode();
    		if (this.Id != null)
    		{
    			hashCode ^= this.Id.GetHashCode();
    		}
    			
    		hashCode ^= this.SiteName.GetHashCode();
    		if (this.SiteName != null)
    		{
    			hashCode ^= this.SiteName.GetHashCode();
    		}
    			
    		hashCode ^= this.IssuerUri.GetHashCode();
    		if (this.IssuerUri != null)
    		{
    			hashCode ^= this.IssuerUri.GetHashCode();
    		}
    			
    		hashCode ^= this.IssuerContactEmail.GetHashCode();
    		if (this.IssuerContactEmail != null)
    		{
    			hashCode ^= this.IssuerContactEmail.GetHashCode();
    		}
    			
    		hashCode ^= this.DefaultWSTokenType.GetHashCode();
    		if (this.DefaultWSTokenType != null)
    		{
    			hashCode ^= this.DefaultWSTokenType.GetHashCode();
    		}
    			
    		hashCode ^= this.DefaultHttpTokenType.GetHashCode();
    		if (this.DefaultHttpTokenType != null)
    		{
    			hashCode ^= this.DefaultHttpTokenType.GetHashCode();
    		}
    			
    		hashCode ^= this.DefaultTokenLifetime.GetHashCode();
    		if (this.DefaultTokenLifetime != null)
    		{
    			hashCode ^= this.DefaultTokenLifetime.GetHashCode();
    		}
    			
    		hashCode ^= this.MaximumTokenLifetime.GetHashCode();
    		if (this.MaximumTokenLifetime != null)
    		{
    			hashCode ^= this.MaximumTokenLifetime.GetHashCode();
    		}
    			
    		hashCode ^= this.SsoCookieLifetime.GetHashCode();
    		if (this.SsoCookieLifetime != null)
    		{
    			hashCode ^= this.SsoCookieLifetime.GetHashCode();
    		}
    			
    		hashCode ^= this.RequireEncryption.GetHashCode();
    		if (this.RequireEncryption != null)
    		{
    			hashCode ^= this.RequireEncryption.GetHashCode();
    		}
    			
    		hashCode ^= this.RequireRelyingPartyRegistration.GetHashCode();
    		if (this.RequireRelyingPartyRegistration != null)
    		{
    			hashCode ^= this.RequireRelyingPartyRegistration.GetHashCode();
    		}
    			
    		hashCode ^= this.EnableClientCertificateAuthentication.GetHashCode();
    		if (this.EnableClientCertificateAuthentication != null)
    		{
    			hashCode ^= this.EnableClientCertificateAuthentication.GetHashCode();
    		}
    			
    		hashCode ^= this.EnforceUsersGroupMembership.GetHashCode();
    		if (this.EnforceUsersGroupMembership != null)
    		{
    			hashCode ^= this.EnforceUsersGroupMembership.GetHashCode();
    		}
    			
    		hashCode ^= this.HttpPort.GetHashCode();
    		if (this.HttpPort != null)
    		{
    			hashCode ^= this.HttpPort.GetHashCode();
    		}
    			
    		hashCode ^= this.HttpsPort.GetHashCode();
    		if (this.HttpsPort != null)
    		{
    			hashCode ^= this.HttpsPort.GetHashCode();
    		}
    		return hashCode;
    	}
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
