//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Linq.Expressions;
using System.Runtime.Serialization;
using ReactiveUI;
using System.Reactive.Linq;

namespace Faccts.Model.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(ConductROSection))]
    [KnownType(typeof(ServiceSection))]
    [KnownType(typeof(SAOEAROSection))]
    [KnownType(typeof(NoGunsEASection))]
    [KnownType(typeof(ServiceFeesEA130Section))]
    [KnownType(typeof(OtherOrdersROSection))]
    [KnownType(typeof(ExpirationSection))]
    public partial class EA130ROOrder: IObjectWithChangeTracker, IReactiveNotifyPropertyChanged, INavigationPropertiesLoadable
    {
    		
    		private MakeObjectReactiveHelper _reactiveHelper;
    
    		public EA130ROOrder()
    		{
    			_reactiveHelper = new MakeObjectReactiveHelper(this);
    			Initialize();
    			Observable.FromEvent<EventHandler<ObjectStateChangingEventArgs>, ObjectStateChangingEventArgs>(
    			handler =>
    				{
    					EventHandler<ObjectStateChangingEventArgs> eh = (sender, e) => handler(e);
    					return eh;
    				},
    				handler =>  ChangeTracker.ObjectStateChanging += handler,
    				handler =>  ChangeTracker.ObjectStateChanging -= handler
    			)
    			.Subscribe(e =>
    				{
    					if(e.NewState == ObjectState.Unchanged)
    					{
    						IsDirty = false;
    					}
    				}
    			);
    			Observable.Merge<Object>(
    				this.ObservableForProperty(x => x.Id)
    				,this.ObservableForProperty(x => x.ConductROSection.IsDirty)
    				,this.ObservableForProperty(x => x.ServiceSection.IsDirty)
    				,this.ObservableForProperty(x => x.SAOEAROSection.IsDirty)
    				,this.ObservableForProperty(x => x.NoGunsEASection.IsDirty)
    				,this.ObservableForProperty(x => x.ServiceFeesEA130Section.IsDirty)
    				,this.ObservableForProperty(x => x.OtherOrdersROSection.IsDirty)
    				,this.ObservableForProperty(x => x.ExpirationSection.IsDirty)
    			).
    			Subscribe(_ =>
    			{
    				if (ChangeTracker.State != ObjectState.Unchanged)
    				{
    					IsDirty = true;
    				}
    			}
    			);
    		}
    
    		partial void Initialize();
    		
    
    
    		private bool _isDirty;
    		public bool IsDirty
    		{
    			get
    			{
    				return _isDirty;
    			}
    			set
    			{
    				if (_isDirty == value)
    					return;
    				OnPropertyChanging("IsDirty");
    				_isDirty = value;
    				OnPropertyChanged("IsDirty");
    			}
    		}
    				
    
    		public IObservable<IObservedChange<object, object>> Changed 
    		{
    			get { return _reactiveHelper.Changed; }
    		}
    		public IObservable<IObservedChange<object, object>> Changing 
    		{
    			get { return _reactiveHelper.Changing; }
    		}
    		public IDisposable SuppressChangeNotifications() 
    		{
    			return _reactiveHelper.SuppressChangeNotifications();
    		}
    
    		private PropertyChangingEventHandler _propertyChanging;
    		public event PropertyChangingEventHandler PropertyChanging
    		{
    			add
    			{
    				_propertyChanging += value;
    			}
    			remove
    			{
    				_propertyChanging -= value;
    			}
    		}
    
    		public event EventHandler<LoadingNavigationPropertiesEventArgs> OnNavigationPropertyLoading;
    		protected virtual void RaiseNavigationPropertyLoading(string propertyName)
            {
                if (OnNavigationPropertyLoading != null)
                    OnNavigationPropertyLoading(this, new LoadingNavigationPropertiesEventArgs(propertyName));
            }
    
            protected virtual void RaiseNavigationPropertyLoading<T>(Expression<Func<T>> propertyExpression)
            {
                var body = propertyExpression.Body as MemberExpression;
                if (body == null)
                    throw new ArgumentException("'propertyExpression' should be a member expression");
    
                var expression = body.Expression as ConstantExpression;
                if (expression == null)
                    throw new ArgumentException("'propertyExpression' body should be a constant expression");
    
                object target = Expression.Lambda(expression).Compile().DynamicInvoke();
    
                RaiseNavigationPropertyLoading(body.Member.Name);
            }
    	    #region Simple Properties
    
        [DataMember]
        public long Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
    				OnPropertyChanging("Id");
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private long _id;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public ConductROSection ConductROSection
        {
            get { return _conductROSection; }
            set
            {
                if (!ReferenceEquals(_conductROSection, value))
                {
                    var previousValue = _conductROSection;
    				OnNavigationPropertyChanging("ConductROSection");
                    _conductROSection = value;
                    FixupConductROSection(previousValue);
                    OnNavigationPropertyChanged("ConductROSection");
                }
            }
        }
        private ConductROSection _conductROSection;
    
        [DataMember]
        public ServiceSection ServiceSection
        {
            get { return _serviceSection; }
            set
            {
                if (!ReferenceEquals(_serviceSection, value))
                {
                    var previousValue = _serviceSection;
    				OnNavigationPropertyChanging("ServiceSection");
                    _serviceSection = value;
                    FixupServiceSection(previousValue);
                    OnNavigationPropertyChanged("ServiceSection");
                }
            }
        }
        private ServiceSection _serviceSection;
    
        [DataMember]
        public SAOEAROSection SAOEAROSection
        {
            get { return _sAOEAROSection; }
            set
            {
                if (!ReferenceEquals(_sAOEAROSection, value))
                {
                    var previousValue = _sAOEAROSection;
    				OnNavigationPropertyChanging("SAOEAROSection");
                    _sAOEAROSection = value;
                    FixupSAOEAROSection(previousValue);
                    OnNavigationPropertyChanged("SAOEAROSection");
                }
            }
        }
        private SAOEAROSection _sAOEAROSection;
    
        [DataMember]
        public NoGunsEASection NoGunsEASection
        {
            get { return _noGunsEASection; }
            set
            {
                if (!ReferenceEquals(_noGunsEASection, value))
                {
                    var previousValue = _noGunsEASection;
    				OnNavigationPropertyChanging("NoGunsEASection");
                    _noGunsEASection = value;
                    FixupNoGunsEASection(previousValue);
                    OnNavigationPropertyChanged("NoGunsEASection");
                }
            }
        }
        private NoGunsEASection _noGunsEASection;
    
        [DataMember]
        public ServiceFeesEA130Section ServiceFeesEA130Section
        {
            get { return _serviceFeesEA130Section; }
            set
            {
                if (!ReferenceEquals(_serviceFeesEA130Section, value))
                {
                    var previousValue = _serviceFeesEA130Section;
    				OnNavigationPropertyChanging("ServiceFeesEA130Section");
                    _serviceFeesEA130Section = value;
                    FixupServiceFeesEA130Section(previousValue);
                    OnNavigationPropertyChanged("ServiceFeesEA130Section");
                }
            }
        }
        private ServiceFeesEA130Section _serviceFeesEA130Section;
    
        [DataMember]
        public OtherOrdersROSection OtherOrdersROSection
        {
            get { return _otherOrdersROSection; }
            set
            {
                if (!ReferenceEquals(_otherOrdersROSection, value))
                {
                    var previousValue = _otherOrdersROSection;
    				OnNavigationPropertyChanging("OtherOrdersROSection");
                    _otherOrdersROSection = value;
                    FixupOtherOrdersROSection(previousValue);
                    OnNavigationPropertyChanged("OtherOrdersROSection");
                }
            }
        }
        private OtherOrdersROSection _otherOrdersROSection;
    
        [DataMember]
        public ExpirationSection ExpirationSection
        {
            get { return _expirationSection; }
            set
            {
                if (!ReferenceEquals(_expirationSection, value))
                {
                    var previousValue = _expirationSection;
    				OnNavigationPropertyChanging("ExpirationSection");
                    _expirationSection = value;
                    FixupExpirationSection(previousValue);
                    OnNavigationPropertyChanged("ExpirationSection");
                }
            }
        }
        private ExpirationSection _expirationSection;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
    	protected virtual void OnPropertyChanging(String propertyName)
        {
            if (_propertyChanging != null)
            {
                _propertyChanging(this, new PropertyChangingEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
    	protected virtual void OnNavigationPropertyChanging(String propertyName)
        {
            if (_propertyChanging != null)
            {
                _propertyChanging(this, new PropertyChangingEventArgs(propertyName));
            }
        }
    
    	
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            ConductROSection = null;
            ServiceSection = null;
            SAOEAROSection = null;
            NoGunsEASection = null;
            ServiceFeesEA130Section = null;
            OtherOrdersROSection = null;
            ExpirationSection = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupConductROSection(ConductROSection previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ConductROSection")
                    && (ChangeTracker.OriginalValues["ConductROSection"] == ConductROSection))
                {
                    ChangeTracker.OriginalValues.Remove("ConductROSection");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ConductROSection", previousValue);
                }
                if (ConductROSection != null && !ConductROSection.ChangeTracker.ChangeTrackingEnabled)
                {
                    ConductROSection.StartTracking();
                }
            }
        }
    
        private void FixupServiceSection(ServiceSection previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ServiceSection")
                    && (ChangeTracker.OriginalValues["ServiceSection"] == ServiceSection))
                {
                    ChangeTracker.OriginalValues.Remove("ServiceSection");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ServiceSection", previousValue);
                }
                if (ServiceSection != null && !ServiceSection.ChangeTracker.ChangeTrackingEnabled)
                {
                    ServiceSection.StartTracking();
                }
            }
        }
    
        private void FixupSAOEAROSection(SAOEAROSection previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("SAOEAROSection")
                    && (ChangeTracker.OriginalValues["SAOEAROSection"] == SAOEAROSection))
                {
                    ChangeTracker.OriginalValues.Remove("SAOEAROSection");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("SAOEAROSection", previousValue);
                }
                if (SAOEAROSection != null && !SAOEAROSection.ChangeTracker.ChangeTrackingEnabled)
                {
                    SAOEAROSection.StartTracking();
                }
            }
        }
    
        private void FixupNoGunsEASection(NoGunsEASection previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("NoGunsEASection")
                    && (ChangeTracker.OriginalValues["NoGunsEASection"] == NoGunsEASection))
                {
                    ChangeTracker.OriginalValues.Remove("NoGunsEASection");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("NoGunsEASection", previousValue);
                }
                if (NoGunsEASection != null && !NoGunsEASection.ChangeTracker.ChangeTrackingEnabled)
                {
                    NoGunsEASection.StartTracking();
                }
            }
        }
    
        private void FixupServiceFeesEA130Section(ServiceFeesEA130Section previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ServiceFeesEA130Section")
                    && (ChangeTracker.OriginalValues["ServiceFeesEA130Section"] == ServiceFeesEA130Section))
                {
                    ChangeTracker.OriginalValues.Remove("ServiceFeesEA130Section");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ServiceFeesEA130Section", previousValue);
                }
                if (ServiceFeesEA130Section != null && !ServiceFeesEA130Section.ChangeTracker.ChangeTrackingEnabled)
                {
                    ServiceFeesEA130Section.StartTracking();
                }
            }
        }
    
        private void FixupOtherOrdersROSection(OtherOrdersROSection previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("OtherOrdersROSection")
                    && (ChangeTracker.OriginalValues["OtherOrdersROSection"] == OtherOrdersROSection))
                {
                    ChangeTracker.OriginalValues.Remove("OtherOrdersROSection");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("OtherOrdersROSection", previousValue);
                }
                if (OtherOrdersROSection != null && !OtherOrdersROSection.ChangeTracker.ChangeTrackingEnabled)
                {
                    OtherOrdersROSection.StartTracking();
                }
            }
        }
    
        private void FixupExpirationSection(ExpirationSection previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ExpirationSection")
                    && (ChangeTracker.OriginalValues["ExpirationSection"] == ExpirationSection))
                {
                    ChangeTracker.OriginalValues.Remove("ExpirationSection");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ExpirationSection", previousValue);
                }
                if (ExpirationSection != null && !ExpirationSection.ChangeTracker.ChangeTrackingEnabled)
                {
                    ExpirationSection.StartTracking();
                }
            }
        }

        #endregion

    }
}
