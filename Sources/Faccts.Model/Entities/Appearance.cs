//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Linq.Expressions;
using System.Runtime.Serialization;
using ReactiveUI;

namespace Faccts.Model.Entities
{
    public partial class Appearance : INotifyComplexPropertyChanging, IReactiveNotifyPropertyChanged
    {
    
    	private MakeObjectReactiveHelper _reactiveHelper;
    	public Appearance()
    	{
    		_reactiveHelper = new MakeObjectReactiveHelper(this);
    		Initialize();
    	}
    
    	partial void Initialize();
    	
    
    	public IObservable<IObservedChange<object, object>> Changed 
    	{
    		get { return _reactiveHelper.Changed; }
    	}
    	public IObservable<IObservedChange<object, object>> Changing 
    	{
    		get { return _reactiveHelper.Changing; }
    	}
    	public IDisposable SuppressChangeNotifications() 
    	{
    		return _reactiveHelper.SuppressChangeNotifications();
    	}
    
    	private PropertyChangingEventHandler _propertyChanging;
    	public event PropertyChangingEventHandler PropertyChanging
    	{
    		add { _propertyChanging += value; }
    		remove {_propertyChanging -= value; }
    	}
        #region Simple Properties
    
        [DataMember]
        public Nullable<bool> Party1Appear
        {
            get { return _party1Appear; }
            set
            {
                if (_party1Appear != value)
                {
                    OnComplexPropertyChanging();
    				OnPropertyChanging("Party1Appear");
                    _party1Appear = value;
                    OnPropertyChanged("Party1Appear");
                }
            }
        }
        private Nullable<bool> _party1Appear;
    
        [DataMember]
        public Nullable<bool> Party1Sworn
        {
            get { return _party1Sworn; }
            set
            {
                if (_party1Sworn != value)
                {
                    OnComplexPropertyChanging();
    				OnPropertyChanging("Party1Sworn");
                    _party1Sworn = value;
                    OnPropertyChanged("Party1Sworn");
                }
            }
        }
        private Nullable<bool> _party1Sworn;
    
        [DataMember]
        public Nullable<bool> Party1AttorneyPresent
        {
            get { return _party1AttorneyPresent; }
            set
            {
                if (_party1AttorneyPresent != value)
                {
                    OnComplexPropertyChanging();
    				OnPropertyChanging("Party1AttorneyPresent");
                    _party1AttorneyPresent = value;
                    OnPropertyChanged("Party1AttorneyPresent");
                }
            }
        }
        private Nullable<bool> _party1AttorneyPresent;
    
        [DataMember]
        public Nullable<bool> Party1Atty
        {
            get { return _party1Atty; }
            set
            {
                if (_party1Atty != value)
                {
                    OnComplexPropertyChanging();
    				OnPropertyChanging("Party1Atty");
                    _party1Atty = value;
                    OnPropertyChanged("Party1Atty");
                }
            }
        }
        private Nullable<bool> _party1Atty;
    
        [DataMember]
        public Nullable<bool> Party2Appear
        {
            get { return _party2Appear; }
            set
            {
                if (_party2Appear != value)
                {
                    OnComplexPropertyChanging();
    				OnPropertyChanging("Party2Appear");
                    _party2Appear = value;
                    OnPropertyChanged("Party2Appear");
                }
            }
        }
        private Nullable<bool> _party2Appear;
    
        [DataMember]
        public Nullable<bool> Party2AttorneyPresent
        {
            get { return _party2AttorneyPresent; }
            set
            {
                if (_party2AttorneyPresent != value)
                {
                    OnComplexPropertyChanging();
    				OnPropertyChanging("Party2AttorneyPresent");
                    _party2AttorneyPresent = value;
                    OnPropertyChanged("Party2AttorneyPresent");
                }
            }
        }
        private Nullable<bool> _party2AttorneyPresent;
    
        [DataMember]
        public Nullable<bool> Party2Atty
        {
            get { return _party2Atty; }
            set
            {
                if (_party2Atty != value)
                {
                    OnComplexPropertyChanging();
    				OnPropertyChanging("Party2Atty");
                    _party2Atty = value;
                    OnPropertyChanged("Party2Atty");
                }
            }
        }
        private Nullable<bool> _party2Atty;
    
        [DataMember]
        public Nullable<bool> Party2Sworn
        {
            get { return _party2Sworn; }
            set
            {
                if (_party2Sworn != value)
                {
                    OnComplexPropertyChanging();
    				OnPropertyChanging("Party2Sworn");
                    _party2Sworn = value;
                    OnPropertyChanged("Party2Sworn");
                }
            }
        }
        private Nullable<bool> _party2Sworn;

        #endregion

        #region ChangeTracking
    
        private void OnComplexPropertyChanging()
        {
            if (_complexPropertyChanging != null)
            {
                _complexPropertyChanging(this, new EventArgs());
            }
        }
    
        event EventHandler INotifyComplexPropertyChanging.ComplexPropertyChanging { add { _complexPropertyChanging += value; } remove { _complexPropertyChanging -= value; } }
        private event EventHandler _complexPropertyChanging;
    
        private void OnPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
    	private void OnPropertyChanging(String propertyName)
        {
            if (_propertyChanging != null)
            {
                _propertyChanging(this, new PropertyChangingEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged { add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
    
        public static void RecordComplexOriginalValues(String parentPropertyName, Appearance complexObject, ObjectChangeTracker changeTracker)
        {
            if (String.IsNullOrEmpty(parentPropertyName))
            {
                throw new ArgumentException("String parameter cannot be null or empty.", "parentPropertyName");
            }
    
            if (changeTracker == null)
            {
                throw new ArgumentNullException("changeTracker");
            }
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.Party1Appear", parentPropertyName), complexObject == null ? null : (object)complexObject.Party1Appear);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.Party1Sworn", parentPropertyName), complexObject == null ? null : (object)complexObject.Party1Sworn);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.Party1AttorneyPresent", parentPropertyName), complexObject == null ? null : (object)complexObject.Party1AttorneyPresent);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.Party1Atty", parentPropertyName), complexObject == null ? null : (object)complexObject.Party1Atty);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.Party2Appear", parentPropertyName), complexObject == null ? null : (object)complexObject.Party2Appear);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.Party2AttorneyPresent", parentPropertyName), complexObject == null ? null : (object)complexObject.Party2AttorneyPresent);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.Party2Atty", parentPropertyName), complexObject == null ? null : (object)complexObject.Party2Atty);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.Party2Sworn", parentPropertyName), complexObject == null ? null : (object)complexObject.Party2Sworn);
        }

        #endregion

    }
}
