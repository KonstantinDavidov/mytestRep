//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Linq.Expressions;
using System.Runtime.Serialization;
using ReactiveUI;

namespace Faccts.Model.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(CourtCase))]
    [KnownType(typeof(Courtrooms))]
    [KnownType(typeof(CourtDepartmenets))]
    [KnownType(typeof(CourtParty))]
    public partial class CourtDocketRecord: IObjectWithChangeTracker, IReactiveNotifyPropertyChanged, INavigationPropertiesLoadable
    {
    		
    		private MakeObjectReactiveHelper _reactiveHelper;
    
    		public CourtDocketRecord()
    		{
    			_reactiveHelper = new MakeObjectReactiveHelper(this);
    			Initialize();
    		}
    
    		partial void Initialize();
    		
    
    		public IObservable<IObservedChange<object, object>> Changed 
    		{
    			get { return _reactiveHelper.Changed; }
    		}
    		public IObservable<IObservedChange<object, object>> Changing 
    		{
    			get { return _reactiveHelper.Changing; }
    		}
    		public IDisposable SuppressChangeNotifications() 
    		{
    			return _reactiveHelper.SuppressChangeNotifications();
    		}
    
    		private PropertyChangingEventHandler _propertyChanging;
    		public event PropertyChangingEventHandler PropertyChanging
    		{
    			add
    			{
    				_propertyChanging += value;
    			}
    			remove
    			{
    				_propertyChanging -= value;
    			}
    		}
    
    		public event EventHandler<LoadingNavigationPropertiesEventArgs> OnNavigationPropertyLoading;
    		protected virtual void RaiseNavigationPropertyLoading(string propertyName)
            {
                if (OnNavigationPropertyLoading != null)
                    OnNavigationPropertyLoading(this, new LoadingNavigationPropertiesEventArgs(propertyName));
            }
    
            protected virtual void RaiseNavigationPropertyLoading<T>(Expression<Func<T>> propertyExpression)
            {
                var body = propertyExpression.Body as MemberExpression;
                if (body == null)
                    throw new ArgumentException("'propertyExpression' should be a member expression");
    
                var expression = body.Expression as ConstantExpression;
                if (expression == null)
                    throw new ArgumentException("'propertyExpression' body should be a constant expression");
    
                object target = Expression.Lambda(expression).Compile().DynamicInvoke();
    
                RaiseNavigationPropertyLoading(body.Member.Name);
            }
    	    #region Simple Properties
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
    				OnPropertyChanging("Id");
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public long CourtCaseId
        {
            get { return _courtCaseId; }
            set
            {
                if (_courtCaseId != value)
                {
                    ChangeTracker.RecordOriginalValue("CourtCaseId", _courtCaseId);
                    if (!IsDeserializing)
                    {
                        if (CourtCase != null && CourtCase.Id != value)
                        {
                            CourtCase = null;
                        }
                    }
    				OnPropertyChanging("CourtCaseId");
                    _courtCaseId = value;
                    OnPropertyChanged("CourtCaseId");
                }
            }
        }
        private long _courtCaseId;
    
        [DataMember]
        public System.DateTime HearingDate
        {
            get { return _hearingDate; }
            set
            {
                if (_hearingDate != value)
                {
    				OnPropertyChanging("HearingDate");
                    _hearingDate = value;
                    OnPropertyChanged("HearingDate");
                }
            }
        }
        private System.DateTime _hearingDate;
    
        [DataMember]
        public int CourtroomId
        {
            get { return _courtroomId; }
            set
            {
                if (_courtroomId != value)
                {
                    ChangeTracker.RecordOriginalValue("CourtroomId", _courtroomId);
                    if (!IsDeserializing)
                    {
                        if (Courtroom != null && Courtroom.Id != value)
                        {
                            Courtroom = null;
                        }
                    }
    				OnPropertyChanging("CourtroomId");
                    _courtroomId = value;
                    OnPropertyChanged("CourtroomId");
                }
            }
        }
        private int _courtroomId;
    
        [DataMember]
        public int CourtDepartmentId
        {
            get { return _courtDepartmentId; }
            set
            {
                if (_courtDepartmentId != value)
                {
                    ChangeTracker.RecordOriginalValue("CourtDepartmentId", _courtDepartmentId);
                    if (!IsDeserializing)
                    {
                        if (CourtDepartmenets != null && CourtDepartmenets.Id != value)
                        {
                            CourtDepartmenets = null;
                        }
                    }
    				OnPropertyChanging("CourtDepartmentId");
                    _courtDepartmentId = value;
                    OnPropertyChanged("CourtDepartmentId");
                }
            }
        }
        private int _courtDepartmentId;
    
        [DataMember]
        public int CourtParty1Id
        {
            get { return _courtParty1Id; }
            set
            {
                if (_courtParty1Id != value)
                {
                    ChangeTracker.RecordOriginalValue("CourtParty1Id", _courtParty1Id);
                    if (!IsDeserializing)
                    {
                        if (Party1 != null && Party1.Id != value)
                        {
                            Party1 = null;
                        }
                    }
    				OnPropertyChanging("CourtParty1Id");
                    _courtParty1Id = value;
                    OnPropertyChanged("CourtParty1Id");
                }
            }
        }
        private int _courtParty1Id;
    
        [DataMember]
        public bool HasChildren
        {
            get { return _hasChildren; }
            set
            {
                if (_hasChildren != value)
                {
    				OnPropertyChanging("HasChildren");
                    _hasChildren = value;
                    OnPropertyChanged("HasChildren");
                }
            }
        }
        private bool _hasChildren;
    
        [DataMember]
        public int CourtParty2Id
        {
            get { return _courtParty2Id; }
            set
            {
                if (_courtParty2Id != value)
                {
                    ChangeTracker.RecordOriginalValue("CourtParty2Id", _courtParty2Id);
                    if (!IsDeserializing)
                    {
                        if (Party2 != null && Party2.Id != value)
                        {
                            Party2 = null;
                        }
                    }
    				OnPropertyChanging("CourtParty2Id");
                    _courtParty2Id = value;
                    OnPropertyChanged("CourtParty2Id");
                }
            }
        }
        private int _courtParty2Id;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public CourtCase CourtCase
        {
            get { return _courtCase; }
            set
            {
                if (!ReferenceEquals(_courtCase, value))
                {
                    var previousValue = _courtCase;
    				OnNavigationPropertyChanging("CourtCase");
                    _courtCase = value;
                    FixupCourtCase(previousValue);
                    OnNavigationPropertyChanged("CourtCase");
                }
            }
        }
        private CourtCase _courtCase;
    
        [DataMember]
        public Courtrooms Courtroom
        {
            get { return _courtroom; }
            set
            {
                if (!ReferenceEquals(_courtroom, value))
                {
                    var previousValue = _courtroom;
    				OnNavigationPropertyChanging("Courtroom");
                    _courtroom = value;
                    FixupCourtroom(previousValue);
                    OnNavigationPropertyChanged("Courtroom");
                }
            }
        }
        private Courtrooms _courtroom;
    
        [DataMember]
        public CourtDepartmenets CourtDepartmenets
        {
            get { return _courtDepartmenets; }
            set
            {
                if (!ReferenceEquals(_courtDepartmenets, value))
                {
                    var previousValue = _courtDepartmenets;
    				OnNavigationPropertyChanging("CourtDepartmenets");
                    _courtDepartmenets = value;
                    FixupCourtDepartmenets(previousValue);
                    OnNavigationPropertyChanged("CourtDepartmenets");
                }
            }
        }
        private CourtDepartmenets _courtDepartmenets;
    
        [DataMember]
        public CourtParty Party1
        {
            get { return _party1; }
            set
            {
                if (!ReferenceEquals(_party1, value))
                {
                    var previousValue = _party1;
    				OnNavigationPropertyChanging("Party1");
                    _party1 = value;
                    FixupParty1(previousValue);
                    OnNavigationPropertyChanged("Party1");
                }
            }
        }
        private CourtParty _party1;
    
        [DataMember]
        public CourtParty Party2
        {
            get { return _party2; }
            set
            {
                if (!ReferenceEquals(_party2, value))
                {
                    var previousValue = _party2;
    				OnNavigationPropertyChanging("Party2");
                    _party2 = value;
                    FixupParty2(previousValue);
                    OnNavigationPropertyChanged("Party2");
                }
            }
        }
        private CourtParty _party2;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
    	protected virtual void OnPropertyChanging(String propertyName)
        {
            if (_propertyChanging != null)
            {
                _propertyChanging(this, new PropertyChangingEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
    	protected virtual void OnNavigationPropertyChanging(String propertyName)
        {
            if (_propertyChanging != null)
            {
                _propertyChanging(this, new PropertyChangingEventArgs(propertyName));
            }
        }
    
    	
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            CourtCase = null;
            Courtroom = null;
            CourtDepartmenets = null;
            Party1 = null;
            Party2 = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupCourtCase(CourtCase previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CourtDocketRecords.Contains(this))
            {
                previousValue.CourtDocketRecords.Remove(this);
            }
    
            if (CourtCase != null)
            {
                CourtCase.CourtDocketRecords.Add(this);
    
                CourtCaseId = CourtCase.Id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("CourtCase")
                    && (ChangeTracker.OriginalValues["CourtCase"] == CourtCase))
                {
                    ChangeTracker.OriginalValues.Remove("CourtCase");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("CourtCase", previousValue);
                }
                if (CourtCase != null && !CourtCase.ChangeTracker.ChangeTrackingEnabled)
                {
                    CourtCase.StartTracking();
                }
            }
        }
    
        private void FixupCourtroom(Courtrooms previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CourtDocketRecords.Contains(this))
            {
                previousValue.CourtDocketRecords.Remove(this);
            }
    
            if (Courtroom != null)
            {
                Courtroom.CourtDocketRecords.Add(this);
    
                CourtroomId = Courtroom.Id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Courtroom")
                    && (ChangeTracker.OriginalValues["Courtroom"] == Courtroom))
                {
                    ChangeTracker.OriginalValues.Remove("Courtroom");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Courtroom", previousValue);
                }
                if (Courtroom != null && !Courtroom.ChangeTracker.ChangeTrackingEnabled)
                {
                    Courtroom.StartTracking();
                }
            }
        }
    
        private void FixupCourtDepartmenets(CourtDepartmenets previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CourtDocketRecords.Contains(this))
            {
                previousValue.CourtDocketRecords.Remove(this);
            }
    
            if (CourtDepartmenets != null)
            {
                CourtDepartmenets.CourtDocketRecords.Add(this);
    
                CourtDepartmentId = CourtDepartmenets.Id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("CourtDepartmenets")
                    && (ChangeTracker.OriginalValues["CourtDepartmenets"] == CourtDepartmenets))
                {
                    ChangeTracker.OriginalValues.Remove("CourtDepartmenets");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("CourtDepartmenets", previousValue);
                }
                if (CourtDepartmenets != null && !CourtDepartmenets.ChangeTracker.ChangeTrackingEnabled)
                {
                    CourtDepartmenets.StartTracking();
                }
            }
        }
    
        private void FixupParty1(CourtParty previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CourtDocketRecordsByParty1.Contains(this))
            {
                previousValue.CourtDocketRecordsByParty1.Remove(this);
            }
    
            if (Party1 != null)
            {
                Party1.CourtDocketRecordsByParty1.Add(this);
    
                CourtParty1Id = Party1.Id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Party1")
                    && (ChangeTracker.OriginalValues["Party1"] == Party1))
                {
                    ChangeTracker.OriginalValues.Remove("Party1");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Party1", previousValue);
                }
                if (Party1 != null && !Party1.ChangeTracker.ChangeTrackingEnabled)
                {
                    Party1.StartTracking();
                }
            }
        }
    
        private void FixupParty2(CourtParty previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CourtDocketRecordsByParty2.Contains(this))
            {
                previousValue.CourtDocketRecordsByParty2.Remove(this);
            }
    
            if (Party2 != null)
            {
                Party2.CourtDocketRecordsByParty2.Add(this);
    
                CourtParty2Id = Party2.Id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Party2")
                    && (ChangeTracker.OriginalValues["Party2"] == Party2))
                {
                    ChangeTracker.OriginalValues.Remove("Party2");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Party2", previousValue);
                }
                if (Party2 != null && !Party2.ChangeTracker.ChangeTrackingEnabled)
                {
                    Party2.StartTracking();
                }
            }
        }

        #endregion

    }
}
