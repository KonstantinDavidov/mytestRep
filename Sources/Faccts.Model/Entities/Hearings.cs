//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Linq.Expressions;
using System.Runtime.Serialization;
using ReactiveUI;

namespace Faccts.Model.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(CaseHistory))]
    [KnownType(typeof(Courtrooms))]
    [KnownType(typeof(CourtDepartmenets))]
    [KnownType(typeof(CourtDocketRecord))]
    public partial class Hearings: IObjectWithChangeTracker, IReactiveNotifyPropertyChanged, INavigationPropertiesLoadable
    {
    		
    		private MakeObjectReactiveHelper _reactiveHelper;
    
    		public Hearings()
    		{
    			_reactiveHelper = new MakeObjectReactiveHelper(this);
    			Initialize();
    		}
    
    		partial void Initialize();
    		
    
    		public IObservable<IObservedChange<object, object>> Changed 
    		{
    			get { return _reactiveHelper.Changed; }
    		}
    		public IObservable<IObservedChange<object, object>> Changing 
    		{
    			get { return _reactiveHelper.Changing; }
    		}
    		public IDisposable SuppressChangeNotifications() 
    		{
    			return _reactiveHelper.SuppressChangeNotifications();
    		}
    
    		private PropertyChangingEventHandler _propertyChanging;
    		public event PropertyChangingEventHandler PropertyChanging
    		{
    			add
    			{
    				_propertyChanging += value;
    			}
    			remove
    			{
    				_propertyChanging -= value;
    			}
    		}
    
    		public event EventHandler<LoadingNavigationPropertiesEventArgs> OnNavigationPropertyLoading;
    		protected virtual void RaiseNavigationPropertyLoading(string propertyName)
            {
                if (OnNavigationPropertyLoading != null)
                    OnNavigationPropertyLoading(this, new LoadingNavigationPropertiesEventArgs(propertyName));
            }
    
            protected virtual void RaiseNavigationPropertyLoading<T>(Expression<Func<T>> propertyExpression)
            {
                var body = propertyExpression.Body as MemberExpression;
                if (body == null)
                    throw new ArgumentException("'propertyExpression' should be a member expression");
    
                var expression = body.Expression as ConstantExpression;
                if (expression == null)
                    throw new ArgumentException("'propertyExpression' body should be a constant expression");
    
                object target = Expression.Lambda(expression).Compile().DynamicInvoke();
    
                RaiseNavigationPropertyLoading(body.Member.Name);
            }
    	    #region Simple Properties
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
    				OnPropertyChanging("Id");
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public System.DateTime HearingDate
        {
            get { return _hearingDate; }
            set
            {
                if (_hearingDate != value)
                {
    				OnPropertyChanging("HearingDate");
                    _hearingDate = value;
                    OnPropertyChanged("HearingDate");
                }
            }
        }
        private System.DateTime _hearingDate;
    
        [DataMember]
        public string Judge
        {
            get { return _judge; }
            set
            {
                if (_judge != value)
                {
    				OnPropertyChanging("Judge");
                    _judge = value;
                    OnPropertyChanged("Judge");
                }
            }
        }
        private string _judge;
    
        [DataMember]
        public Nullable<int> Courtroom_Id
        {
            get { return _courtroom_Id; }
            set
            {
                if (_courtroom_Id != value)
                {
                    ChangeTracker.RecordOriginalValue("Courtroom_Id", _courtroom_Id);
                    if (!IsDeserializing)
                    {
                        if (Courtrooms != null && Courtrooms.Id != value)
                        {
                            Courtrooms = null;
                        }
                    }
    				OnPropertyChanging("Courtroom_Id");
                    _courtroom_Id = value;
                    OnPropertyChanged("Courtroom_Id");
                }
            }
        }
        private Nullable<int> _courtroom_Id;
    
        [DataMember]
        public Nullable<int> Department_Id
        {
            get { return _department_Id; }
            set
            {
                if (_department_Id != value)
                {
                    ChangeTracker.RecordOriginalValue("Department_Id", _department_Id);
                    if (!IsDeserializing)
                    {
                        if (CourtDepartment != null && CourtDepartment.Id != value)
                        {
                            CourtDepartment = null;
                        }
                    }
    				OnPropertyChanging("Department_Id");
                    _department_Id = value;
                    OnPropertyChanged("Department_Id");
                }
            }
        }
        private Nullable<int> _department_Id;
    
        [DataMember]
        public FACCTS.Server.Model.Enums.DocketSession Session
        {
            get { return _session; }
            set
            {
                if (_session != value)
                {
    				OnPropertyChanging("Session");
                    _session = value;
                    OnPropertyChanged("Session");
                }
            }
        }
        private FACCTS.Server.Model.Enums.DocketSession _session;
    
        [DataMember]
        public bool HearingIssues_PermanentRO
        {
            get { return _hearingIssues_PermanentRO; }
            set
            {
                if (_hearingIssues_PermanentRO != value)
                {
    				OnPropertyChanging("HearingIssues_PermanentRO");
                    _hearingIssues_PermanentRO = value;
                    OnPropertyChanged("HearingIssues_PermanentRO");
                }
            }
        }
        private bool _hearingIssues_PermanentRO;
    
        [DataMember]
        public bool HearingIssues_ChildCustodyOrChildVisitation
        {
            get { return _hearingIssues_ChildCustodyOrChildVisitation; }
            set
            {
                if (_hearingIssues_ChildCustodyOrChildVisitation != value)
                {
    				OnPropertyChanging("HearingIssues_ChildCustodyOrChildVisitation");
                    _hearingIssues_ChildCustodyOrChildVisitation = value;
                    OnPropertyChanged("HearingIssues_ChildCustodyOrChildVisitation");
                }
            }
        }
        private bool _hearingIssues_ChildCustodyOrChildVisitation;
    
        [DataMember]
        public bool HearingIssues_ChildSupport
        {
            get { return _hearingIssues_ChildSupport; }
            set
            {
                if (_hearingIssues_ChildSupport != value)
                {
    				OnPropertyChanging("HearingIssues_ChildSupport");
                    _hearingIssues_ChildSupport = value;
                    OnPropertyChanged("HearingIssues_ChildSupport");
                }
            }
        }
        private bool _hearingIssues_ChildSupport;
    
        [DataMember]
        public bool HearingIssues_SpousalSupport
        {
            get { return _hearingIssues_SpousalSupport; }
            set
            {
                if (_hearingIssues_SpousalSupport != value)
                {
    				OnPropertyChanging("HearingIssues_SpousalSupport");
                    _hearingIssues_SpousalSupport = value;
                    OnPropertyChanged("HearingIssues_SpousalSupport");
                }
            }
        }
        private bool _hearingIssues_SpousalSupport;
    
        [DataMember]
        public bool HearingIssues_IsOtherIssue
        {
            get { return _hearingIssues_IsOtherIssue; }
            set
            {
                if (_hearingIssues_IsOtherIssue != value)
                {
    				OnPropertyChanging("HearingIssues_IsOtherIssue");
                    _hearingIssues_IsOtherIssue = value;
                    OnPropertyChanged("HearingIssues_IsOtherIssue");
                }
            }
        }
        private bool _hearingIssues_IsOtherIssue;
    
        [DataMember]
        public string HearingIssues_OtheIssueText
        {
            get { return _hearingIssues_OtheIssueText; }
            set
            {
                if (_hearingIssues_OtheIssueText != value)
                {
    				OnPropertyChanging("HearingIssues_OtheIssueText");
                    _hearingIssues_OtheIssueText = value;
                    OnPropertyChanged("HearingIssues_OtheIssueText");
                }
            }
        }
        private string _hearingIssues_OtheIssueText;

        #endregion

        #region Complex Properties
    
        [DataMember]
        public HearingIssue HearingIssue
        {
            get
            {
                if (!_hearingIssueInitialized && _hearingIssue == null)
                {
                    _hearingIssue = new HearingIssue();
                    ((INotifyComplexPropertyChanging)_hearingIssue).ComplexPropertyChanging += HandleHearingIssueChanging;
                }
                _hearingIssueInitialized = true;
                return _hearingIssue;
            }
            set
            {
                _hearingIssueInitialized = true;
                if (!Equals(_hearingIssue, value))
                {
                    if (_hearingIssue != null)
                    {
                        ((INotifyComplexPropertyChanging)_hearingIssue).ComplexPropertyChanging -= HandleHearingIssueChanging;
                    }
    
                    HandleHearingIssueChanging(this, null);
    				OnPropertyChanging("HearingIssue");
                    _hearingIssue = value;
                    OnPropertyChanged("HearingIssue");
    
                    if (value != null)
                    {
                        ((INotifyComplexPropertyChanging)_hearingIssue).ComplexPropertyChanging += HandleHearingIssueChanging;
                    }
                }
            }
        }
        private HearingIssue _hearingIssue;
        private bool _hearingIssueInitialized;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<CaseHistory> CaseHistory
        {
            get
            {
                if (_caseHistory == null)
                {
                    _caseHistory = new TrackableCollection<CaseHistory>();
                    _caseHistory.CollectionChanged += FixupCaseHistory;
                }
                return _caseHistory;
            }
            set
            {
                if (!ReferenceEquals(_caseHistory, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
    				OnNavigationPropertyChanging("CaseHistory");
                    if (_caseHistory != null)
                    {
                        _caseHistory.CollectionChanged -= FixupCaseHistory;
                    }
                    _caseHistory = value;
                    if (_caseHistory != null)
                    {
                        _caseHistory.CollectionChanged += FixupCaseHistory;
                    }
                    OnNavigationPropertyChanged("CaseHistory");
                }
            }
        }
        private TrackableCollection<CaseHistory> _caseHistory;
    
        [DataMember]
        public Courtrooms Courtrooms
        {
            get { return _courtrooms; }
            set
            {
                if (!ReferenceEquals(_courtrooms, value))
                {
                    var previousValue = _courtrooms;
    				OnNavigationPropertyChanging("Courtrooms");
                    _courtrooms = value;
                    FixupCourtrooms(previousValue);
                    OnNavigationPropertyChanged("Courtrooms");
                }
            }
        }
        private Courtrooms _courtrooms;
    
        [DataMember]
        public CourtDepartmenets CourtDepartment
        {
            get { return _courtDepartment; }
            set
            {
                if (!ReferenceEquals(_courtDepartment, value))
                {
                    var previousValue = _courtDepartment;
    				OnNavigationPropertyChanging("CourtDepartment");
                    _courtDepartment = value;
                    FixupCourtDepartment(previousValue);
                    OnNavigationPropertyChanged("CourtDepartment");
                }
            }
        }
        private CourtDepartmenets _courtDepartment;
    
        [DataMember]
        public TrackableCollection<CourtDocketRecord> CourtDocketRecords
        {
            get
            {
                if (_courtDocketRecords == null)
                {
                    _courtDocketRecords = new TrackableCollection<CourtDocketRecord>();
                    _courtDocketRecords.CollectionChanged += FixupCourtDocketRecords;
                }
                return _courtDocketRecords;
            }
            set
            {
                if (!ReferenceEquals(_courtDocketRecords, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
    				OnNavigationPropertyChanging("CourtDocketRecords");
                    if (_courtDocketRecords != null)
                    {
                        _courtDocketRecords.CollectionChanged -= FixupCourtDocketRecords;
                    }
                    _courtDocketRecords = value;
                    if (_courtDocketRecords != null)
                    {
                        _courtDocketRecords.CollectionChanged += FixupCourtDocketRecords;
                    }
                    OnNavigationPropertyChanged("CourtDocketRecords");
                }
            }
        }
        private TrackableCollection<CourtDocketRecord> _courtDocketRecords;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
    	protected virtual void OnPropertyChanging(String propertyName)
        {
            if (_propertyChanging != null)
            {
                _propertyChanging(this, new PropertyChangingEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
    	protected virtual void OnNavigationPropertyChanging(String propertyName)
        {
            if (_propertyChanging != null)
            {
                _propertyChanging(this, new PropertyChangingEventArgs(propertyName));
            }
        }
    
    	
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
        // Records the original values for the complex property HearingIssue
        private void HandleHearingIssueChanging(object sender, EventArgs args)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
        }
    
    
        protected virtual void ClearNavigationProperties()
        {
            CaseHistory.Clear();
            Courtrooms = null;
            CourtDepartment = null;
            CourtDocketRecords.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupCourtrooms(Courtrooms previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Hearings.Contains(this))
            {
                previousValue.Hearings.Remove(this);
            }
    
            if (Courtrooms != null)
            {
                Courtrooms.Hearings.Add(this);
    
                Courtroom_Id = Courtrooms.Id;
            }
            else if (!skipKeys)
            {
                Courtroom_Id = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Courtrooms")
                    && (ChangeTracker.OriginalValues["Courtrooms"] == Courtrooms))
                {
                    ChangeTracker.OriginalValues.Remove("Courtrooms");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Courtrooms", previousValue);
                }
                if (Courtrooms != null && !Courtrooms.ChangeTracker.ChangeTrackingEnabled)
                {
                    Courtrooms.StartTracking();
                }
            }
        }
    
        private void FixupCourtDepartment(CourtDepartmenets previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Hearings.Contains(this))
            {
                previousValue.Hearings.Remove(this);
            }
    
            if (CourtDepartment != null)
            {
                CourtDepartment.Hearings.Add(this);
    
                Department_Id = CourtDepartment.Id;
            }
            else if (!skipKeys)
            {
                Department_Id = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("CourtDepartment")
                    && (ChangeTracker.OriginalValues["CourtDepartment"] == CourtDepartment))
                {
                    ChangeTracker.OriginalValues.Remove("CourtDepartment");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("CourtDepartment", previousValue);
                }
                if (CourtDepartment != null && !CourtDepartment.ChangeTracker.ChangeTrackingEnabled)
                {
                    CourtDepartment.StartTracking();
                }
            }
        }
    
        private void FixupCaseHistory(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CaseHistory item in e.NewItems)
                {
                    item.Hearing = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CaseHistory", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CaseHistory item in e.OldItems)
                {
                    if (ReferenceEquals(item.Hearing, this))
                    {
                        item.Hearing = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CaseHistory", item);
                    }
                }
            }
        }
    
        private void FixupCourtDocketRecords(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CourtDocketRecord item in e.NewItems)
                {
                    item.Hearing = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CourtDocketRecords", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CourtDocketRecord item in e.OldItems)
                {
                    if (ReferenceEquals(item.Hearing, this))
                    {
                        item.Hearing = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CourtDocketRecords", item);
                    }
                }
            }
        }

        #endregion

    }
}
