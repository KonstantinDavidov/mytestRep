//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Linq.Expressions;
using System.Runtime.Serialization;

namespace Faccts.Model.Entities
{
    [DataContract(IsReference = true)]
    public partial class WSFederationConfiguration: IObjectWithChangeTracker, INotifyPropertyChanged, INavigationPropertiesLoadable
    {
    
    		public event EventHandler<LoadingNavigationPropertiesEventArgs> OnNavigationPropertyLoading;
    		protected virtual void RaiseNavigationPropertyLoading(string propertyName)
            {
                if (OnNavigationPropertyLoading != null)
                    OnNavigationPropertyLoading(this, new LoadingNavigationPropertiesEventArgs(propertyName));
            }
    
            protected virtual void RaiseNavigationPropertyLoading<T>(Expression<Func<T>> propertyExpression)
            {
                var body = propertyExpression.Body as MemberExpression;
                if (body == null)
                    throw new ArgumentException("'propertyExpression' should be a member expression");
    
                var expression = body.Expression as ConstantExpression;
                if (expression == null)
                    throw new ArgumentException("'propertyExpression' body should be a constant expression");
    
                object target = Expression.Lambda(expression).Compile().DynamicInvoke();
    
                RaiseNavigationPropertyLoading(body.Member.Name);
            }
    	    #region Simple Properties
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public bool Enabled
        {
            get { return _enabled; }
            set
            {
                if (_enabled != value)
                {
                    _enabled = value;
                    OnPropertyChanged("Enabled");
                }
            }
        }
        private bool _enabled;
    
        [DataMember]
        public bool EnableAuthentication
        {
            get { return _enableAuthentication; }
            set
            {
                if (_enableAuthentication != value)
                {
                    _enableAuthentication = value;
                    OnPropertyChanged("EnableAuthentication");
                }
            }
        }
        private bool _enableAuthentication;
    
        [DataMember]
        public bool EnableFederation
        {
            get { return _enableFederation; }
            set
            {
                if (_enableFederation != value)
                {
                    _enableFederation = value;
                    OnPropertyChanged("EnableFederation");
                }
            }
        }
        private bool _enableFederation;
    
        [DataMember]
        public bool EnableHrd
        {
            get { return _enableHrd; }
            set
            {
                if (_enableHrd != value)
                {
                    _enableHrd = value;
                    OnPropertyChanged("EnableHrd");
                }
            }
        }
        private bool _enableHrd;
    
        [DataMember]
        public bool AllowReplyTo
        {
            get { return _allowReplyTo; }
            set
            {
                if (_allowReplyTo != value)
                {
                    _allowReplyTo = value;
                    OnPropertyChanged("AllowReplyTo");
                }
            }
        }
        private bool _allowReplyTo;
    
        [DataMember]
        public bool RequireReplyToWithinRealm
        {
            get { return _requireReplyToWithinRealm; }
            set
            {
                if (_requireReplyToWithinRealm != value)
                {
                    _requireReplyToWithinRealm = value;
                    OnPropertyChanged("RequireReplyToWithinRealm");
                }
            }
        }
        private bool _requireReplyToWithinRealm;
    
        [DataMember]
        public bool RequireSslForReplyTo
        {
            get { return _requireSslForReplyTo; }
            set
            {
                if (_requireSslForReplyTo != value)
                {
                    _requireSslForReplyTo = value;
                    OnPropertyChanged("RequireSslForReplyTo");
                }
            }
        }
        private bool _requireSslForReplyTo;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
    	public override bool Equals(System.Object obj)
    	{
    		// If parameter is null return false.
            if (obj == null)
            {
                return false;
            }
    
            // If parameter cannot be cast to Point return false.
            WSFederationConfiguration p = obj as WSFederationConfiguration;
            if ((System.Object)p == null)
            {
                return false;
            }
    
    			if (this.Id != p.Id)
    				return false;
    			if (this.Enabled != p.Enabled)
    				return false;
    			if (this.EnableAuthentication != p.EnableAuthentication)
    				return false;
    			if (this.EnableFederation != p.EnableFederation)
    				return false;
    			if (this.EnableHrd != p.EnableHrd)
    				return false;
    			if (this.AllowReplyTo != p.AllowReplyTo)
    				return false;
    			if (this.RequireReplyToWithinRealm != p.RequireReplyToWithinRealm)
    				return false;
    			if (this.RequireSslForReplyTo != p.RequireSslForReplyTo)
    				return false;
    
    		return true;
    	}
    
    	public override int GetHashCode()
    	{
    		int hashCode = 1;
    			
    		hashCode ^= this.Id.GetHashCode();
    		if (this.Id != null)
    		{
    			hashCode ^= this.Id.GetHashCode();
    		}
    			
    		hashCode ^= this.Enabled.GetHashCode();
    		if (this.Enabled != null)
    		{
    			hashCode ^= this.Enabled.GetHashCode();
    		}
    			
    		hashCode ^= this.EnableAuthentication.GetHashCode();
    		if (this.EnableAuthentication != null)
    		{
    			hashCode ^= this.EnableAuthentication.GetHashCode();
    		}
    			
    		hashCode ^= this.EnableFederation.GetHashCode();
    		if (this.EnableFederation != null)
    		{
    			hashCode ^= this.EnableFederation.GetHashCode();
    		}
    			
    		hashCode ^= this.EnableHrd.GetHashCode();
    		if (this.EnableHrd != null)
    		{
    			hashCode ^= this.EnableHrd.GetHashCode();
    		}
    			
    		hashCode ^= this.AllowReplyTo.GetHashCode();
    		if (this.AllowReplyTo != null)
    		{
    			hashCode ^= this.AllowReplyTo.GetHashCode();
    		}
    			
    		hashCode ^= this.RequireReplyToWithinRealm.GetHashCode();
    		if (this.RequireReplyToWithinRealm != null)
    		{
    			hashCode ^= this.RequireReplyToWithinRealm.GetHashCode();
    		}
    			
    		hashCode ^= this.RequireSslForReplyTo.GetHashCode();
    		if (this.RequireSslForReplyTo != null)
    		{
    			hashCode ^= this.RequireSslForReplyTo.GetHashCode();
    		}
    		return hashCode;
    	}
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
