//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Linq.Expressions;
using System.Runtime.Serialization;
using ReactiveUI;
using System.Reactive.Linq;

namespace Faccts.Model.Entities
{
    public partial class AddressInfo : INotifyComplexPropertyChanging, IReactiveNotifyPropertyChanged
    {
    
    	private MakeObjectReactiveHelper _reactiveHelper;
    	public AddressInfo()
    	{
    		_reactiveHelper = new MakeObjectReactiveHelper(this);
    		Initialize();
    		Observable.Merge<Object>(
    				this.ObservableForProperty(x => x.StreetAddress)
    				,this.ObservableForProperty(x => x.City)
    				,this.ObservableForProperty(x => x.USAState)
    				,this.ObservableForProperty(x => x.ZipCode)
    				,this.ObservableForProperty(x => x.Phone)
    				,this.ObservableForProperty(x => x.Fax)
    			).
    			Subscribe(_ =>
    			{
    				IsDirty = true;
    			}
    			);
    	}
    
    	partial void Initialize();
    	
    	private bool _isDirty;
    	public bool IsDirty
    	{
    		get
    		{
    			return _isDirty;
    		}
    		set
    		{
    			if (_isDirty == value)
    				return;
    			OnPropertyChanging("IsDirty");
    			_isDirty = value;
    			OnPropertyChanged("IsDirty");
    		}
    	}
    
    	public IObservable<IObservedChange<object, object>> Changed 
    	{
    		get { return _reactiveHelper.Changed; }
    	}
    	public IObservable<IObservedChange<object, object>> Changing 
    	{
    		get { return _reactiveHelper.Changing; }
    	}
    	public IDisposable SuppressChangeNotifications() 
    	{
    		return _reactiveHelper.SuppressChangeNotifications();
    	}
    
    	private PropertyChangingEventHandler _propertyChanging;
    	public event PropertyChangingEventHandler PropertyChanging
    	{
    		add { _propertyChanging += value; }
    		remove {_propertyChanging -= value; }
    	}
        #region Simple Properties
    
        [DataMember]
        public string StreetAddress
        {
            get { return _streetAddress; }
            set
            {
                if (_streetAddress != value)
                {
                    OnComplexPropertyChanging();
    				OnPropertyChanging("StreetAddress");
                    _streetAddress = value;
                    OnPropertyChanged("StreetAddress");
                }
            }
        }
        private string _streetAddress;
    
        [DataMember]
        public string City
        {
            get { return _city; }
            set
            {
                if (_city != value)
                {
                    OnComplexPropertyChanging();
    				OnPropertyChanging("City");
                    _city = value;
                    OnPropertyChanged("City");
                }
            }
        }
        private string _city;
    
        [DataMember]
        public FACCTS.Server.Model.Enums.USAState USAState
        {
            get { return _uSAState; }
            set
            {
                if (_uSAState != value)
                {
                    OnComplexPropertyChanging();
    				OnPropertyChanging("USAState");
                    _uSAState = value;
                    OnPropertyChanged("USAState");
                }
            }
        }
        private FACCTS.Server.Model.Enums.USAState _uSAState;
    
        [DataMember]
        public string ZipCode
        {
            get { return _zipCode; }
            set
            {
                if (_zipCode != value)
                {
                    OnComplexPropertyChanging();
    				OnPropertyChanging("ZipCode");
                    _zipCode = value;
                    OnPropertyChanged("ZipCode");
                }
            }
        }
        private string _zipCode;
    
        [DataMember]
        public string Phone
        {
            get { return _phone; }
            set
            {
                if (_phone != value)
                {
                    OnComplexPropertyChanging();
    				OnPropertyChanging("Phone");
                    _phone = value;
                    OnPropertyChanged("Phone");
                }
            }
        }
        private string _phone;
    
        [DataMember]
        public string Fax
        {
            get { return _fax; }
            set
            {
                if (_fax != value)
                {
                    OnComplexPropertyChanging();
    				OnPropertyChanging("Fax");
                    _fax = value;
                    OnPropertyChanged("Fax");
                }
            }
        }
        private string _fax;

        #endregion

        #region ChangeTracking
    
        private void OnComplexPropertyChanging()
        {
            if (_complexPropertyChanging != null)
            {
                _complexPropertyChanging(this, new EventArgs());
            }
        }
    
        event EventHandler INotifyComplexPropertyChanging.ComplexPropertyChanging { add { _complexPropertyChanging += value; } remove { _complexPropertyChanging -= value; } }
        private event EventHandler _complexPropertyChanging;
    
        private void OnPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
    	private void OnPropertyChanging(String propertyName)
        {
            if (_propertyChanging != null)
            {
                _propertyChanging(this, new PropertyChangingEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged { add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
    
        public static void RecordComplexOriginalValues(String parentPropertyName, AddressInfo complexObject, ObjectChangeTracker changeTracker)
        {
            if (String.IsNullOrEmpty(parentPropertyName))
            {
                throw new ArgumentException("String parameter cannot be null or empty.", "parentPropertyName");
            }
    
            if (changeTracker == null)
            {
                throw new ArgumentNullException("changeTracker");
            }
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.StreetAddress", parentPropertyName), complexObject == null ? null : (object)complexObject.StreetAddress);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.City", parentPropertyName), complexObject == null ? null : (object)complexObject.City);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.USAState", parentPropertyName), complexObject == null ? null : (object)complexObject.USAState);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.ZipCode", parentPropertyName), complexObject == null ? null : (object)complexObject.ZipCode);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.Phone", parentPropertyName), complexObject == null ? null : (object)complexObject.Phone);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.Fax", parentPropertyName), complexObject == null ? null : (object)complexObject.Fax);
        }

        #endregion

    }
}
